{"meta":{"title":"黄文镔的博客","subtitle":"完美运用所学的一切","description":"黄文镔的博客，文章主题围绕Android相关编程技术，主要涉及Java和Kotlin语言","author":"黄文镔","url":"http://hwb0011.github.io","root":"/"},"pages":[{"title":"黄文镔的博客 | 404","date":"2019-07-05T05:27:37.060Z","updated":"2019-07-05T05:27:37.060Z","comments":true,"path":"404.html","permalink":"http://hwb0011.github.io/404.html","excerpt":"","text":""},{"title":"分类","date":"2019-06-01T05:38:36.000Z","updated":"2019-06-01T07:29:26.338Z","comments":false,"path":"categories/index.html","permalink":"http://hwb0011.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-06-01T05:35:29.000Z","updated":"2019-06-01T07:29:14.449Z","comments":false,"path":"tags/index.html","permalink":"http://hwb0011.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"APP启动黑屏白屏原因与解决方式","slug":"APP启动黑屏白屏原因与解决方式","date":"2019-06-30T06:55:52.000Z","updated":"2019-07-24T08:40:51.831Z","comments":true,"path":"2019/06/30/APP启动黑屏白屏原因与解决方式/","link":"","permalink":"http://hwb0011.github.io/2019/06/30/APP启动黑屏白屏原因与解决方式/","excerpt":"我们在桌面启动自己辛苦创建的APP时，总是会看到黑屏或是白屏现象，这让人的体验感觉不是很好，看看大厂的APP为什么不会有这个现象？有问题就要解决，即便不是BUG，用户体验一样很重要。","text":"我们在桌面启动自己辛苦创建的APP时，总是会看到黑屏或是白屏现象，这让人的体验感觉不是很好，看看大厂的APP为什么不会有这个现象？有问题就要解决，即便不是BUG，用户体验一样很重要。 1. APP启动黑/白屏的原因首先，我们需要知道一个APP启动时，屏幕上都会有什么。在我们的APP里，显示在屏幕上的自然是各个View了，而我们的View又都是在Activity的onCreate()方法中调用了setContentView()方法，传入了我们的layout文件，也就是我们理论上应该看到的Activity内容。但是Android系统在启动一个新的Activity时，首先进行的并不是绘制Activity的内容，我们来看看一个Activity的UI结构。 Activity UI结构 我们可以看到，一个Activity中在ContentView的外围还有PhoneWindow、DecorView、TitleView，当Activity进行绘制时会先绘制这三个View，这时ContentView还没加载进来，所以什么东西都看不到，系统会将屏幕填充主题默认的背景色，亮系主题填充白色，暗系主题填充黑色，就出现了Activity启动之前的黑/白屏现象。 2. 解决黑/白屏的方法刚才说了，系统会为屏幕填充主题默认的背景色，那么要解决这个问题就应该从屏幕的背景下手了。一想到背景，第一反应就是去layout里设置ContentView的background，但是系统并不会先加载ContentView，那有什么在系统绘制之前就能调整屏幕背景呢？ 注意，系统会填充主题默认的背景色，所以主题会在绘制之前加载，我们可以修改主题的背景达到目的。一般一个APP第一个启动的Activity都是Splash，作为一个Splash并不需要标题栏，而且普遍是全屏的。那么我们可以将主题进行修改一下，大概有两种方式： 将主题背景变成透明的，这样在ContentView加载出来之前，我们会透过启动的Activity看到桌面，就不会有黑/白屏的现象。再把标题栏去掉，把Activity设置成全屏的，效果挺不错，缺点是如果启动的是一个有复杂耗时操作的Activity，那么会有一种延迟的感觉。 1234567&lt;style name=\"AppTheme\" parent=\"android:Theme.Light.NoActionBar\"&gt; &lt;item name=\"android:windowIsTranslucent\"&gt;true&lt;/item&gt; &lt;item name=\"android:windowNoTitle\"&gt;true&lt;/item&gt; &lt;item name=\"android:windowActionBar\"&gt;false&lt;/item&gt; &lt;item name=\"android:windowBackground\"&gt;@android:color/transparent&lt;/item&gt; &lt;item name=\"android:WindowFullscreen\"&gt;true&lt;/item&gt;&lt;/style&gt; 将主题背景设置成一张图片，把标题栏去掉，把Activity设置成全屏的，这这样在ContentView加载出来之前，我们就能看到一张默认背景图，但是图片的屏幕适配问题就需要考虑了，主题里的背景图片会自动拉伸，可能会导致失真或者比例失调的问题。 123456&lt;style name=\"AppTheme\" parent=\"android:Theme.Light.NoActionBar\"&gt; &lt;item name=\"android:windowNoTitle\"&gt;true&lt;/item&gt; &lt;item name=\"android:windowActionBar\"&gt;false&lt;/item&gt; &lt;item name=\"android:windowBackground\"&gt;@drawable/bg_splash&lt;/item&gt; &lt;item name=\"android:WindowFullscreen\"&gt;true&lt;/item&gt;&lt;/style&gt; 3. 背景显示优化这里再将上述解决方法进行优化，减少用户使用时不好的体验。（PS：当然你可以不做此优化，如果你想忽悠老板，把锅甩给Android系统、手机的硬件配置、UI的图给的不匹配屏幕等等） 3.1 方法一优化方法一中的问题在于延迟感严重，那么我们需要做的就是尽量加快Splash的启动速度，在Splash中不加入任何逻辑操作，并且Application中任何的数据及开源框架的初始化方法都不应调用，当Splash启动完全后，在Splash的OnResume()方法中可以启动子线程进行各初始化操作，宁可让用户在背景图中等待，不要让用户看着手机桌面认为手机死机了。 3.2 方法二优化方法二中的问题在于图片拉伸可能导致失真或者比例失调，使得界面不够美观。简单的方式就是建立各个drawable文件夹，覆盖所有的屏幕尺寸类型，每个文件夹下塞一张让UI做的合理的背景图。这种方法超级令人无语，UI的工作量较大，而且你也不可能覆盖所有的屏幕尺寸，比如这样： 超长的手机屏幕 那么怎样可以拥有更好的用户体验呢？这时候我们需要的是drawable。 3.2.1 drawable的类型在Android中，我们可以使用xml自定义一个drawable，用的最多的场景就是背景图了，Android系统的一些默认图标也都是用xml实现的，当然那涉及到了一些矢量图的知识。 首先我们先了解一下drawable的类型，常见的几种有：BitmapDrawable、ShapeDrawable、StateListDrawable、LevelListDrawable、LayerDrawable、TransitionDrawable、ScaleDrawable、AnimationDrawable、InsetDrawable、NinePatchDrawable、ClipDrawable、VectorDrawable。 这里我采用了LayerDrawable来解决图片拉伸的问题，其他的drawable以后再写一篇文章专门分析各个drawable。 3.2.2 LayerDrawable解决图片拉伸LayerDrawable为什么能解决图片拉伸问题呢？这要从LayerDrawble的性质说起了： XML标签为layer-list 层次化的Drawable合集 可以包含多个item，每个item表示一个Drawable item中可以通过android:drawable直接引用资源 item中可以通过android:top等指定相对于父节点的位置 多个Drawable的层次化叠加，并且可以指定每个Drawable的位置，是不是和layout很像？一些简单的布局显示可以用LayerDrawble来完成，不过只能塞Drawable进去，文字什么的就不行了。 那么我们来看一下一个可以很好适配屏幕的背景图改如何完成。首先在drawable文件夹下建立一个layer-list类型的drawable文件bg_splash.xml，随后写入如下代码： 1234567&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;layer-list xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt; &lt;item android:drawable=\"@drawable/bg\"/&gt; &lt;item android:top=\"175dp\"&gt; &lt;bitmap android:gravity=\"top\" android:src=\"@drawable/logo\"/&gt; &lt;/item&gt;&lt;/layer-list&gt; 我们在layer-list中放入了两个item：第一个是一整个页面的背景，可以是图片，但是笔者建议用纯色的ShapeDrawable，一定程度上减少内存开销并且无需考虑图片失真之类的问题；第二个是一个Bitmap，&lt;bitmap&gt;这个标签是按照图片大小插入一张图片，这样避免了图片在屏幕上的拉伸，通过android:top来指定这个item顶部的偏移距离，同样还可以指定android:bottom、android:left、android:right来定位item的位置，随后对&lt;bitmap&gt;的android:gravity设置为top，让logo可以显示在顶部。这样一个能随着屏幕进行适配并且不会失真的背景就做好了，按照方法二设置为android:windowBackground即可。 3.2.3 style主题优化按照方法二的设定，整个App将使用我们制作的bg_splash作为背景，这时候如果不给每个Activity设置背景或者在使用虚拟键盘时，进入App之后屏幕上也会看到bg_splash出现在没有控件的位置，造成用户的疑惑或者反感。 我们知道Activity也是可以设置主题的，那么我们可以给Application设置一个默认的主题AppTheme，然后给SplashActivity设置我们的全屏带背景的主题SplashTheme，这样在我们的SplashActivity中就可以迅速显示启动背景图，进入App中，在其他Activity中也不会出现启动背景图，最终的styles和AndroidManifest文件如下： 123456789101112styles.xml&lt;style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\"&gt; &lt;item name=\"colorPrimary\"&gt;@color/colorPrimary&lt;/item&gt; &lt;item name=\"colorPrimaryDark\"&gt;@color/colorPrimaryDark&lt;/item&gt; &lt;item name=\"colorAccent\"&gt;@color/colorAccent&lt;/item&gt; &lt;item name=\"android:windowBackground\"&gt;@color/colorDefaultBg&lt;/item&gt;&lt;/style&gt;&lt;style name=\"SplashTheme\" parent=\"AppTheme\"&gt; &lt;item name=\"android:windowFullscreen\"&gt;true&lt;/item&gt; &lt;item name=\"android:windowBackground\"&gt;@drawable/bg_splash&lt;/item&gt;&lt;/style&gt; 123456789101112131415161718192021222324AndroidManifest.xml&lt;application android:name=\".MyApplication\" android:theme=\"@style/AppTheme\" android:supportsRtl=\"true\" android:roundIcon=\"@mipmap/ic_launcher_round\" android:label=\"@string/app_name\" android:icon=\"@mipmap/ic_launcher\" android:allowBackup=\"true\"&gt; &lt;activity android:name=\".SplashActivity\" android:theme=\"@style/SplashTheme\" android:screenOrientation=\"portrait\" android:configChanges=\"orientation|screenSize|keyboardHidden\"&gt; &lt;intent-filter&gt; &lt;action android:name=\"android.intent.action.MAIN\"/&gt; &lt;category android:name=\"android.intent.category.LAUNCHER\"/&gt; &lt;/intent-filter&gt; &lt;/activity&gt;&lt;/application&gt;","categories":[{"name":"避坑指南","slug":"避坑指南","permalink":"http://hwb0011.github.io/categories/避坑指南/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://hwb0011.github.io/tags/Android/"},{"name":"优化","slug":"优化","permalink":"http://hwb0011.github.io/tags/优化/"}]},{"title":"25类Android常用开源框架","slug":"25类Android常用开源框架","date":"2019-06-23T03:41:22.000Z","updated":"2019-07-19T06:54:37.837Z","comments":true,"path":"2019/06/23/25类Android常用开源框架/","link":"","permalink":"http://hwb0011.github.io/2019/06/23/25类Android常用开源框架/","excerpt":"工欲善其事，必先利其器！开源框架奉上，支持开源，不造轮子，巨人带飞！持续更新，让开发更顺利。","text":"工欲善其事，必先利其器！开源框架奉上，支持开源，不造轮子，巨人带飞！持续更新，让开发更顺利。 1. 图片加载，缓存，处理 框架名称 功能描述 Android Universal Image Loader 一个强大的加载，缓存，展示图片的库，已过时 Picasso 一个强大的图片下载与缓存的库 Fresco 一个用于管理图像和他们使用的内存的库 Glide 一个图片加载和缓存的库，使用的App有：网易新闻 GlidePalette Android Lollipop Palette is now easy to use with Glide PicassoPalette Android Lollipop Palette is now easy to use with Picasso Picasso-transformations 一个为Picasso提供多种图片变换的库 Glide-transformations 一个为Glide提供多种图片变换的库 2. 图片裁剪 框架名称 功能描述 uCrop Image Cropping Library for Android，使用的App有：薄荷，哔哩哔哩 android-crop 图片裁剪，使用的App有：网易新闻，芒果TV cropper 图片裁剪开源框架 Android-Image-Cropper Image Cropping Library for Android, optimized for Camera / Gallery PhotoCropper Android 大图片裁剪终极解决方案 android-cropimage CropImage Activity from Gallery.apk packaged as a reusable Android library PhotoCrop A Library which can be used to crop images in Android similar to Facebook and Telegram，使用的App有：快手 3. 图片选择 框架名称 功能描述 MultiImageSelector 图片选择，使用的App有：薄荷 BGAPhotoPicker-Android Android 图片选择、预览、九宫格图片控件、拖拽排序九宫格图片控件 TakePhoto 轻量级Android照片处理框架 RxGalleryFinal Android图片单选/多选、拍照、裁剪、压缩。视频选择和录制。 boxing 一个多媒体选择器库，B站出品。可以选择一张或者多张图片，提供预览和裁剪功能。同样支持gif图，选择视频和图像压缩功能。 4. 图片转换，压缩，滤镜 框架名称 功能描述 Android-gpuimage 一个开源的基于GPU的图像处理库，提供各种各样的图像处理滤镜，并且支持照相机和摄像机的实时滤镜，使用的App有：快手 photoview 使用的App有：薄荷,网易新闻 circleimageview 圆形图片，使用的App有：薄荷 RoundedImageView 圆形图片，使用的App有：薄荷 SelectableRoundedImageView Android ImageView that supports different radii on each corner android-gif-drawable gif图片，使用的App有：网易新闻，快手 Luban 可能是最接近微信朋友圈的图片压缩算法 Compressor Compressor is a lightweight and powerful android image compression library 5. 高斯模糊，毛玻璃，图片模糊 框架名称 功能描述 android-stackblur Android StackBlur is a library that can perform a blurry effect on a Bitmap based on a gradient or radius, and return the result. The library is based on the code of Mario Klingemann. Blurry Blurry is an easy blur library for Android blurkit-android The missing Android blurring library. Fast blur-behind layout that parallels iOS. BlurView Dynamic iOS-like blur of underlying Views for Android ImageBlurring Android blurring image(bitmap) by java and jni 6. 缓存 框架名称 功能描述 LruCache Android原生API，内存缓存 DiskLruCache Java实现基于LRU的磁盘缓存 ASimpleCache 一个为android制定的轻量级的开源缓存框架 base-diskcache Android 缓存库，融合了DiskLruCache和ASimpleCache 7. 网络请求 框架名称 功能描述 httpclient apache开源的网络请求框架，已过时 AsyncHttpClient 基于httpclient封装，已过时 OkHttp Square出品，一个Http与Http/2的客户端 Retrofit Square出品，类型安全的Http客户端 Volley Google推出的Android异步网络请求框架和图片加载框架，使用的App有：网易新闻 从Android 6.0 开始，Google删除了apache的开源网络请求框架httpclient，所以基于httpclient的AsyncHttpClient也不推荐使用了。Volley适合那些请求频繁但数据量不大的场景，不适用于大数据的请求，比如下载文件。Android 6.0 后，Android开始使用OkHttp，而Retrofit是一个网络代理框架，可以更简单的使用OkHttp。 8. 网络解析 框架名称 功能描述 Gson 一个Java序列化/反序列化库，可以将JSON和java对象互相转换 Jackson Jackson可以轻松地将Java对象转换成json对象和xml文档，同样也可以将json、xml转换成Java对象 Fastjson Java上一个快速的JSON解析器/生成器 HtmlPaser 一种用来解析单个独立html或嵌套html的方式 Jsoup 一个以最好的DOM，CSS和jQuery解析html的库 9. 数据库 框架名称 功能描述 OrmLite JDBC和Android的轻量级ORM java包 Sugar 用超级简单的方法处理Android数据库 GreenDAO 一种轻快地将对象映射到SQLite数据库的ORM解决方案，使用的App有：薄荷，京东 ActiveAndroid 以活动记录方式为Android SQLite提供持久化 SQLBrite SQLiteOpenHelper 和ContentResolver的轻量级包装 android-database-sqlcipher 数据库加密 storio Beautiful API for SQLiteDatabase and ContentResolver realm-java 移动数据库，高性能数据库：一个SQLite和ORM的替换品 ObjectBox 相信不少人都用过GreenDao和EventBus，这两库都是greenrobot公司出品。ObjectBox也是该公司出品。GreenDao号称是最快的与SQLite的对象关系映射（ORM）。但是自从2011年以来，公司声称发现了许多的缺陷，有很多问题影响了性能。所以开发出另外一套性能最好且易用的NoSQL数据库，优于其他数据库5-15倍的性能。 10. 依赖注入 框架名称 功能描述 ButterKnife 将Android视图和回调方法绑定到字段和方法上 Dagger2 一个Android和java快速依赖注射器 AndroidAnotations 快速安卓开发。易于维护 RoboGuice Android平台的Google Guice 已退役 guice Google开发的依赖注入框架 11. 图表Chart 框架名称 功能描述 WilliamChart 创建图表的Android库 HelloCharts 兼容到API8的Android图表库，使用的App有：薄荷 MPAndroidChart 一个强大的Android图表视图/图形库，使用的App有：春雨医生 12. 后台处理 框架名称 功能描述 Tape 一个轻快的，事务性的，基于文件的FIFO的库 Android Priority Job Queue 一个专门为Android轻松调度任务的工作队列 13. 事件总线 框架名称 功能描述 EventBus 安卓优化的事件总线，简化了活动、片段、线程、服务等的通信，使用的App有：薄荷 Otto 一个基于Guava的增强的事件总线 HermesEventBus 一个基于EventBus的、能在进程间发送和接收event的库，在IPC或者插件开发中非常有用 14. 响应式编程 框架名称 功能描述 RxJava JVM上的响应式扩展 RxJavaJoins 为RxJava提供Joins操作 RxAndroid Android上的响应式扩展，在RxJava基础上添加了Android线程调度 RxBinding 提供用RxJava绑定Android UI的API Agera Android上的响应式编程 RxLifecycle Lifecycle handling APIs for Android apps using RxJava 15. Log框架 框架名称 功能描述 Logger 简单，漂亮，强大的Android日志工具 Hugo 在调试版本上注解的触发方法进行日志记录 Timber 一个小的，可扩展的日志工具 16. 测试框架 框架名称 功能描述 Mockito Java编写的Mocking单元测试框架 Robotium Android UI 测试 Robolectric Android单元测试框架 Android自带很多测试工具：JUnit，Monkeyrunner，UiAutomator，Espresso等。 17. 调试框架 框架名称 功能描述 Stetho 调试Android应用的桥梁，使得可以利用Chrome开发者工具进行调试 18. 性能优化 框架名称 功能描述 LeakCanary 内存泄漏检测工具 BlockCanary 轻松找出Android App界面卡顿元凶 ACRA Android应用程序崩溃报告 Google Guava Guava工程包含了若干被Google的 Java项目广泛依赖 的核心库，例如：集合 [collections] 、缓存 [caching] 、原生类型支持 [primitives support] 、并发库 [concurrency libraries] 、通用注解 [common annotations] 、字符串处理 [string processing] 、I/O 等等。 所有这些工具每天都在被Google的工程师应用在产品服务中。 google protobuf 由google开发，并且在google内部使用。Protobuf的作用和xml、json是一回事，但他是二进制格式，性能好、效率高。 19. 热修复 框架名称 功能描述 tinker 腾讯开源的一个热修复框架 AndFix alibaba热修复框架 dexposed alibaba热修复框架 20. 二维码 框架名称 功能描述 Zxing 一个二维码开源框架 barcodescanner 使用的App有：薄荷 BGAQRCode-Android 扫描二维码、扫描条形码、相册获取图片后识别、生成带 Logo 二维码、支持微博微信 QQ 二维码扫描样式 zxing-android-embedded 使用的App有：春雨医生，芒果TV 21. 多媒体 框架名称 功能描述 ijkplayer Bilibili开源的视频播放器 DanmakuFlameMaster Android开源弹幕引擎·烈焰弹幕使，使用的App有：网易新闻 Vitamio 一款全能多媒体开发框架，全面支持硬件解码与 GPU 渲染 FFmpeg 一个基于C语言的多媒体开源框架 百度智能云播放器 百度智能云推出的 Android 平台视频播放器 ExoPlayer Google开源的视频播放器 22. 汉语转拼音 框架名称 功能描述 pinyin4j A copy of http://sourceforge.net/projects/pinyin4j, then deploy it to maven central repository. TinyPinyin 适用于Java和Android的快速、低内存占用的汉字转拼音库。 PinyinSearchLibrary The library of PinyinSearch,a Java Library which provide data parsing methods, data matching method and so on for T9 search and Qwerty search.PinyinSearch = T9Search + QwertySearch pinyin4android 唯品会使用，2011年出了1.0版本后没更新了 23. 下载 框架名称 功能描述 MultiThreadDownload 使用的App有：薄荷 FileDownloader Android 文件下载引擎，稳定、高效、灵活、简单易用 RxDownload 基于RxJava和Retrofit打造的下载工具, 支持多线程下载和断点续传, 智能判断是否支持断点续传等功能 file-downloader 安卓上轻量级Http/Https文件下载框架，我的目标是让安卓文件下载越简单越好，尽可能以最简洁明了的方式完成复杂需求。 24. 动画 框架名称 功能描述 facebook:rebound A Java library that models spring dynamics and adds real world physics to your app ViewAnimator A fluent Android animation library Material-Animations Android Transition animations explanation with examples AndroidViewAnimations Cute view animation collection. ListViewAnimations An Android library which allows developers to easily add animations to ListView items recyclerview-animators An Android Animation library which easily add itemanimator to RecyclerView items. RecyclerViewItemAnimators An Android library which provides simple Item animations to RecyclerView items AnimationEasingFunctions Android Animation Easing Functions. Let’s make animation more real! BaseAnimation BaseAnimation收集网络Android相关动画集合，自定义控件等，近200多种源码 FragmentAnimations 3D animations for support-v4 Fragment transition. AnimatedEditText Androids EditText that animates the typed text. EditText is extended to create AnimatedEditText and a PinEntryEditText. ViewPagerTransforms Library containing common animations needed for transforming ViewPager scrolling for Android v13+ lottie-android Render After Effects animations natively on Android and iOS 25. Android选择器类库 框架名称 功能描述 material-calendarview material design 风格的日历控件使用的App有：薄荷 MaterialDateTimePicker Pick a date or time on Android in style，使用的App有：薄荷 android-times-square Standalone Android widget for picking a single date from a calendar view. AndroidPicker 安卓选择器类库，包括日期时间选择器、单项选择器、地址选择器、颜色选择器、文件目录选择器、数字选择器、星座选择器等。 Android-PickerView 仿iOS的PickerView控件，有时间选择和选项选择并支持一二三级联动效果 WheelPicker Simple and fantastic wheel view in realistic effect for android. Android-FilePicker Photopicker and document picker for android NumberPickerView another NumberPicker with more flexible attributes on Android platform Android-PickerView-Library Simple PickerView for Android","categories":[{"name":"开发资源","slug":"开发资源","permalink":"http://hwb0011.github.io/categories/开发资源/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://hwb0011.github.io/tags/Android/"},{"name":"框架","slug":"框架","permalink":"http://hwb0011.github.io/tags/框架/"},{"name":"资源","slug":"资源","permalink":"http://hwb0011.github.io/tags/资源/"}]},{"title":"Kotlin征途（一）：简单APP的制作","slug":"Kotlin征途（一）：简单APP的制作","date":"2019-06-16T08:11:45.000Z","updated":"2019-07-17T06:30:15.258Z","comments":true,"path":"2019/06/16/Kotlin征途（一）：简单APP的制作/","link":"","permalink":"http://hwb0011.github.io/2019/06/16/Kotlin征途（一）：简单APP的制作/","excerpt":"Kotlin语言在谷歌的大力推动下，将来必然需要应用在工作中，虽然现在依然是Java主导，但在GitHub上已经有很多库采用了Kotlin来编写，也有很多新开发的APP用的是Kotlin，大厂也开始试水了，是时候让Kotlin成为我们成功的基石了。","text":"Kotlin语言在谷歌的大力推动下，将来必然需要应用在工作中，虽然现在依然是Java主导，但在GitHub上已经有很多库采用了Kotlin来编写，也有很多新开发的APP用的是Kotlin，大厂也开始试水了，是时候让Kotlin成为我们成功的基石了。 1. 学习Koltin的必要性在进入开发之前，我想先将学习Kotlin的必要性梳理一下。 目前在网络上对Kotlin的批判很多，常常能看到 《抛弃Java 改用 Kotlin 的六个月后,我后悔了》、《从Java到Kotlin,然后又回到Java!》、《Kotlin 并没有想的那么好》 等等，根据2018年调查显示1/4的Java开发者在迁移后表示后悔，详细调查报告名为The State of Kotlin 2018，该报告阐述了Koltin在2018年的情况。 但我本人认为，不论Kotlin目前的稳定性与健壮性如何，将来在Android开发中必然是有它的一席之地。甲骨文与谷歌的官司必然让谷歌不愿意看到自家的系统被他人握有把柄，openJdk不会是一个长久之计。作为一只不断学习进取的程序猿，学习Kotlin语言也是一条不错的路。 就目前来说，Kotlin还有许多不足，建议熟悉Kotlin语法教程后可以去看看 《Kotlin 的陷阱以及如何避免》 之类的文章。当然，一门语言的发展必然要踩许许多多的坑，Kotlin还很年轻，我们应该给它更多的宽容。而且Kotlin相较于Java还是有很多优点的，用Kotlin取缔Java的优缺点并存。 在我看来，学习并尝试使用Kotlin开发Android项目是很有必要的，但贸然使用Kotlin直接在老旧项目中取缔Java也许会导致比较严重的后果。我建议在老旧的项目中使用Kotlin还是需要多斟酌，而在新的项目中完全可以直接使用Kotlin，多观望Kotlin的更新情况，适时更新项目中使用的Kotlin版本，让你的项目和你一起成长。 2. 用Kotlin制作一个简单的APP目前我只在AS中开发APP，本文中所用也是AS，建议使用Eclipse开发的童鞋尽早加入AS的大军。 2.1 用AS建立一个Kotlin Android项目首先是需要建立一个新的项目，打开AS软件，并选择Start a new Android Studio project，如图所示： 新建项目 随后将APP name、domain、location根据所需配置好，在底部将Include Kotlin Support勾选上，如图所示： 勾选Kotlin支持 右下角点Next后，进入Target Android Device选择界面，这里根据所需配置好直接Next就好，如图所示： Target Android Device选择 接下来选择Add No Activity，不然AS直接就建立了一个可以直接运行的Hello World APP，我们还是体会一下建立Kotlin Activity的过程，如图所示： 选择Add No Activity Finish以后，等待AS建立一个新的项目并初始编译完成，我们就可以开始我们的第一个Kotlin APP的制作啦。 在Kotlin项目中，相对于Java的Android项目主要有两个区别： 项目目录下的build.gradle文件的buildscript 123456789buildscript &#123; ext.kotlin_version = &apos;1.3.41&apos; ... dependencies &#123; ... classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot; ... &#125;&#125; app目录下的build.gradle文件的plugin和dependencies 123456789...apply plugin: &apos;kotlin-android&apos;apply plugin: &apos;kotlin-android-extensions&apos;...dependencies &#123; ... implementation &quot;org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version&quot; ...&#125; 因此，在已有的Java Android项目中做出上述改动后，该项目也就可以用上Kotlin做开发啦，Kotlin和Java也可以很好的协同工作，当然，如果要这么做，请仔细斟酌并进行足够的测试。 2.2 添加一个Activity在项目目录中，选中app/src/main/包名文件夹单击鼠标右键，在弹出菜单中选中New菜单，接着在弹出菜单中选中Activity菜单，最后在弹出菜单中选中Empty Activity单击鼠标左键，如图所示： 选择Empty Activity AS将弹出一个Activity的配置对话框，将各个属性配置好，注意由于项目中没有启动的第一个Activity，所以要勾选Launcher Activity，同时注意Source Language的选项要是Kotlin，如图所示： 配置Activity 点击Finish后，AS会建立相应的layout和kt文件，kt文件就相当于java文件。现在这个新的Activity还是一个空白的页面，我们可以给它加一个TextView，给它设置内容，看看Kotlin与Java的不同之处。 layout与之前还是一样的，代码如下： 123456789101112&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;TextView android:id=\"@+id/text_view\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_gravity=\"center\"/&gt;&lt;/FrameLayout&gt; Kotlin的不同还是比较多的，代码如下: 123456789101112import android.support.v7.app.AppCompatActivityimport android.os.Bundleimport kotlinx.android.synthetic.main.activity_main.*class MainActivity : AppCompatActivity() &#123; override fun onCreate(savedInstanceState: Bundle?) &#123; super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) text_view.text = &quot;Hello World !&quot; &#125;&#125; 这样一个Hello World的TextView就可以显示在界面中了，run一遍看看效果和Java的没什么区别。简单看一下kt文件我们可以看到一些和Java的区别： 导入了一个kotlinx.android.synthetic.main.activity_main.*，这个import可以让layout中的控件可以直接用id来调用，省略了findViewById()这一个步骤。 Kotlin去掉了语句末尾的;，让少写了’;’而导致编译失败的问题从此消失。 继承关系直接用:表示，接口的实现也是用的:表示，似乎在精简代码的同时让人有点迷糊。 override变成了一个修饰语，不再是注解的形式。 变量的表示使用了变量名: 类名的形式，?代表了此变量可以为空，空安全也是Kotlin的主打特点。 对象的属性看上去可以直接操作，实际是来自get()/set()，似乎在精简代码的同时让人感觉增加了耦合性。 当然区别不止这几点，只是在一个最简单的APP中都存在的上述几点区别，可以看出一些Kotlin的设计理念，应该旨在解决一些Java过于冗杂和不太安全的问题。","categories":[{"name":"Kotlin征途","slug":"Kotlin征途","permalink":"http://hwb0011.github.io/categories/Kotlin征途/"}],"tags":[{"name":"Android","slug":"Android","permalink":"http://hwb0011.github.io/tags/Android/"},{"name":"Kotlin","slug":"Kotlin","permalink":"http://hwb0011.github.io/tags/Kotlin/"},{"name":"编程","slug":"编程","permalink":"http://hwb0011.github.io/tags/编程/"}]},{"title":"MarkDown使用教程(In Atom)","slug":"MarkDown使用教程(In Atom)","date":"2019-06-12T08:11:45.000Z","updated":"2019-07-15T02:30:02.249Z","comments":true,"path":"2019/06/12/MarkDown使用教程(In Atom)/","link":"","permalink":"http://hwb0011.github.io/2019/06/12/MarkDown使用教程(In Atom)/","excerpt":"程序猿都爱写博客，在写博客的过程中，大量运用的就是MarkDown语法了。MarkDown不只是用来写博客，日常生活中的感悟、工作中的心得体会、项目任务安排等等大篇幅的文章都可以用MarkDown来迅速的完成具有一定显示效果的文本。","text":"程序猿都爱写博客，在写博客的过程中，大量运用的就是MarkDown语法了。MarkDown不只是用来写博客，日常生活中的感悟、工作中的心得体会、项目任务安排等等大篇幅的文章都可以用MarkDown来迅速的完成具有一定显示效果的文本。 1. MarkDown的编写工具 工欲善其事，必先利其器，要学习MarkDown，编写工具是必不可少的。 其实严格来说，MarkDown没有专门的编写工具，通过简单的文本编辑器即可编写MarkDown文本，比如Windows的记事本。但简单的文本编辑器功能欠缺，没有高亮的文字表现，更没有文本效果可言，就像没有人用记事本写代码一样，最起码也得用个Edit Plus。 笔者菜鸟一枚，最近开始接触MarkDown，挑选的编辑器是Atom，GitHub出品的简洁强大的编辑器，插件众多，支持的语言也比较多，也是一个不错的前端开发编辑器。 1.1 simplified-chinese-menu中文插件使用Atom时，首先对满屏的英文就有点抗拒，虽然写程序都用的英文，但对一些菜单、提示语还是更喜欢中文。 simplified-chinese-menu这个插件基本将Atom里的各个菜单及提示语做到了汉化，瑕疵比较少，Atom装上这个插件，新手用起来方便多了。 1.2 markdown-scroll-sync同步滚动插件markdown-scroll-sync同步滚动插件可以让预览与文本保持同步，减少查看预览的时间，确实是更方便了一些。 1.3 markdown-table-editor表格编辑插件MarkDown在编写表格时稍微有些吃力，空格、对齐什么的，手敲太慢了有木有！！！markdown-table-editor表格编辑插件，让表格的编写更简单，你值得拥有。 2. MarkDown的基础语法如果不算扩展，Markdown的语法绝对简单到让你爱不释手！Markdown语法分为如下几大部分： 标题 段落 引用 代码块 强调 列表 分割线 链接 图片 表格 流程图 2.1 标题利用#标识标题，最对可以标识六级标题，#是一级标题，字体最大，######是六级标题，字体最小，示例如下： 123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 效果如下： 示例图片 2.2 段落段落，在word中以回车换行来标识，而在md中需要一行空行进行分割两个段落，同一个段落中的多个空格、tab、回车符将被删减为一个空格（部分展示md的浏览器中，回车符可以表现为段内换行），在段落中允许存在换行，使用方式为两个以上空格加回车符，示例如下： 1234567这是段落一，下面是一行空行。这是段落二，这是一个空格 ，这是五个空格 ，这是两个tab ，这是一个回车符，下面将用两个空格加回车进行段落内换行 换行完成，还是段落二。这是段落三。 效果如下： 这是段落一，下面是一行空行。 这是段落二，这是一个空格 ，这是五个空格 ，这是两个tab ，这是一个回车符，下面将用两个空格加回车进行段落内换行换行完成，还是段落二。 这是段落三。 2.3 引用md中使用&gt;来标识一个段落的引用，引用可以使用多个&gt;进行嵌套，示例如下： 123&gt;这里是引用的段落&gt;&gt;这里是一层嵌套的引用&gt;&gt;&gt;这里是两层嵌套的引用 效果如下： 这里是引用的段落 这里是一层嵌套的引用 这里是两层嵌套的引用 2.4 代码块作为程序猿，代码在博客中必不可少，md中对代码块是有三种标识方式的。第一中是行内代码标识，用一对反引号来包裹几个字符，效果有些类似软件中常见的标签。第二种是在行前添加四个空格来标识一行代码，但此行前一行只能为空行或者代码块。第三种是使用一对三个反引号包裹一大段文字，可以标识一段代码，在三个反引号后可以加语言名称来达到关键字高亮效果。（PS：反引号在键盘左上角Esc按钮下方，第一次用时笔者还以为是单引号）示例如下： 12345678910111213141516171819这里有一个行内代码`code`，下面有两行代码： a line codes a line codes下面有一段代码：（```）code and code and codecode and code and code（```）下面有一段Java代码：（```java）public class Hello&#123; public static void main (String[] args) &#123; System.out.println(&quot;Hello world !&quot;); &#125;&#125;（```） 注：为了防止代码块标识符被转译，笔者在三个反引号前后加了括号，使用时应去除括号。 效果如下： 这里有一个行内代码code，下面有两行代码： a line codes a line codes下面有一段代码： 12code and code and codecode and code and code 下面有一段Java代码： 12345public class Hello&#123; public static void main (String[] args) &#123; System.out.println(\"Hello world !\"); &#125;&#125; 2.5 强调强调效果有粗体和斜体两种，一对*符号包裹的字符会显示为斜体，而一对**包裹的字符会显示为粗体，示例如下： 1这是*斜体*，这是**粗体** 效果如下： 这是斜体，这是粗体 2.6 列表列表的编写相当方便，无序列表只需在行前加+/-/*符号加空格即可，有序列表则在行前加1.等序号加空格即可，列表内容加入[ ]或[x]可用来标识待办事项，示例如下： 123456789101112+ 无序列表- 无序列表* 无序列表1. 有序列表2. 有序列表3. 有序列表* [ ] 待办1* [x] 待办21. [ ] 待办32. [x] 待办4 效果如下： 无序列表 无序列表 无序列表 有序列表 有序列表 有序列表 待办1 待办2 待办3 待办4 2.7 分割线分割线在各个浏览器的显示形式都有所不同，使用三个*/-/_均可以实现一根分割线，示例如下： 123***---___ 效果如下： 2.8 链接在md中想要跳转到某个外链，可以使用两种方式完成，第一种是md语法[超链接名](超链接地址 &quot;超链接title&quot;)title可加可不加，这种方式可能无法在当前标签页中打开网址，第二种是使用html中的&lt;a&gt;标签，可以指定target来控制网址打开方式。示例如下： 123[百度](http://www.baidu.com/ &quot;百度一下&quot;)&lt;a href=&quot;http://www.baidu.com/&quot; target=&quot;_blank&quot;&gt;百度&lt;/a&gt; 效果如下： 百度 百度 2.9 图片图片的使用方式有些类似链接，在链接的格式前方加!即可，即![图片名](图片地址)，示例如下： 1![github头像](https://github.com/fluidicon.png) 效果如下： github头像 2.10 表格常常在文章中需要使用表格来罗列事项、比对事物，md支持了表格的简单形式，使用方式即使用|和-符号进行组合，示例如下： 1234| 表头一 | 表头二 || --------- | --------- || 表格内容一 | 表格内容二 || 表格内容三 | 表格内容四 | 注：对齐居中等不需要太注意 效果如下： 表头一 表头二 表格内容一 表格内容二 表格内容三 表格内容四 2.11 流程图markdown本身并不能直接转换流程图，但可以通过插件来完成，感兴趣的童鞋可以了解一下。不过笔者看来在markdown里写流程图还是比较麻烦的，简单的还好，复杂一点的就有点烧脑了。","categories":[{"name":"工作之余","slug":"工作之余","permalink":"http://hwb0011.github.io/categories/工作之余/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://hwb0011.github.io/tags/博客/"},{"name":"MarkDown","slug":"MarkDown","permalink":"http://hwb0011.github.io/tags/MarkDown/"}]},{"title":"利用GitHub和Hexo打造免费的个人博客","slug":"利用GitHub和Hexo打造免费的个人博客","date":"2019-06-01T03:30:30.000Z","updated":"2019-06-12T08:12:52.061Z","comments":true,"path":"2019/06/01/利用GitHub和Hexo打造免费的个人博客/","link":"","permalink":"http://hwb0011.github.io/2019/06/01/利用GitHub和Hexo打造免费的个人博客/","excerpt":"每个程序猿都需要一个个人博客，目前广泛出现在大家视野里的有CSDN、博客园、简书，但是他们却没有给用户一个专属的站点、一个好记的域名。你需要一个http://xxx.xxx.xxx/格式的网址，一个自由书写代码的站点，一个真正的个人博客。","text":"每个程序猿都需要一个个人博客，目前广泛出现在大家视野里的有CSDN、博客园、简书，但是他们却没有给用户一个专属的站点、一个好记的域名。你需要一个http://xxx.xxx.xxx/格式的网址，一个自由书写代码的站点，一个真正的个人博客。 1. GitHub提供的免费网站1.1 GitHub——面向开源及私有软件项目的托管平台GitHub官网 作为开源代码库以及版本控制系统，Github拥有超过900万开发者用户。随着越来越多的应用程序转移到了云上，Github已经成为了管理软件开发以及发现已有代码的首选方法。——来源：百度百科 GitHub是目前最大的代码仓库，如果你还没有GitHub账号的话，就赶紧去官网注册一个吧。 1.2 GitHub Pages——免费提供最基础的静态网站GitHub Pages官网 每个GitHub账户都可以免费开一个自己的静态网站（域名为 username.github.io），该网站由GitHub Pages提供，省去了域名、服务器、备案等一系列建站需要考虑的问题，只需要一份静态网站的代码即可。 首先你需要创建一个GitHub Pages repository。GitHub Pages repository跟普通的repository是一样的，唯一的区别就是他的名字必须叫做username.gihub.io。这个官方教程 GitHub Pages 写的十分好懂，按这个做完之后你就有了一个你的网址username.github.io！ 比如你的GitHub用户名是abc，那么你的repository名称和网址就是abc.gihub.io 现在离一个好网站只差一步了，就是把某个好网站的所有文件拷贝到你的库里面。GitHub官方建议你使用博客生成工具Jekyll 。GitHub在库的设置里面还提供Jekyll主题选择。 本文将介绍的是Hexo生成工具。 2. Hexo搭建的静态博客网站2.1 Hexo——快速、简洁且高效的博客框架Hexo官网 超快速度Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。支持 MarkdownHexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。一键部署只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。丰富的插件Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。 2.1.1 安装前提安装Hexo相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序： Node.js (Should be at least nodejs 6.9) Git 如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用npm即可完成Hexo的安装。 1$ npm install -g hexo-cli 如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。 Mac 用户您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。 2.1.2 安装 GitWindows：下载并安装 git. Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。Linux (Ubuntu, Debian)：sudo apt-get install git-core。 Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core。 Windows 用户由于众所周知的原因，从上面的链接下载git for windows最好挂上一个代理，否则下载速度十分缓慢。也可以参考这个页面，收录了存储于百度云的下载地址。 2.1.3 安装 Node.js安装 Node.js 的最佳方式是使用 nvm。 cURL: 1$ curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh Wget: 1$ wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh 安装完成后，重启终端并执行下列命令即可安装 Node.js。 1$ nvm install stable 或者您也可以下载 安装程序 来安装。 Windows 用户对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。另外，您也可以使用Git Bash，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。 2.1.4 安装 Hexo所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。 1$ npm install -g hexo-cli 2.1.5 建站安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 新建完成后，指定文件夹的目录如下： 12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 2.2 Hexo的自定义配置及博客主题2.2.1 _config.yml网站的配置信息，您可以在此配置大部分的参数。文件内各个配置参数均有详细备注，按规则填入所需即可。 2.2.2 package.json应用程序的信息，EJS、 Stylus 和 Markdown renderer 已默认安装，您可以自由移除。 1234567891011121314151617181920package.json&#123; &quot;name&quot;: &quot;hexo-site&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;private&quot;: true, &quot;hexo&quot;: &#123; &quot;version&quot;: &quot;&quot; &#125;, &quot;dependencies&quot;: &#123; &quot;hexo&quot;: &quot;^3.8.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;, &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;, &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;, &quot;hexo-server&quot;: &quot;^0.3.3&quot; &#125;&#125; 2.2.3 scaffolds模版文件夹，当您新建文章时，Hexo 会根据 scaffold 来建立文件。 Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。 2.2.4 source资源文件夹是存放用户资源的地方，除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。 2.2.5 themes主题文件夹，Hexo 会根据主题来生成静态页面。GitHub上存在许多第三方主题，根据主题的文档介绍引入Hexo项目中，会在主题文件夹下生成一个相应的文件夹，再修改_config.xml文件夹的theme属性即可。 本文将要介绍的是Indigo主题。 3. Indigo主题——Material Design 风格的Hexo主题Indigo in GitHub 仅支持 IE10+ 等现代浏览器。去 jQuery，更轻。相信现代浏览器的原生兼容性。使用 Less 作为 css 预处理器，需要安装 hexo-renderer-less。添加了英文字体支持 Roboto。添加了一些波纹效果。无前端依赖的分享实现。基于静态数据的站内搜索，无第三方侵入。支持文章打赏。 现有两个主题分支，我的博客中使用的是card分支卡片风格主题，master分支是旧版平铺式风格主题。 3.1 安装安装需确认你的 Hexo 版本在 3.0 以上，以及 Node 版本为 6.x 以上，在 Hexo 根目录，执行以下命令。 1git clone git@github.com:yscoder/hexo-theme-indigo.git themes/indigo 3.1.1 切换主题执行git branch显示所有本地分支，如果只存在一个分支，可以执行下面的命令获取另一分支的主题。 12345# 获取远程 card 分支，并切换$ git checkout -b card origin/card# 获取远程 master 分支，并切换$ git checkout -b master origin/master 此命令只需执行一次，之后使用git checkout [branch]命令在两个主题之间切换。 3.1.2 依赖安装还是在 Hexo 根目录，如果以下插件已安装过，无需再次安装。 Less 主题默认使用 less 作为 css 预处理工具。 1$ npm install hexo-renderer-less --save Feed 用于生成 rss。 1$ npm install hexo-generator-feed --save Json-content 用于生成静态站点数据，用作站内搜索的数据源。 1$ npm install hexo-generator-json-content --save QRCode 用于生成微信分享二维码。 可选，不安装时会请求jiathis Api生成二维码。 1$ npm install hexo-helper-qrcode --save 3.1.3 开启标签页1hexo new page tags 修改 hexo/source/tags/index.md 的元数据 123layout: tagscomments: false--- 3.1.4 开启分类页仅 card theme 支持。 1hexo new page categories 修改 hexo/source/categories/index.md 的元数据 123layout: categoriescomments: false--- 3.2 常见问题3.2.1 如何设置文章摘要在 Markdown 中加&lt;!-- more --&gt; 3.2.2 文章如何添加多个标签有两种多标签格式 1tags: [a, b, c] 或 1234tags: - a - b - c 3.2.3 修改 brand 图片（菜单上方背景图）替换 themes\\indigo\\source\\img\\brand.jpg，保持原文件名不变。 3.2.4 如何在文章中使用图标先到 fontawesome 找到你需要的图标名，比如：book，按以下格式使用： 1&lt;i class=&quot;icon icon-book&quot;&gt;&lt;/i&gt; 图标样式前缀均为 icon，此外还有 5 个图标大小调节类和 1 个间距类。 1234567891011121314&lt;!-- 1.3倍大小 --&gt;&lt;i class=&quot;icon icon-book icon-lg&quot;&gt;&lt;/i&gt;&lt;!-- 2倍大小 --&gt;&lt;i class=&quot;icon icon-book icon-2x&quot;&gt;&lt;/i&gt;&lt;!-- 3倍大小 --&gt;&lt;i class=&quot;icon icon-book icon-3x&quot;&gt;&lt;/i&gt;&lt;!-- 4倍大小 --&gt;&lt;i class=&quot;icon icon-book icon-4x&quot;&gt;&lt;/i&gt;&lt;!-- 5倍大小 --&gt;&lt;i class=&quot;icon icon-book icon-5x&quot;&gt;&lt;/i&gt;&lt;!-- 5px右边距 --&gt;&lt;i class=&quot;icon icon-book icon-pr&quot;&gt;&lt;/i&gt;&lt;!-- 5px左边距 --&gt;&lt;i class=&quot;icon icon-book icon-pl&quot;&gt;&lt;/i&gt; 3.2.5 个别图标无法显示如果你的浏览器安装了 ADBlock，它会屏蔽 SNS 相关的内容，比如：Github。 解决办法：可配置 ADBlock 不在你的站点运行。 3.2.6 生成站点后没有样式安装less 3.2.7 自行修改样式线上不生效因为主题默认引用 cdn 样式，只有主题更新时，cdn 中的样式才会变化。 如果想使用自己修改的样式，需要把修改配置中的cdn: false。这样就不在引用cdn资源，使用本地资源了。 3.2.8 更改样式后网站没有生效确认非缓存问题后，执行 hexo clean 再进行生成上传。 建议每次提交时都执行一次hexo clean，可以在项目目录下创建一个shell脚本，执行命令hexo clean &amp;&amp; hexo generate --deploy，运行后即可保证每次修改都能生效。 3.2.9 更改站点配色编辑 themes\\indigo\\source\\css_partial\\variable.less，更改对应的颜色变量。 配色参考：Material Design Color Palette Generator 注意：使用自定义配色时需把主题配置中的 cdn 关闭，cdn: false。 3.2.10 添加404页面在 hexo/source 目录内新建 404.html。 设置元数据信息，如果不想套用主题布局可设置 layout 为 false。 123layout: false title: &quot;My Blog Name | 404&quot;--- 3.2.11 在博客中使用 Emoji参考 Can i use emoji in mypage? 3.3 自定义页面主题 Card 分支为自定义页面提供了定制化模块支持，特此简单介绍。 3.3.1 创建自定义页面1hexo new page pageName 执行命令后会在你的 Hexo 根目录 source/ 目录下生成一个与你刚才输入的 pageName 一样的文件夹，里面只有一个 index.md。 3.3.2 页面配置123456layout: page # 必须title: pageTitle # 必须，页面名称description: 用户自定义页面功能演示 # 页面二级标题，描述性文字comments: false # 禁用评论，可选，默认开启reward: false # 禁用打赏，可选，默认开启---- 3.3.3 模块和内容输入自定义页面中，image、blockquote、pre 等将被赋予特殊的样式。此外，提供了@moduleName{ ... }格式的标记用于包裹内容，赋予样式。","categories":[{"name":"工作之余","slug":"工作之余","permalink":"http://hwb0011.github.io/categories/工作之余/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://hwb0011.github.io/tags/前端/"},{"name":"hexo","slug":"hexo","permalink":"http://hwb0011.github.io/tags/hexo/"},{"name":"博客","slug":"博客","permalink":"http://hwb0011.github.io/tags/博客/"}]}]}