<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>黄文镔的博客</title>
  
  <subtitle>完美运用所学的一切</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hwb0011.github.io/"/>
  <updated>2020-02-21T03:09:40.084Z</updated>
  <id>http://hwb0011.github.io/</id>
  
  <author>
    <name>黄文镔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kotlin征途（八）：委托</title>
    <link href="http://hwb0011.github.io/2019/12/15/Kotlin%E5%BE%81%E9%80%94%EF%BC%88%E5%85%AB%EF%BC%89%EF%BC%9A%E5%A7%94%E6%89%98/"/>
    <id>http://hwb0011.github.io/2019/12/15/Kotlin征途（八）：委托/</id>
    <published>2019-12-15T07:55:08.000Z</published>
    <updated>2020-02-21T03:09:40.084Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文将伴随大家进入Kotlin语言的正式学习生涯中，希望大家不要半途而废哦！笔者将Kotlin用于Android开发中，因此将从Android开发的视角叙述相关内容，同时将与Java语言有所联系。  </p></blockquote><a id="more"></a><h1 id="1-由委托实现"><a href="#1-由委托实现" class="headerlink" title="1. 由委托实现"></a>1. 由委托实现</h1><h2 id="1-1-简单用法"><a href="#1-1-简单用法" class="headerlink" title="1.1 简单用法"></a>1.1 简单用法</h2><p>委托模式已经证明是实现继承的一个很好的替代方式， 而 Kotlin 可以零样板代码地原生支持它。 <code>Derived</code> 类可以通过将其所有公有成员都委托给指定对象来实现一个接口<code>Base</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">class <span class="title">BaseImpl</span><span class="params">(val x: Int)</span> : Base </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">print</span><span class="params">()</span> </span>&#123; print(x) &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Derived(b: Base) : Base by b</span><br><span class="line"></span><br><span class="line"><span class="function">fun <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    val b = BaseImpl(<span class="number">10</span>)</span><br><span class="line">    Derived(b).print()  <span class="comment">// 输出  10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Derived</code> 的超类型列表中的 <code>by b</code> 子句表示 <code>b</code> 将会在 <code>Derived</code> 中内部存储， 并且编译器将生成转发给 <code>b</code> 的所有 <code>Base</code> 的方法。</p><h2 id="1-2-覆盖由委托实现的接口成员"><a href="#1-2-覆盖由委托实现的接口成员" class="headerlink" title="1.2 覆盖由委托实现的接口成员"></a>1.2 覆盖由委托实现的接口成员</h2><p>覆盖符合预期：编译器会使用 <code>override</code> 覆盖的实现而不是委托对象中的。如果将 <code>override fun printMessage() { print(&quot;abc&quot;) }</code> 添加到 <code>Derived</code>，那么当调用 <code>printMessage</code> 时程序会输出<code>abc</code>而不是<code>10</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">printMessage</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    fun <span class="title">printMessageLine</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">class <span class="title">BaseImpl</span><span class="params">(val x: Int)</span> : Base </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">printMessage</span><span class="params">()</span> </span>&#123; print(x) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">printMessageLine</span><span class="params">()</span> </span>&#123; println(x) &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Derived(b: Base) : Base by b &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">printMessage</span><span class="params">()</span> </span>&#123; print(<span class="string">"abc"</span>) &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">fun <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    val b = BaseImpl(<span class="number">10</span>)</span><br><span class="line">    Derived(b).printMessage()      <span class="comment">// 输出  abc</span></span><br><span class="line">    Derived(b).printMessageLine()  <span class="comment">// 输出  10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但请注意，以这种方式重写的成员不会在委托对象的成员中调用 ，委托对象的成员只能访问其自身对接口成员实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    val message: String</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">class <span class="title">BaseImpl</span><span class="params">(val x: Int)</span> : Base </span>&#123;</span><br><span class="line"></span><br><span class="line">    override val message = <span class="string">"BaseImpl: x = $x"</span></span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">print</span><span class="params">()</span> </span>&#123; println(message) &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Derived(b: Base) : Base by b &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 b 的 `print` 实现中不会访问到这个属性</span></span><br><span class="line">    override val message = <span class="string">"Message of Derived"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">fun <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    val b = BaseImpl(<span class="number">10</span>)</span><br><span class="line">    val derived = Derived(b)</span><br><span class="line">    derived.print()             <span class="comment">// 输出  BaseImpl: x = 10</span></span><br><span class="line">    println(derived.message)    <span class="comment">// 输出  Message of Derived</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-委托属性"><a href="#2-委托属性" class="headerlink" title="2. 委托属性"></a>2. 委托属性</h1><p>有一些常见的属性类型，虽然我们可以在每次需要的时候手动实现它们， 但是如果能够为大家把他们只实现一次并放入一个库会更好。例如包括：</p><ul><li>延迟属性（<code>lazy properties</code>）: 其值只在首次访问时计算；</li><li>可观察属性（<code>observable properties</code>）: 监听器会收到有关此属性变更的通知；</li><li>把多个属性储存在一个映射（<code>map</code>）中，而不是每个存在单独的字段中。</li></ul><p>为了涵盖这些（以及其他）情况，Kotlin 支持 委托属性:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p: <span class="function">String by <span class="title">Delegate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>语法是： <code>val/var &lt;属性名&gt;: &lt;类型&gt; by &lt;表达式&gt;</code>。在 <code>by</code> 后面的表达式是该 <code>委托</code>， 因为属性对应的 <code>get()</code>与 <code>set()</code>会被委托给它的 <code>getValue()</code> 与<code>setValue()</code> 方法。 属性的委托不必实现任何的接口，但是需要提供一个 <code>getValue()</code> 函数（与 <code>setValue()</code>——对于<code>var</code> 属性）。 例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlin.reflect.KProperty</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Delegate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">operator fun <span class="title">getValue</span><span class="params">(thisRef: Any?, property: KProperty&lt;*&gt;)</span>: String </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"$thisRef, thank you for delegating '$&#123;property.name&#125;' to me!"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">operator fun <span class="title">setValue</span><span class="params">(thisRef: Any?, property: KProperty&lt;*&gt;, value: String)</span> </span>&#123;</span><br><span class="line">        println(<span class="string">"$value has been assigned to '$&#123;property.name&#125;' in $thisRef."</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们从委托到一个 <code>Delegate</code> 实例的 <code>p</code> 读取时，将调用 <code>Delegate</code> 中的 <code>getValue()</code> 函数， 所以它第一个参数是读出 <code>p</code> 的对象、第二个参数保存了对 <code>p</code> 自身的描述 （例如你可以取它的名字)。 例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val e = Example()</span><br><span class="line"></span><br><span class="line">println(e.p)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Example@33a17727, thank you for delegating ‘p’ to me!</span><br></pre></td></tr></table></figure><p>类似地，当我们给 <code>p</code> 赋值时，将调用 <code>setValue()</code> 函数。前两个参数相同，第三个参数保存将要被赋予的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e.p = <span class="string">"NEW"</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NEW has been assigned to ‘p’ in Example@33a17727.</span><br></pre></td></tr></table></figure><p>委托对象的要求规范可以在下文找到。</p><blockquote><p>请注意，自 <code>Kotlin 1.1</code> 起你可以在函数或代码块中声明一个委托属性，因此它不一定是类的成员。 你可以在下文找到其示例。</p></blockquote><h2 id="2-1-标准委托"><a href="#2-1-标准委托" class="headerlink" title="2.1 标准委托"></a>2.1 标准委托</h2><p>Kotlin 标准库为几种有用的委托提供了工厂方法。</p><h3 id="2-1-1-延迟属性-Lazy"><a href="#2-1-1-延迟属性-Lazy" class="headerlink" title="2.1.1 延迟属性 Lazy"></a>2.1.1 延迟属性 Lazy</h3><p><code>lazy()</code> 是接受一个 <code>lambda</code> 并返回一个 <code>Lazy &lt;T&gt;</code> 实例的函数，返回的实例可以作为实现延迟属性的委托： 第一次调用 <code>get()</code> 会执行已传递给 <code>lazy()</code> 的 <code>lambda</code> 表达式并记录结果， 后续调用 <code>get()</code> 只是返回记录的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">val lazyValue: String by lazy &#123;</span><br><span class="line">    println(<span class="string">"computed!"</span>)</span><br><span class="line">    <span class="string">"Hello"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">fun <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    println(lazyValue)</span><br><span class="line">    println(lazyValue)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，对于 <code>lazy</code> 属性的求值是同步锁的（<code>synchronized</code>）：该值只在一个线程中计算，并且所有线程会看到相同的值。如果初始化委托的同步锁不是必需的，这样多个线程可以同时执行，那么将 <code>LazyThreadSafetyMode.PUBLICATION</code> 作为参数传递给 <code>lazy()</code> 函数。 而如果你确定初始化将总是发生在与属性使用位于相同的线程，那么可以使用 <code>LazyThreadSafetyMode.NONE</code> 模式：它不会有任何线程安全的保证以及相关的开销。</p><h3 id="2-1-2-可观察属性-Observable"><a href="#2-1-2-可观察属性-Observable" class="headerlink" title="2.1.2 可观察属性 Observable"></a>2.1.2 可观察属性 Observable</h3><p><code>Delegates.observable()</code> 接受两个参数：初始值与修改时处理程序（<code>handler</code>）。 每当我们给属性赋值时会调用该处理程序（在赋值后执行）。它有三个参数：被赋值的属性、旧值与新值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlin.properties.Delegates</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name: String by Delegates.observable(<span class="string">"&lt;no name&gt;"</span>) &#123;</span><br><span class="line">        prop, old, <span class="keyword">new</span> -&gt;</span><br><span class="line">        println(<span class="string">"$old -&gt; $new"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">fun <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    val user = User()</span><br><span class="line">    user.name = <span class="string">"first"</span></span><br><span class="line">    user.name = <span class="string">"second"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你想截获赋值并“否决”它们，那么使用 <code>vetoable()</code> 取代 <code>observable()</code>。 在属性被赋新值生效之前会调用传递给 <code>vetoable</code> 的处理程序。</p><h3 id="2-2-把属性储存在映射中"><a href="#2-2-把属性储存在映射中" class="headerlink" title="2.2 把属性储存在映射中"></a>2.2 把属性储存在映射中</h3><p>一个常见的用例是在一个映射（<code>map</code>）里存储属性的值。 这经常出现在像解析 <code>JSON</code> 或者做其他“动态”事情的应用中。 在这种情况下，你可以使用映射实例自身作为委托来实现委托属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class User(val map: Map&lt;String, Any?&gt;) &#123;</span><br><span class="line"></span><br><span class="line">    val name: String by map</span><br><span class="line"></span><br><span class="line">    val age: Int     by map</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，构造函数接受一个映射参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val user = User(mapOf(</span><br><span class="line">    <span class="string">"name"</span> to <span class="string">"John Doe"</span>,</span><br><span class="line">    <span class="string">"age"</span>  to <span class="number">25</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure><p>委托属性会从这个映射中取值（通过字符串键——属性的名称）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">println(user.name) <span class="comment">// Prints "John Doe"</span></span><br><span class="line">println(user.age)  <span class="comment">// Prints 25</span></span><br></pre></td></tr></table></figure><p>这也适用于 <code>var</code> 属性，如果把只读的 <code>Map</code> 换成 <code>MutableMap</code> 的话：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class MutableUser(val map: MutableMap&lt;String, Any?&gt;) &#123;</span><br><span class="line">    <span class="keyword">var</span> name: String by map</span><br><span class="line">    <span class="keyword">var</span> age: Int     by map</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-局部委托属性（自-1-1-起）"><a href="#2-3-局部委托属性（自-1-1-起）" class="headerlink" title="2.3 局部委托属性（自 1.1 起）"></a>2.3 局部委托属性（自 1.1 起）</h2><p>你可以将局部变量声明为委托属性。 例如，你可以使一个局部变量惰性初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">example</span><span class="params">(computeFoo: ()</span> -&gt; Foo) </span>&#123;</span><br><span class="line">    <span class="function">val memoizedFoo by <span class="title">lazy</span><span class="params">(computeFoo)</span></span></span><br><span class="line"><span class="function">    <span class="title">if</span> <span class="params">(someCondition &amp;&amp; memoizedFoo.isValid()</span>) </span>&#123;</span><br><span class="line">        memoizedFoo.doSomething()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>memoizedFoo</code> 变量只会在第一次访问时计算。 如果 <code>someCondition</code> 失败，那么该变量根本不会计算。</p><h2 id="2-4-属性委托要求"><a href="#2-4-属性委托要求" class="headerlink" title="2.4 属性委托要求"></a>2.4 属性委托要求</h2><p>这里我们总结了委托对象的要求。</p><p>对于一个只读属性（即 <code>val</code> 声明的），委托必须提供一个名为 <code>getValue</code> 的函数，该函数接受以下参数：</p><ul><li><code>thisRef</code> —— 必须与 属性所有者 类型（对于扩展属性——指被扩展的类型）相同或者是它的超类型；</li><li><code>property</code> —— 必须是类型 <code>KProperty&lt;*&gt;</code> 或其超类型。</li></ul><p>这个函数必须返回与属性相同的类型（或其子类型）。</p><p>对于一个可变属性（即 <code>var</code> 声明的），委托必须额外提供一个名为 <code>setValue</code>的函数，该函数接受以下参数：</p><ul><li><code>thisRef</code> —— 同 <code>getValue()</code>；</li><li><code>property</code> —— 同 <code>getValue()</code>；</li><li><code>new value</code> —— 必须与属性同类型或者是它的子类型。</li></ul><p><code>getValue()</code> 与 <code>setValue()</code> 函数可以通过委托类的成员函数提供或者由扩展函数提供。 当你需要委托属性到原本未提供的这些函数的对象时后者会更便利。 两函数都需要用 <code>operator</code> 关键字来进行标记。</p><p>委托类可以实现包含所需<code>operator</code>方法的 <code>ReadOnlyProperty</code> 或 <code>ReadWriteProperty</code> 接口之一。 这俩接口是在 Kotlin 标准库中声明的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ReadOnlyProperty</span>&lt;<span class="title">in</span> <span class="title">R</span>, <span class="title">out</span> <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">operator fun <span class="title">getValue</span><span class="params">(thisRef: R, property: KProperty&lt;*&gt;)</span>: T</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">interface ReadWriteProperty&lt;in R, T&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">operator fun <span class="title">getValue</span><span class="params">(thisRef: R, property: KProperty&lt;*&gt;)</span>: T</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    operator fun <span class="title">setValue</span><span class="params">(thisRef: R, property: KProperty&lt;*&gt;, value: T)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-1-翻译规则"><a href="#2-4-1-翻译规则" class="headerlink" title="2.4.1 翻译规则"></a>2.4.1 翻译规则</h3><p>在每个委托属性的实现的背后，Kotlin 编译器都会生成辅助属性并委托给它。 例如，对于属性 <code>prop</code>，生成隐藏属性 <code>prop$delegate</code>，而访问器的代码只是简单地委托给这个附加属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> prop: <span class="function">Type by <span class="title">MyDelegate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 这段是由编译器生成的相应代码：</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">class C </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> val prop$delegate = MyDelegate()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> prop: Type</span><br><span class="line">        get() = prop$delegate.getValue(<span class="keyword">this</span>, <span class="keyword">this</span>::prop)</span><br><span class="line">        set(value: Type) = prop$delegate.setValue(<span class="keyword">this</span>, <span class="keyword">this</span>::prop, value)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kotlin 编译器在参数中提供了关于 <code>prop</code> 的所有必要信息：第一个参数 <code>this</code> 引用到外部类 <code>C</code> 的实例而 <code>this::prop</code> 是 <code>KProperty</code> 类型的反射对象，该对象描述 <code>prop</code> 自身。</p><blockquote><p>请注意，直接在代码中引用绑定的可调用引用的语法 <code>this::prop</code> 自 <code>Kotlin 1.1</code> 起才可用。</p></blockquote><h3 id="2-4-2-提供委托（自-1-1-起）"><a href="#2-4-2-提供委托（自-1-1-起）" class="headerlink" title="2.4.2 提供委托（自 1.1 起）"></a>2.4.2 提供委托（自 1.1 起）</h3><p>通过定义 <code>provideDelegate</code> 操作符，可以扩展创建属性实现所委托对象的逻辑。 如果 <code>by</code> 右侧所使用的对象将 <code>provideDelegate</code> 定义为成员或扩展函数，那么会调用该函数来创建属性委托实例。</p><p><code>provideDelegate</code> 的一个可能的使用场景是在创建属性时（而不仅在其 <code>getter</code> 或 setter 中）检测属性一致性。</p><p>例如，如果要在绑定之前检测属性名称，可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class ResourceDelegate&lt;T&gt; : ReadOnlyProperty&lt;MyUI, T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">getValue</span><span class="params">(thisRef: MyUI, property: KProperty&lt;*&gt;)</span>: T </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">class ResourceLoader&lt;T&gt;(id: ResourceID&lt;T&gt;) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">operator fun <span class="title">provideDelegate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            thisRef: MyUI,</span></span></span><br><span class="line"><span class="function"><span class="params">            prop: KProperty&lt;*&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span>: ReadOnlyProperty&lt;MyUI, T&gt; </span>&#123;</span><br><span class="line">        checkProperty(thisRef, prop.name)</span><br><span class="line">        <span class="comment">// 创建委托</span></span><br><span class="line">        <span class="keyword">return</span> ResourceDelegate()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> fun <span class="title">checkProperty</span><span class="params">(thisRef: MyUI, name: String)</span> </span>&#123; …… &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    fun &lt;T&gt; bindResource(id: ResourceID&lt;T&gt;): ResourceLoader&lt;T&gt; &#123; …… &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">val image by <span class="title">bindResource</span><span class="params">(ResourceID.image_id)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    val text by <span class="title">bindResource</span><span class="params">(ResourceID.text_id)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p><code>provideDelegate</code> 的参数与 <code>getValue</code> 相同：</p><ul><li><code>thisRef</code> —— 必须与 属性所有者 类型（对于扩展属性——指被扩展的类型）相同或者是它的超类型；</li><li><code>property</code> —— 必须是类型 <code>KProperty&lt;*&gt;</code> 或其超类型。</li></ul><p>在创建 <code>MyUI</code> 实例期间，为每个属性调用 <code>provideDelegate</code> 方法，并立即执行必要的验证。</p><p>如果没有这种拦截属性与其委托之间的绑定的能力，为了实现相同的功能， 你必须显式传递属性名，这不是很方便：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测属性名称而不使用“provideDelegate”功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUI</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">val image by <span class="title">bindResource</span><span class="params">(ResourceID.image_id, <span class="string">"image"</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    val text by <span class="title">bindResource</span><span class="params">(ResourceID.text_id, <span class="string">"text"</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">fun &lt;T&gt; MyUI.<span class="title">bindResource</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        id: ResourceID&lt;T&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">        propertyName: String</span></span></span><br><span class="line"><span class="function"><span class="params">)</span>: ReadOnlyProperty&lt;MyUI, T&gt; </span>&#123;</span><br><span class="line">   checkProperty(<span class="keyword">this</span>, propertyName)</span><br><span class="line">   <span class="comment">// 创建委托</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在生成的代码中，会调用 <code>provideDelegate</code> 方法来初始化辅助的 <code>prop$delegate</code> 属性。 比较对于属性声明 <code>val prop: Type by MyDelegate()</code> 生成的代码与上面（当 <code>provideDelegate</code> 方法不存在时）生成的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> prop: <span class="function">Type by <span class="title">MyDelegate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 这段代码是当“provideDelegate”功能可用时由编译器生成的代码：</span></span></span><br><span class="line"><span class="function">class C </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用“provideDelegate”来创建额外的“delegate”属性</span></span><br><span class="line">    <span class="keyword">private</span> val prop$delegate = MyDelegate().provideDelegate(<span class="keyword">this</span>, <span class="keyword">this</span>::prop)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> prop: Type</span><br><span class="line">        get() = prop$delegate.getValue(<span class="keyword">this</span>, <span class="keyword">this</span>::prop)</span><br><span class="line">        set(value: Type) = prop$delegate.setValue(<span class="keyword">this</span>, <span class="keyword">this</span>::prop, value)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>请注意，<code>provideDelegate</code> 方法只影响辅助属性的创建，并不会影响为 <code>getter</code> 或 <code>setter</code> 生成的代码。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将伴随大家进入Kotlin语言的正式学习生涯中，希望大家不要半途而废哦！笔者将Kotlin用于Android开发中，因此将从Android开发的视角叙述相关内容，同时将与Java语言有所联系。  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Kotlin征途" scheme="http://hwb0011.github.io/categories/Kotlin%E5%BE%81%E9%80%94/"/>
    
    
      <category term="Android" scheme="http://hwb0011.github.io/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://hwb0011.github.io/tags/Kotlin/"/>
    
      <category term="编程" scheme="http://hwb0011.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin征途（七）：特殊的类</title>
    <link href="http://hwb0011.github.io/2019/12/01/Kotlin%E5%BE%81%E9%80%94%EF%BC%88%E4%B8%83%EF%BC%89%EF%BC%9A%E7%89%B9%E6%AE%8A%E7%9A%84%E7%B1%BB/"/>
    <id>http://hwb0011.github.io/2019/12/01/Kotlin征途（七）：特殊的类/</id>
    <published>2019-12-01T12:29:47.000Z</published>
    <updated>2020-02-21T03:06:54.216Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文将伴随大家进入Kotlin语言的正式学习生涯中，希望大家不要半途而废哦！笔者将Kotlin用于Android开发中，因此将从Android开发的视角叙述相关内容，同时将与Java语言有所联系。  </p></blockquote><a id="more"></a><h1 id="1-数据类"><a href="#1-数据类" class="headerlink" title="1. 数据类"></a>1. 数据类</h1><h2 id="1-1-数据类的定义"><a href="#1-1-数据类的定义" class="headerlink" title="1.1 数据类的定义"></a>1.1 数据类的定义</h2><p>我们经常创建一些只保存数据的类。 在这些类中，一些标准函数往往是从数据机械推导而来的。在 Kotlin 中，这叫做<code>数据类</code>并标记为<code>data</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">data class <span class="title">User</span><span class="params">(val name: String, val age: Int)</span></span></span><br></pre></td></tr></table></figure><p>编译器自动从主构造函数中声明的所有属性导出以下成员：</p><ul><li><code>equals()</code>/<code>hashCode()</code> 对；</li><li><code>toString()</code> 格式是 <code>User(name=John, age=42)</code>；</li><li><code>componentN()</code> 函数 按声明顺序对应于所有属性；</li><li><code>copy()</code> 函数（见下文）。</li></ul><p>为了确保生成的代码的一致性以及有意义的行为，数据类必须满足以下要求：</p><ul><li>主构造函数需要至少有一个参数；</li><li>主构造函数的所有参数需要标记为 <code>val</code> 或 <code>var</code>；</li><li>数据类不能是抽象、开放、密封或者内部的；</li><li>（在1.1之前）数据类只能实现接口。</li></ul><p>此外，成员生成遵循关于成员继承的这些规则：</p><ul><li>如果在数据类体中有显式实现<code>equals()</code>、 <code>hashCode()</code> 或者<code>toString()</code>，或者这些函数在父类中有 <code>final</code> 实现，那么不会生成这些函数，而会使用现有函数；</li><li>如果超类型具有 <code>open</code> 的 <code>componentN()</code> 函数并且返回兼容的类型， 那么会为数据类生成相应的函数，并覆盖超类的实现。如果超类型的这些函数由于签名不兼容或者是 <code>final</code> 而导致无法覆盖，那么会报错；</li><li>从一个已具 <code>copy(……)</code> 函数且签名匹配的类型派生一个数据类在 <code>Kotlin 1.2</code> 中已弃用，并且在 <code>Kotlin 1.3</code> 中已禁用。</li><li>不允许为 <code>componentN()</code> 以及 <code>copy()</code> 函数提供显式实现。</li></ul><blockquote><p>自 1.1 起，数据类可以扩展其他类。</p></blockquote><p>在 <code>JVM</code> 中，如果生成的类需要含有一个无参的构造函数，则所有的属性必须指定默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">data class <span class="title">User</span><span class="params">(val name: String = <span class="string">""</span>, val age: Int = <span class="number">0</span>)</span></span></span><br></pre></td></tr></table></figure><h2 id="1-2-在类体中声明的属性"><a href="#1-2-在类体中声明的属性" class="headerlink" title="1.2 在类体中声明的属性"></a>1.2 在类体中声明的属性</h2><p>请注意，对于那些自动生成的函数，编译器只使用在主构造函数内部定义的属性。如需在生成的实现中排除一个属性，请将其声明在类体中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">data class <span class="title">Person</span><span class="params">(val name: String)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> age: Int = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>toString()</code>、<code>equals()</code>、 <code>hashCode()</code> 以及 <code>copy()</code> 的实现中只会用到 <code>name</code> 属性，并且只有一个 <code>component</code> 函数 <code>component1()</code>。虽然两个<code>Person</code> 对象可以有不同的年龄，但它们会视为相等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val person1 = Person(<span class="string">"John"</span>)</span><br><span class="line">val person2 = Person(<span class="string">"John"</span>)</span><br><span class="line">person1.age = <span class="number">10</span></span><br><span class="line">person2.age = <span class="number">20</span></span><br></pre></td></tr></table></figure><h2 id="1-3-复制"><a href="#1-3-复制" class="headerlink" title="1.3 复制"></a>1.3 复制</h2><p>在很多情况下，我们需要复制一个对象改变它的一些属性，但其余部分保持不变。<code>copy()</code> 函数就是为此而生成。对于上文的<code>User</code>类，其实现会类似下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">copy</span><span class="params">(name: String = <span class="keyword">this</span>.name, age: Int = <span class="keyword">this</span>.age)</span> </span>= User(name, age)</span><br></pre></td></tr></table></figure><p>这让我们可以写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val jack = User(name = <span class="string">"Jack"</span>, age = <span class="number">1</span>)</span><br><span class="line">val olderJack = jack.copy(age = <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="1-4-数据类与解构声明"><a href="#1-4-数据类与解构声明" class="headerlink" title="1.4 数据类与解构声明"></a>1.4 数据类与解构声明</h2><p>为数据类生成的<code>Component</code>函数 使它们可在解构声明中使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">val jane = User(<span class="string">"Jane"</span>, <span class="number">35</span>)</span><br><span class="line">val (name, age) = jane</span><br><span class="line">println(<span class="string">"$name, $age years of age"</span>) <span class="comment">// 输出 "Jane, 35 years of age"</span></span><br></pre></td></tr></table></figure><h1 id="2-密封类"><a href="#2-密封类" class="headerlink" title="2. 密封类"></a>2. 密封类</h1><p>密封类用来表示受限的类继承结构：当一个值为有限几种的类型、而不能有任何其他类型时。在某种意义上，他们是枚举类的扩展：枚举类型的值集合也是受限的，但每个枚举常量只存在一个实例，而密封类的一个子类可以有可包含状态的多个实例。</p><p>要声明一个密封类，需要在类名前面添加<code>sealed</code>修饰符。虽然密封类也可以有子类，但是所有子类都必须在与密封类自身相同的文件中声明。（在 <code>Kotlin 1.1</code> 之前， 该规则更加严格：子类必须嵌套在密封类声明的内部）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sealed <span class="class"><span class="keyword">class</span> <span class="title">Expr</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line">data class Const(val number: Double) : Expr()</span><br><span class="line"></span><br><span class="line"><span class="function">data class <span class="title">Sum</span><span class="params">(val e1: Expr, val e2: Expr)</span> : <span class="title">Expr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">object NotANumber : <span class="title">Expr</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>（上文示例使用了 <code>Kotlin 1.1</code> 的一个额外的新功能：数据类扩展包括密封类在内的其他类的可能性。 ）</p><p>一个密封类是自身抽象的，它不能直接实例化并可以有抽象（<code>abstract</code>）成员。</p><p>密封类不允许有非<code>private</code>构造函数（其构造函数默认为<code>private</code>）。</p><p>请注意，扩展密封类子类的类（<code>间接继承者</code>）可以放在任何位置，而无需在同一个文件中。</p><p>使用密封类的关键好处在于使用<code>when</code>表达式 的时候，如果能够验证语句覆盖了所有情况，就不需要为该语句再添加一个<code>else</code>子句了。当然，这只有当你用<code>when</code>作为表达式（使用结果）而不是作为语句时才有用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">eval</span><span class="params">(expr: Expr)</span>: Double </span>= when(expr) &#123;</span><br><span class="line">    is Const -&gt; expr.number</span><br><span class="line">    is Sum -&gt; eval(expr.e1) + eval(expr.e2)</span><br><span class="line">    NotANumber -&gt; Double.NaN</span><br><span class="line">    <span class="comment">// 不再需要 `else` 子句，因为我们已经覆盖了所有的情况</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-泛型"><a href="#3-泛型" class="headerlink" title="3. 泛型"></a>3. 泛型</h2><p>与 Java 类似，Kotlin 中的类也可以有类型参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Box&lt;T&gt;(t: T) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> value = t</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般来说，要创建这样类的实例，我们需要提供类型参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val box: Box&lt;Int&gt; = Box&lt;Int&gt;(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>但是如果类型参数可以推断出来，例如从构造函数的参数或者从其他途径，允许省略类型参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val box = Box(<span class="number">1</span>) <span class="comment">// 1 具有类型 Int，所以编译器知道我们说的是 Box&lt;Int&gt;。</span></span><br></pre></td></tr></table></figure><h2 id="3-1-声明处型变"><a href="#3-1-声明处型变" class="headerlink" title="3.1  声明处型变"></a>3.1  声明处型变</h2><p>我们可以标注 <code>Source</code> 的类型参数 <code>T</code> 来确保它仅从<code>Source&lt;T&gt;</code>成员中返回（生产），并从不被消费。 为此，我们提供<code>out</code>修饰符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Source</span>&lt;<span class="title">out</span> <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">nextT</span><span class="params">()</span>: T</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">fun <span class="title">demo</span><span class="params">(strs: Source&lt;String&gt;)</span> </span>&#123;</span><br><span class="line">    val objects: Source&lt;Any&gt; = strs <span class="comment">// 这个没问题，因为 T 是一个 out-参数，String是Any的子类型</span></span><br><span class="line">    val outNextT = objects.nextT()  <span class="comment">// 此时的调用相当于将String类型强转为Any类型，成功运行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般原则是：当一个类<code>C</code>的类型参数 <code>T</code>被声明为 <code>out</code>时，它就只能出现在<code>C</code> 的成员的输出位置，但回报是 <code>C&lt;Base&gt;</code> 可以安全地作为 <code>C&lt;Derived&gt;</code>的超类。</p><p>简而言之，他们说类 <code>C</code> 是在参数 <code>T</code> 上是协变的，或者说 <code>T</code> 是一个协变的类型参数。 你可以认为 <code>C</code> 是 <code>T</code> 的生产者，而不是 <code>T</code> 的消费者。</p><p><code>out</code>修饰符称为型变注解，并且由于它在类型参数声明处提供，所以我们称之为声明处型变。</p><p>另外除了 <code>out</code>，Kotlin 又补充了一个型变注释：<code>in</code>。它使得一个类型参数逆变：只可以被消费而不可以被生产。逆变类型的一个很好的例子是 <code>Comparable</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">in</span> <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">operator fun <span class="title">compareTo</span><span class="params">(other: T)</span>: Int</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">fun <span class="title">demo</span><span class="params">(x: Comparable&lt;Number&gt;)</span> </span>&#123;</span><br><span class="line">    x.compareTo(<span class="number">1.0</span>) <span class="comment">// 1.0 拥有类型 Double，它是 Number 的子类型</span></span><br><span class="line">    <span class="comment">// 因此，我们可以将 x 赋给类型为 Comparable &lt;Double&gt; 的变量</span></span><br><span class="line">    val y: Comparable&lt;Double&gt; = x <span class="comment">// OK！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们相信 <code>in</code> 和<code>out</code>两词是自解释的（因为它们已经在 C# 中成功使用很长时间了）， 因此上面提到的助记符不是真正需要的。</p><h2 id="3-2-使用处型变"><a href="#3-2-使用处型变" class="headerlink" title="3.2 使用处型变"></a>3.2 使用处型变</h2><h2 id="3-2-1-类型投影"><a href="#3-2-1-类型投影" class="headerlink" title="3.2.1 类型投影"></a>3.2.1 类型投影</h2><p>将类型参数 <code>T</code> 声明为 <code>out</code> 非常方便，并且能避免使用处子类型化的麻烦，但是有些类实际上不能限制为只返回 <code>T</code>！ 一个很好的例子是 <code>Array</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Array&lt;T&gt;(val size: Int) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">get</span><span class="params">(index: Int)</span>: T </span>&#123; …… &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">set</span><span class="params">(index: Int, value: T)</span> </span>&#123; …… &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类在 <code>T</code> 上既不能是协变的也不能是逆变的。这造成了一些不灵活性。考虑下述函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">copy</span><span class="params">(from: Array&lt;Any&gt;, to: Array&lt;Any&gt;)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span>(from.size == to.size)</span><br><span class="line">    <span class="keyword">for</span> (i in from.indices)</span><br><span class="line">        to[i] = from[i]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数应该将项目从一个数组复制到另一个数组。让我们尝试在实践中应用它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val ints: Array&lt;Int&gt; = arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">val any = Array&lt;Any&gt;(<span class="number">3</span>) &#123; <span class="string">""</span> &#125;</span><br><span class="line">copy(ints, any)</span><br><span class="line"><span class="comment">// 其类型为 Array&lt;Int&gt; 但此处期望 Array&lt;Any&gt;</span></span><br></pre></td></tr></table></figure><p>这里我们遇到同样熟悉的问题：<code>Array &lt;T&gt;</code> 在<code>T</code> 上是不型变的，因此 <code>Array &lt;Int&gt;</code> 和 <code>Array &lt;Any&gt;</code> 都不是另一个的子类型。为什么？ 再次重复，因为 <code>copy</code> 可能做坏事，也就是说，例如它可能尝试写一个 <code>String</code>到<code>from</code>， 并且如果我们实际上传递一个 <code>Int</code>的数组，一段时间后将会抛出一个 <code>ClassCastException</code> 异常。</p><p>那么，我们唯一要确保的是 <code>copy()</code> 不会做任何坏事。我们想阻止它写到 <code>from</code>，我们可以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">copy</span><span class="params">(from: Array&lt;out Any&gt;, to: Array&lt;Any&gt;)</span> </span>&#123; …… &#125;</span><br></pre></td></tr></table></figure><p>这里发生的事情称为类型投影：我们说<code>from</code>不仅仅是一个数组，而是一个受限制的（投影的）数组：我们只可以调用返回类型为类型参数 <code>T</code> 的方法，如上，这意味着我们只能调用 <code>get()</code>。这就是我们的使用处型变的用法，并且是对应于 <code>Java</code> 的 <code>Array&lt;? extends Object&gt;</code>、 但使用更简单些的方式。</p><p>你也可以使用<code>in</code>投影一个类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">fill</span><span class="params">(dest: Array&lt;in String&gt;, value: String)</span> </span>&#123; …… &#125;</span><br></pre></td></tr></table></figure><p><code>Array&lt;in String&gt;</code> 对应于 Java 的 <code>Array&lt;? super String&gt;</code>，也就是说，你可以传递一个 <code>CharSequence</code> 数组或一个 <code>Object</code> 数组给 <code>fill()</code> 函数。</p><h3 id="3-2-2-星投影"><a href="#3-2-2-星投影" class="headerlink" title="3.2.2 星投影"></a>3.2.2 星投影</h3><p>有时你想说，你对类型参数一无所知，但仍然希望以安全的方式使用它。 这里的安全方式是定义泛型类型的这种投影，该泛型类型的每个具体实例化将是该投影的子类型。</p><p>Kotlin 为此提供了所谓的星投影语法：</p><ul><li>对于 <code>Foo &lt;out T : TUpper&gt;</code>，其中 <code>T</code> 是一个具有上界 <code>TUpper</code> 的协变类型参数，<code>Foo &lt;*&gt;</code> 等价于 <code>Foo &lt;out TUpper&gt;</code>。 这意味着当 <code>T</code> 未知时，你可以安全地从 <code>Foo &lt;*&gt;</code> 读取 <code>TUpper</code> 的值。</li><li>对于 <code>Foo &lt;in T&gt;</code>，其中 <code>T</code> 是一个逆变类型参数，<code>Foo &lt;*&gt;</code> 等价于 <code>Foo &lt;in Nothing&gt;</code>。 这意味着当 <code>T</code> 未知时，没有什么可以以安全的方式写入 <code>Foo &lt;*&gt;</code>。</li><li>对于 <code>Foo &lt;T : TUpper&gt;</code>，其中 T 是一个具有上界 TUpper 的不型变类型参数，<code>Foo&lt;*&gt;</code> 对于读取值时等价于 <code>Foo&lt;out TUpper&gt;</code> 而对于写值时等价于 <code>Foo&lt;in Nothing&gt;</code>。</li></ul><p>如果泛型类型具有多个类型参数，则每个类型参数都可以单独投影。 例如，如果类型被声明为 <code>interface Function &lt;in T, out U&gt;</code>，我们可以想象以下星投影：</p><ul><li><code>Function&lt;*, String&gt;</code> 表示 <code>Function&lt;in Nothing, String&gt;</code>；</li><li><code>Function&lt;Int, *&gt;</code> 表示 <code>Function&lt;Int, out Any?&gt;</code>；</li><li><code>Function&lt;*, *&gt;</code> 表示 <code>Function&lt;in Nothing, out Any?&gt;</code>。</li></ul><blockquote><p>注意：星投影非常像 Java 的原始类型，但是安全。</p></blockquote><h2 id="3-3-泛型函数"><a href="#3-3-泛型函数" class="headerlink" title="3.3 泛型函数"></a>3.3 泛型函数</h2><p>不仅类可以有类型参数。函数也可以有。类型参数要放在函数名称之前：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fun &lt;T&gt; singletonList(item: T): List&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun &lt;T&gt; T.basicToString(): String &#123;  <span class="comment">// 扩展函数</span></span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要调用泛型函数，在调用处函数名之后指定类型参数即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val l = singletonList&lt;Int&gt;(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>可以省略能够从上下文中推断出来的类型参数，所以以下示例同样适用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val l = singletonList(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h1 id="4-枚举类"><a href="#4-枚举类" class="headerlink" title="4. 枚举类"></a>4. 枚举类</h1><p>枚举类的最基本的用法是实现类型安全的枚举：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Direction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    NORTH, SOUTH, WEST, EAST</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个枚举常量都是一个对象。枚举常量用逗号分隔。</p><h2 id="4-1-初始化"><a href="#4-1-初始化" class="headerlink" title="4.1 初始化"></a>4.1 初始化</h2><p>因为每一个枚举都是枚举类的实例，所以他们可以是这样初始化过的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">enum</span> class <span class="title">Color</span><span class="params">(val rgb: Int)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        RED(<span class="number">0xFF0000</span>),</span><br><span class="line">        GREEN(<span class="number">0x00FF00</span>),</span><br><span class="line">        BLUE(<span class="number">0x0000FF</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-匿名类"><a href="#4-2-匿名类" class="headerlink" title="4.2 匿名类"></a>4.2 匿名类</h2><p>枚举常量还可以声明其带有相应方法以及覆盖了基类方法的匿名类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtocolState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    WAITING &#123;</span><br><span class="line">        <span class="function">override fun <span class="title">signal</span><span class="params">()</span> </span>= TALKING</span><br><span class="line">    &#125;,</span><br><span class="line">    TALKING &#123;</span><br><span class="line">        <span class="function">override fun <span class="title">signal</span><span class="params">()</span> </span>= WAITING</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> fun <span class="title">signal</span><span class="params">()</span>: ProtocolState</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>如果枚举类定义任何成员，那么使用分号将成员定义中的枚举常量定义分隔开。</p><p>枚举条目不能包含内部类以外的嵌套类型（已在<code>Kotlin 1.2</code>中弃用）。</p><h2 id="4-3-在枚举类中实现接口"><a href="#4-3-在枚举类中实现接口" class="headerlink" title="4.3 在枚举类中实现接口"></a>4.3 在枚举类中实现接口</h2><p>一个枚举类可以实现接口（但不能从类继承），可以为所有条目提供统一的接口成员实现，也可以在相应匿名类中为每个条目提供各自的实现。只需将接口添加到枚举类声明中即可，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">enum class IntArithmetics : BinaryOperator&lt;Int&gt;, IntBinaryOperator &#123;</span><br><span class="line"></span><br><span class="line">    PLUS &#123;</span><br><span class="line">        <span class="function">override fun <span class="title">apply</span><span class="params">(t: Int, u: Int)</span>: Int </span>= t + u</span><br><span class="line">    &#125;,</span><br><span class="line">    TIMES &#123;</span><br><span class="line">        <span class="function">override fun <span class="title">apply</span><span class="params">(t: Int, u: Int)</span>: Int </span>= t * u</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">override fun <span class="title">applyAsInt</span><span class="params">(t: Int, u: Int)</span> </span>= apply(t, u)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-4-使用枚举常量"><a href="#4-4-使用枚举常量" class="headerlink" title="4.4 使用枚举常量"></a>4.4 使用枚举常量</h2><p>Kotlin 中的枚举类也有合成方法允许列出定义的枚举常量以及通过名称获取枚举常量。这些方法的签名如下（假设枚举类的名称是 <code>EnumClass</code>）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EnumClass.valueOf(value: String): EnumClass</span><br><span class="line"></span><br><span class="line">EnumClass.values(): Array&lt;EnumClass&gt;</span><br></pre></td></tr></table></figure><p>如果指定的名称与类中定义的任何枚举常量均不匹配，<code>valueOf()</code> 方法将抛出 <code>IllegalArgumentException</code> 异常。</p><p>自 <code>Kotlin 1.1</code> 起，可以使用 <code>enumValues&lt;T&gt;()</code> 与 <code>enumValueOf&lt;T&gt;()</code> 函数以泛型的方式访问枚举类中的常量 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">RGB</span> </span>&#123; RED, GREEN, BLUE &#125;</span><br><span class="line"></span><br><span class="line">inline fun &lt;reified T : Enum&lt;T&gt;&gt; printAllValues() &#123;</span><br><span class="line"></span><br><span class="line">    print(enumValues&lt;T&gt;().joinToString &#123; it.name &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printAllValues&lt;RGB&gt;() <span class="comment">// 输出 RED, GREEN, BLUE</span></span><br></pre></td></tr></table></figure><p>每个枚举常量都具有在枚举类声明中获取其名称与位置的属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val name: String</span><br><span class="line">val ordinal: Int</span><br></pre></td></tr></table></figure><p>枚举常量还实现了 <code>Comparable</code> 接口， 其中自然顺序是它们在枚举类中定义的顺序。</p><h1 id="5-内联类"><a href="#5-内联类" class="headerlink" title="5. 内联类"></a>5. 内联类</h1><blockquote><p>内联类仅在 <code>Kotlin 1.3</code> 之后版本可用，目前还是实验性的，本文中简单介绍一下内联类，详细使用等稳定后再总结</p></blockquote><p>有时候，业务逻辑需要围绕某种类型创建包装器。然而，由于额外的堆内存分配问题，它会引入运行时的性能开销。此外，如果被包装的类型是原生类型，性能的损失是很糟糕的，因为原生类型通常在运行时就进行了大量优化，然而他们的包装器却没有得到任何特殊的处理。</p><p>为了解决这类问题，Kotlin 引入了一种被称为 <code>内联类</code> 的特殊类，它通过在类的前面定义一个 <code>inline</code> 修饰符来声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">inline class <span class="title">Password</span><span class="params">(val value: String)</span></span></span><br></pre></td></tr></table></figure><p>内联类必须含有唯一的一个属性在主构造函数中初始化。在运行时，将使用这个唯一属性来表示内联类的实例（关于运行时的内部表达请参阅下文）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不存在 'Password' 类的真实实例对象</span></span><br><span class="line"><span class="comment">// 在运行时，'securePassword' 仅仅包含 'String'</span></span><br><span class="line">val securePassword = Password(<span class="string">"Don't try this in production"</span>)</span><br></pre></td></tr></table></figure><p>这就是内联类的主要特性，它灵感来源于 <code>inline</code> 这个名称：类的数据被 “内联”到该类使用的地方（类似于内联函数中的代码被内联到该函数调用的地方）。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将伴随大家进入Kotlin语言的正式学习生涯中，希望大家不要半途而废哦！笔者将Kotlin用于Android开发中，因此将从Android开发的视角叙述相关内容，同时将与Java语言有所联系。  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Kotlin征途" scheme="http://hwb0011.github.io/categories/Kotlin%E5%BE%81%E9%80%94/"/>
    
    
      <category term="Android" scheme="http://hwb0011.github.io/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://hwb0011.github.io/tags/Kotlin/"/>
    
      <category term="编程" scheme="http://hwb0011.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin征途（六）：继承、接口、扩展</title>
    <link href="http://hwb0011.github.io/2019/11/15/Kotlin%E5%BE%81%E9%80%94%EF%BC%88%E5%85%AD%EF%BC%89%EF%BC%9A%E7%BB%A7%E6%89%BF%E3%80%81%E6%8E%A5%E5%8F%A3%E3%80%81%E6%89%A9%E5%B1%95/"/>
    <id>http://hwb0011.github.io/2019/11/15/Kotlin征途（六）：继承、接口、扩展/</id>
    <published>2019-11-15T09:32:19.000Z</published>
    <updated>2020-02-21T03:06:45.457Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文将伴随大家进入Kotlin语言的正式学习生涯中，希望大家不要半途而废哦！笔者将Kotlin用于Android开发中，因此将从Android开发的视角叙述相关内容，同时将与Java语言有所联系。  </p></blockquote><a id="more"></a><h1 id="1-继承"><a href="#1-继承" class="headerlink" title="1. 继承"></a>1. 继承</h1><p>在 Kotlin 中所有类都有一个共同的超类<code>Any</code>，这对于没有超类型声明的类是默认超类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> // 从 <span class="title">Any</span> 隐式继承</span></span><br></pre></td></tr></table></figure><p><code>Any</code>有三个方法：<code>equals()</code>、 <code>hashCode()</code> 与 <code>toString()</code>。因此，为所有 Kotlin 类都定义了这些方法。</p><p>如需声明一个显式的超类型，需要使用<code>open</code>关键字修饰超类型，派生类头中把超类型放到冒号之后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">open class <span class="title">Base</span><span class="params">(p: Int)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">class <span class="title">Derived</span><span class="params">(p: Int)</span> : <span class="title">Base</span><span class="params">(p)</span></span></span><br></pre></td></tr></table></figure><p>如果派生类有一个主构造函数，其基类必须用派生类主构造函数的参数就地初始化。如果派生类没有主构造函数，那么每个次构造函数必须使用<code>super</code>关键字初始化其基类型，或委托给另一个构造函数做到这一点。 注意，在这种情况下，不同的次构造函数可以调用基类型的不同的构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class MyView : View &#123;</span><br><span class="line"></span><br><span class="line">    constructor(ctx: Context) : <span class="keyword">super</span>(ctx)</span><br><span class="line"></span><br><span class="line">    constructor(ctx: Context, attrs: AttributeSet) : <span class="keyword">super</span>(ctx, attrs)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-1-覆盖方法"><a href="#1-1-覆盖方法" class="headerlink" title="1.1 覆盖方法"></a>1.1 覆盖方法</h2><p>Kotlin 对于可覆盖的成员（我们称之为开放）以及覆盖后的成员需要显式修饰符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">open <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">open fun <span class="title">draw</span><span class="params">()</span> </span>&#123; <span class="comment">/*……*/</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">fill</span><span class="params">()</span> </span>&#123; <span class="comment">/*……*/</span> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Circle() : Shape() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Shape.draw()函数有open修饰，可以覆盖</span></span><br><span class="line">    <span class="function">override fun <span class="title">draw</span><span class="params">()</span> </span>&#123; <span class="comment">/*……*/</span> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Circle.draw()</code>函数上必须加上<code>override</code>修饰符。如果没写，编译器将会报错。 如果函数没有标注<code>open</code>如<code>Shape.fill()</code>，那么子类中不允许定义相同签名的函数， 不论加不加<code>override</code>。将<code>open</code>修饰符添加到<code>final</code>类（即没有 <code>open</code>的类）的成员上不起作用。</p><p>标记为<code>override</code>的成员本身是开放的，也就是说，它可以在子类中覆盖。如果你想禁止再次覆盖，使用<code>final</code>关键字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">open class <span class="title">Rectangle</span><span class="params">()</span> : <span class="title">Shape</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Rectangle.draw()函数将无法被Rectangle的派生类覆盖</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> override fun <span class="title">draw</span><span class="params">()</span> </span>&#123; <span class="comment">/*……*/</span> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-覆盖属性"><a href="#1-2-覆盖属性" class="headerlink" title="1.2 覆盖属性"></a>1.2 覆盖属性</h2><p>属性覆盖与方法覆盖类似；在超类中声明并用<code>open</code>修饰，然后在派生类中重新声明的属性必须以<code>override</code>开头，并且它们必须具有兼容的类型。 每个声明的属性可以由具有初始化器的属性或者具有<code>get</code>方法的属性覆盖。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">open <span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    open val vertexCount: Int = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Rectangle : Shape() &#123;</span><br><span class="line"></span><br><span class="line">    override val vertexCount = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你也可以用一个<code>var</code>属性覆盖一个<code>val</code>属性，但<strong>反之则不行</strong>。 这是允许的，因为一个<code>val</code>属性本质上声明了一个<code>get</code>方法， 而将其覆盖为<code>var</code>只是在子类中额外声明一个<code>set</code>方法。</p><p>请注意，你可以在主构造函数中使用<code>override</code>关键字作为属性声明的一部分。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    val vertexCount: Int</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Polygon : Shape &#123;</span><br><span class="line"></span><br><span class="line">    override <span class="keyword">var</span> vertexCount: Int = <span class="number">0</span>  <span class="comment">// 以后可以设置为任何数</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Rectangle(override val vertexCount: Int = 4) : Shape // 总是有 4 个顶点</span><br></pre></td></tr></table></figure><h2 id="1-3-派生类初始化顺序"><a href="#1-3-派生类初始化顺序" class="headerlink" title="1.3 派生类初始化顺序"></a>1.3 派生类初始化顺序</h2><p>在构造派生类的新实例的过程中，第一步完成其基类的初始化（在之前只有对基类构造函数参数的求值），因此发生在派生类的初始化逻辑运行之前。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">open class <span class="title">Base</span><span class="params">(val name: String)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    init &#123; println(<span class="string">"Initializing Base"</span>) &#125;</span><br><span class="line"></span><br><span class="line">    open val size: Int = name.length.also &#123; println(<span class="string">"Initializing size in Base: $it"</span>) &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Derived(name: String,val lastName: String) :</span><br><span class="line">    Base(name.capitalize().also &#123;</span><br><span class="line">        println(<span class="string">"Argument for Base: $it"</span>)</span><br><span class="line">    &#125;) &#123;</span><br><span class="line"></span><br><span class="line">        init &#123; println(<span class="string">"Initializing Derived"</span>) &#125;</span><br><span class="line"></span><br><span class="line">        override val size: Int =(<span class="keyword">super</span>.size + lastName.length).also &#123;</span><br><span class="line">            println(<span class="string">"Initializing size in Derived: $it"</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行代码<code>Constructing Derived(&quot;hello&quot;, &quot;world&quot;)</code>，输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Argument for Base: Hello</span><br><span class="line">Initializing Base</span><br><span class="line">Initializing size in Base: 5</span><br><span class="line">Initializing Derived</span><br><span class="line">Initializing size in Derived: 10</span><br></pre></td></tr></table></figure><p>这意味着，基类构造函数执行时，派生类中声明或覆盖的属性都还没有初始化。如果在基类初始化逻辑中（直接或通过另一个覆盖的<code>open</code>成员的实现间接）使用了任何一个这种属性，那么都可能导致不正确的行为或运行时故障。设计一个基类时，应该避免在构造函数、属性初始化器以及<code>init</code>块中使用<code>open</code>成员。</p><h2 id="1-4-调用超类实现"><a href="#1-4-调用超类实现" class="headerlink" title="1.4 调用超类实现"></a>1.4 调用超类实现</h2><p>派生类中的代码可以使用<code>super</code>关键字调用其超类的函数与属性访问器的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">open <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">open fun <span class="title">draw</span><span class="params">()</span> </span>&#123; println(<span class="string">"Drawing a rectangle"</span>) &#125;</span><br><span class="line"></span><br><span class="line">    val borderColor: <span class="function">String <span class="title">get</span><span class="params">()</span> </span>= <span class="string">"black"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class FilledRectangle : Rectangle() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.draw()</span><br><span class="line">        println(<span class="string">"Filling the rectangle"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    val fillColor: <span class="function">String <span class="title">get</span><span class="params">()</span> </span>= <span class="keyword">super</span>.borderColor</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在一个内部类中访问外部类的超类，可以通过由外部类名限定的<code>super</code>关键字来实现<code>：super@Outer</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class FilledRectangle: Rectangle() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">draw</span><span class="params">()</span> </span>&#123; <span class="comment">/* …… */</span> &#125;</span><br><span class="line"></span><br><span class="line">    val borderColor: <span class="function">String <span class="title">get</span><span class="params">()</span> </span>= <span class="string">"black"</span></span><br><span class="line"></span><br><span class="line">    inner <span class="class"><span class="keyword">class</span> <span class="title">Filler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function">fun <span class="title">fill</span><span class="params">()</span> </span>&#123; <span class="comment">/* …… */</span> &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">fun <span class="title">drawAndFill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span><span class="meta">@FilledRectangle</span>.draw() <span class="comment">// 调用 Rectangle 的 draw() 实现</span></span><br><span class="line">            fill()</span><br><span class="line">            println(<span class="string">"Drawn a filled rectangle with color $&#123;super@FilledRectangle.borderColor&#125;"</span>) <span class="comment">// 使用 Rectangle 所实现的 borderColor 的 get()</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-覆盖规则"><a href="#1-5-覆盖规则" class="headerlink" title="1.5 覆盖规则"></a>1.5 覆盖规则</h2><p>在 Kotlin 中，实现继承由下述规则规定：如果一个类从它的直接超类继承相同成员的多个实现， 它必须覆盖这个成员并提供其自己的实现（也许用继承来的其中之一）。 为了表示采用从哪个超类型继承的实现，我们使用由尖括号中超类型名限定的<code>super</code>，如<code>super&lt;Base&gt;</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">open <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">open fun <span class="title">draw</span><span class="params">()</span> </span>&#123; <span class="comment">/* …… */</span> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Polygon</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">draw</span><span class="params">()</span> </span>&#123; <span class="comment">/* …… */</span> &#125; <span class="comment">// 接口成员默认就是“open”的</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Square() : Rectangle(), Polygon &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编译器要求覆盖 draw()：</span></span><br><span class="line">    <span class="function">override fun <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>&lt;Rectangle&gt;.draw() <span class="comment">// 调用 Rectangle.draw()</span></span><br><span class="line">        <span class="keyword">super</span>&lt;Polygon&gt;.draw() <span class="comment">// 调用 Polygon.draw()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以同时继承<code>Rectangle</code>与<code>Polygon</code>， 但是二者都有各自的<code>draw()</code>实现，所以我们必须在<code>Square</code>中覆盖<code>draw()</code>， 并提供其自身的实现以消除歧义。</p><h2 id="1-6-抽象类"><a href="#1-6-抽象类" class="headerlink" title="1.6 抽象类"></a>1.6 抽象类</h2><p>类以及其中的某些成员可以声明为<code>abstract</code>。 抽象成员在本类中可以不用实现。 需要注意的是，我们并不需要用<code>open</code>标注一个抽象类或者函数——因为这不言而喻。</p><p>我们可以用一个抽象成员覆盖一个非抽象的开放成员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">open <span class="class"><span class="keyword">class</span> <span class="title">Polygon</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">open fun <span class="title">draw</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abstract class Rectangle : Polygon() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">override <span class="keyword">abstract</span> fun <span class="title">draw</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="2-接口"><a href="#2-接口" class="headerlink" title="2. 接口"></a>2. 接口</h1><p>Kotlin 的接口可以既包含抽象方法的声明也包含实现。与抽象类不同的是，接口无法保存状态。它可以有属性但必须声明为抽象或提供访问器实现。</p><p>使用关键字<code>interface</code>来定义接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    fun <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 可选的方法体</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-实现接口"><a href="#2-1-实现接口" class="headerlink" title="2.1 实现接口"></a>2.1 实现接口</h2><p>一个类或者对象可以实现一个或多个接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Child : MyInterface &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 方法体</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>接口的实现方式与继承相似，并且Kotlin的接口可以有属性和实现的方法，可以达到类似于多继承的效果。</p></blockquote><h2 id="2-2-接口中的属性"><a href="#2-2-接口中的属性" class="headerlink" title="2.2 接口中的属性"></a>2.2 接口中的属性</h2><p>你可以在接口中定义属性。在接口中声明的属性要么是抽象的，要么提供访问器的实现。在接口中声明的属性不能有幕后字段（<code>backing field</code>），因此接口中声明的访问器不能引用它们。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    val prop: Int <span class="comment">// 抽象的</span></span><br><span class="line"></span><br><span class="line">    val propertyWithImplementation: String</span><br><span class="line">        get() = <span class="string">"foo"</span></span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        print(prop)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Child : MyInterface &#123;</span><br><span class="line"></span><br><span class="line">    override val prop: Int = <span class="number">29</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-接口继承"><a href="#2-3-接口继承" class="headerlink" title="2.3 接口继承"></a>2.3 接口继承</h2><p>一个接口可以从其他接口派生，从而既提供基类型成员的实现也声明新的函数与属性。很自然地，实现这样接口的类只需定义所缺少的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Named</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    val name: String</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Person : Named &#123;</span><br><span class="line"></span><br><span class="line">    val firstName: String</span><br><span class="line">    val lastName: String</span><br><span class="line">    override val name: <span class="function">String <span class="title">get</span><span class="params">()</span> </span>= <span class="string">"$firstName $lastName"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">data class <span class="title">Employee</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    // 不必实现“name”</span></span></span><br><span class="line"><span class="function"><span class="params">    override val firstName: String,</span></span></span><br><span class="line"><span class="function"><span class="params">    override val lastName: String,</span></span></span><br><span class="line"><span class="function"><span class="params">    val position: Position</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> : Person</span></span><br></pre></td></tr></table></figure><h2 id="2-4-解决覆盖冲突"><a href="#2-4-解决覆盖冲突" class="headerlink" title="2.4 解决覆盖冲突"></a>2.4 解决覆盖冲突</h2><p>实现多个接口时，可能会遇到同一方法继承多个实现的问题。例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">foo</span><span class="params">()</span> </span>&#123; print(<span class="string">"A"</span>) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">interface B </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">foo</span><span class="params">()</span> </span>&#123; print(<span class="string">"B"</span>) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">bar</span><span class="params">()</span> </span>&#123; print(<span class="string">"bar"</span>) &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class C : A &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">bar</span><span class="params">()</span> </span>&#123; print(<span class="string">"bar"</span>) &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class D : A, B &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>&lt;A&gt;.foo()</span><br><span class="line">        <span class="keyword">super</span>&lt;B&gt;.foo()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>&lt;B&gt;.bar()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中，接口 A 和 B 都定义了方法<code>foo()</code>和<code>bar()</code>。 两者都实现了<code>foo()</code>, 但是只有 B 实现了<code>bar()</code>(<code>bar()</code> 在 A 中没有标记为抽象， 因为没有方法体时默认为抽象）。因为 C 是一个实现了 A 的具体类，所以必须要重写<code>bar()</code>并实现这个抽象方法。</p><p>然而，如果我们从 A 和 B 派生 D，我们需要实现我们从多个接口继承的所有方法，并指明 D 应该如何实现它们。这一规则既适用于继承单个实现（<code>bar()</code>）的方法也适用于继承多个实现（<code>foo()</code>）的方法。</p><h1 id="3-扩展"><a href="#3-扩展" class="headerlink" title="3. 扩展"></a>3. 扩展</h1><p>Kotlin 能够扩展一个类的新功能而无需继承该类或者使用像装饰者这样的设计模式。 这通过叫做<code>扩展</code>的特殊声明完成。 例如，你可以为一个你不能修改的、来自第三方库中的类编写一个新的函数。 这个新增的函数就像那个原始类本来就有的函数一样，可以用普通的方法调用。 这种机制称为<code>扩展函数</code>。此外，也有<code>扩展属性</code>， 允许你为一个已经存在的类添加新的属性。</p><h2 id="3-1-扩展函数"><a href="#3-1-扩展函数" class="headerlink" title="3.1 扩展函数"></a>3.1 扩展函数</h2><p>声明一个扩展函数，我们需要用一个<code>接收者类型</code>也就是被扩展的类型来作为他的前缀。 下面代码为<code>MutableList&lt;Int&gt;</code>添加一个<code>swap</code>函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fun MutableList&lt;Int&gt;.swap(index1: Int, index2: Int) &#123;</span><br><span class="line">    val tmp = <span class="keyword">this</span>[index1] <span class="comment">// “this”对应该列表</span></span><br><span class="line">    <span class="keyword">this</span>[index1] = <span class="keyword">this</span>[index2]</span><br><span class="line">    <span class="keyword">this</span>[index2] = tmp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个<code>this</code>关键字在扩展函数内部对应到接收者对象（传过来的在点符号前的对象） 现在，我们对任意<code>MutableList&lt;Int&gt;</code>调用该函数了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val list = mutableListOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">list.swap(<span class="number">0</span>, <span class="number">2</span>) <span class="comment">// “swap()”内部的“this”会保存“list”的值</span></span><br></pre></td></tr></table></figure><p>当然，这个函数对任何 MutableList<T> 起作用，我们可以泛化它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fun &lt;T&gt; MutableList&lt;T&gt;.swap(index1: Int, index2: Int) &#123;</span><br><span class="line">    val tmp = <span class="keyword">this</span>[index1] <span class="comment">// “this”对应该列表</span></span><br><span class="line">    <span class="keyword">this</span>[index1] = <span class="keyword">this</span>[index2]</span><br><span class="line">    <span class="keyword">this</span>[index2] = tmp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了在接收者类型表达式中使用泛型，我们要在函数名前声明泛型参数。</p><h2 id="3-2-扩展是静态解析的"><a href="#3-2-扩展是静态解析的" class="headerlink" title="3.2 扩展是静态解析的"></a>3.2 扩展是静态解析的</h2><p>扩展不能真正的修改他们所扩展的类。通过定义一个扩展，你并没有在一个类中插入新成员， 仅仅是可以通过该类型的变量用点表达式去调用这个新函数。</p><p>我们想强调的是扩展函数是静态分发的，即他们不是根据接收者类型的虚方法。 这意味着调用的扩展函数是由函数调用所在的表达式的类型来决定的， 而不是由表达式运行时求值结果决定的。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">open <span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line">class Rectangle: Shape() &#123;&#125;</span><br><span class="line"></span><br><span class="line">fun Shape.getName() = <span class="string">"Shape"</span></span><br><span class="line"></span><br><span class="line">fun Rectangle.getName() = <span class="string">"Rectangle"</span></span><br><span class="line"></span><br><span class="line"><span class="function">fun <span class="title">printClassName</span><span class="params">(s: Shape)</span> </span>&#123;</span><br><span class="line">    println(s.getName())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printClassName(Rectangle())</span><br></pre></td></tr></table></figure><p>这个例子会输出 “Shape”，因为调用的扩展函数只取决于参数<code>s</code>的声明类型，该类型是<code>Shape</code>类。</p><p>如果一个类定义有一个成员函数与一个扩展函数，而这两个函数又有相同的接收者类型、 相同的名字，并且都适用给定的参数，这种情况总是取成员函数。 例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">printFunctionType</span><span class="params">()</span> </span>&#123; println(<span class="string">"Class method"</span>) &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun Example.printFunctionType() &#123; println(<span class="string">"Extension function"</span>) &#125;</span><br><span class="line"></span><br><span class="line">Example().printFunctionType()</span><br></pre></td></tr></table></figure><p>这段代码输出“Class method”。</p><p>当然，扩展函数重载同样名字但不同签名成员函数也完全可以：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">printFunctionType</span><span class="params">()</span> </span>&#123; println(<span class="string">"Class method"</span>) &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun Example.printFunctionType(i: Int) &#123; println(<span class="string">"Extension function"</span>) &#125;</span><br><span class="line"></span><br><span class="line">Example().printFunctionType(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>这段代码输出“Extension function”。</p><h2 id="3-3-可空接收者"><a href="#3-3-可空接收者" class="headerlink" title="3.3 可空接收者"></a>3.3 可空接收者</h2><p>注意可以为可空的接收者类型定义扩展。这样的扩展可以在对象变量上调用， 即使其值为<code>null</code>，并且可以在函数体内检测<code>this == null</code>，这能让你在没有检测<code>null</code>的时候调用 Kotlin 中的<code>toString()</code>：检测发生在扩展函数的内部。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fun Any?.toString(): String &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="string">"null"</span></span><br><span class="line">    <span class="comment">// 空检测之后，“this”会自动转换为非空类型，所以下面的 toString()</span></span><br><span class="line">    <span class="comment">// 解析为 Any 类的成员函数</span></span><br><span class="line">    <span class="keyword">return</span> toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-扩展属性"><a href="#3-4-扩展属性" class="headerlink" title="3.4 扩展属性"></a>3.4 扩展属性</h2><p>与函数类似，Kotlin 支持扩展属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val &lt;T&gt; List&lt;T&gt;.lastIndex: Int</span><br><span class="line">    get() = size - <span class="number">1</span></span><br></pre></td></tr></table></figure><p>注意：由于扩展没有实际的将成员插入类中，因此对扩展属性来说幕后字段是无效的。这就是为什么扩展属性不能有初始化器。他们的行为只能由显式提供的<code>getters/setters</code>定义。例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val House.number = <span class="number">1</span> <span class="comment">// 错误：扩展属性不能有初始化器</span></span><br></pre></td></tr></table></figure><h2 id="3-5-伴生对象的扩展"><a href="#3-5-伴生对象的扩展" class="headerlink" title="3.5 伴生对象的扩展"></a>3.5 伴生对象的扩展</h2><p>如果一个类定义有一个伴生对象 ，你也可以为伴生对象定义扩展函数与属性。就像伴生对象的常规成员一样， 可以只使用类名作为限定符来调用伴生对象的扩展成员：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    companion object &#123; &#125;  <span class="comment">// 将被称为 "Companion"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun MyClass.Companion.printCompanion() &#123; println(<span class="string">"companion"</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">fun <span class="title">main</span><span class="params">()</span> </span>&#123; MyClass.printCompanion() &#125;</span><br></pre></td></tr></table></figure><h2 id="3-6-扩展的作用域"><a href="#3-6-扩展的作用域" class="headerlink" title="3.6 扩展的作用域"></a>3.6 扩展的作用域</h2><p>大多数时候我们在顶层定义扩展——直接在包里：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.declarations</span><br><span class="line"></span><br><span class="line">fun List&lt;String&gt;.getLongestString() &#123; <span class="comment">/*……*/</span>&#125;</span><br></pre></td></tr></table></figure><p>要使用所定义包之外的一个扩展，我们需要在调用方导入它：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.usage</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.example.declarations.getLongestString</span><br><span class="line"></span><br><span class="line"><span class="function">fun <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    val list = listOf(<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>)</span><br><span class="line">    list.getLongestString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-7-扩展声明为成员"><a href="#3-7-扩展声明为成员" class="headerlink" title="3.7 扩展声明为成员"></a>3.7 扩展声明为成员</h2><p>在一个类内部你可以为另一个类声明扩展。在这样的扩展内部，有多个<code>隐式接收者</code>—— 其中的对象成员可以无需通过限定符访问。扩展声明所在的类的实例称为<code>分发接收者</code>，扩展方法调用所在的接收者类型的实例称为<code>扩展接收者</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Host(val hostname: String) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">printHostname</span><span class="params">()</span> </span>&#123; print(hostname) &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Connection(val host: Host, val port: Int) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="function">fun <span class="title">printPort</span><span class="params">()</span> </span>&#123; print(port) &#125;</span><br><span class="line"></span><br><span class="line">     fun Host.printConnectionString() &#123;</span><br><span class="line">         printHostname()   <span class="comment">// 调用 Host.printHostname()</span></span><br><span class="line">         print(<span class="string">":"</span>)</span><br><span class="line">         printPort()   <span class="comment">// 调用 Connection.printPort()</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function">fun <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="comment">/*……*/</span></span><br><span class="line">         host.printConnectionString()   <span class="comment">// 调用扩展函数</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">fun <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connection(Host(<span class="string">"kotl.in"</span>), <span class="number">443</span>).connect()</span><br><span class="line">    <span class="comment">//Host("kotl.in").printConnectionString(443)  // 错误，该扩展函数在 Connection 外不可用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于分发接收者与扩展接收者的成员名字冲突的情况，扩展接收者优先。要引用分发接收者的成员你可以使用限定的<code>this</code>语法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    fun Host.getConnectionString() &#123;</span><br><span class="line">        toString()         <span class="comment">// 调用 Host.toString()</span></span><br><span class="line">        <span class="keyword">this</span><span class="meta">@Connection</span>.toString()  <span class="comment">// 调用 Connection.toString()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明为成员的扩展可以声明为<code>open</code>并在子类中覆盖。这意味着这些函数的分发对于分发接收者类型是虚拟的，但对于扩展接收者类型是静态的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">open <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">class Derived : Base() &#123; &#125;</span><br><span class="line"></span><br><span class="line">open <span class="class"><span class="keyword">class</span> <span class="title">BaseCaller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    open fun Base.printFunctionInfo() &#123;</span><br><span class="line">        println(<span class="string">"Base extension function in BaseCaller"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    open fun Derived.printFunctionInfo() &#123;</span><br><span class="line">        println(<span class="string">"Derived extension function in BaseCaller"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">call</span><span class="params">(b: Base)</span> </span>&#123;</span><br><span class="line">        b.printFunctionInfo()   <span class="comment">// 调用扩展函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class DerivedCaller: BaseCaller() &#123;</span><br><span class="line"></span><br><span class="line">    override fun Base.printFunctionInfo() &#123;</span><br><span class="line">        println(<span class="string">"Base extension function in DerivedCaller"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun Derived.printFunctionInfo() &#123;</span><br><span class="line">        println(<span class="string">"Derived extension function in DerivedCaller"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">fun <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BaseCaller().call(Base())</span><br><span class="line">    DerivedCaller().call(Base())</span><br><span class="line">    DerivedCaller().call(Derived())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Base extension function in BaseCaller</span><br><span class="line">Base extension function in DerivedCaller</span><br><span class="line">Base extension function in DerivedCaller</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将伴随大家进入Kotlin语言的正式学习生涯中，希望大家不要半途而废哦！笔者将Kotlin用于Android开发中，因此将从Android开发的视角叙述相关内容，同时将与Java语言有所联系。  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Kotlin征途" scheme="http://hwb0011.github.io/categories/Kotlin%E5%BE%81%E9%80%94/"/>
    
    
      <category term="Android" scheme="http://hwb0011.github.io/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://hwb0011.github.io/tags/Kotlin/"/>
    
      <category term="编程" scheme="http://hwb0011.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin征途（五）：Kotlin类和对象</title>
    <link href="http://hwb0011.github.io/2019/11/01/Kotlin%E5%BE%81%E9%80%94%EF%BC%88%E4%BA%94%EF%BC%89%EF%BC%9AKotlin%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1/"/>
    <id>http://hwb0011.github.io/2019/11/01/Kotlin征途（五）：Kotlin类和对象/</id>
    <published>2019-11-01T06:06:20.000Z</published>
    <updated>2020-02-21T03:07:14.344Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文将伴随大家进入Kotlin语言的正式学习生涯中，希望大家不要半途而废哦！笔者将Kotlin用于Android开发中，因此将从Android开发的视角叙述相关内容，同时将与Java语言有所联系。  </p></blockquote><a id="more"></a><h1 id="1-类定义"><a href="#1-类定义" class="headerlink" title="1. 类定义"></a>1. 类定义</h1><p>接触过Java的同学可以很轻松的掌握类的定义。Kotlin 类可以包含：构造函数和初始化代码块、函数、属性、内部类、对象声明。Kotlin 中使用关键字<code>class</code>声明类，后面紧跟类名：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeThing</span> </span>&#123;  <span class="comment">// 类名为 SomeThing</span></span><br><span class="line">    <span class="comment">// 大括号内是类体构成</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们也可以定义一个空类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Empty</span></span></span><br></pre></td></tr></table></figure><p>可以在类中定义成员函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeThing</span>() </span>&#123;</span><br><span class="line">    <span class="function">fun <span class="title">foo</span><span class="params">()</span> </span>&#123; print(<span class="string">"Foo"</span>) &#125; <span class="comment">// 成员函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-类的属性"><a href="#2-类的属性" class="headerlink" title="2. 类的属性"></a>2. 类的属性</h1><h2 id="2-1-属性定义"><a href="#2-1-属性定义" class="headerlink" title="2.1 属性定义"></a>2.1 属性定义</h2><p>类的属性可以用关键字<code>var</code>声明为可变的，或关键字<code>val</code>声明为不可变。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeThing</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: String = <span class="string">"name"</span></span><br><span class="line">    val type: String = <span class="string">"type"</span></span><br><span class="line"></span><br><span class="line">    name = <span class="string">"new name"</span>  <span class="comment">// 正常使用，重新赋值</span></span><br><span class="line">    type = <span class="string">"new type"</span>    <span class="comment">// 报错，type用val声明，不可变，不可重新赋值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以像使用普通函数那样使用构造函数创建类实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val thing = SomeThing() <span class="comment">// Kotlin 中没有 new 关键字</span></span><br></pre></td></tr></table></figure><p>要使用一个属性，只要用名称引用它即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thing.name           <span class="comment">// 使用 . 号来引用</span></span><br><span class="line">thing.type</span><br></pre></td></tr></table></figure><p>Koltin 中的类可以有一个主构造器，以及一个或多个次构造器，主构造器是类头部的一部分，位于类名称之后:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Person constructor(firstName: String) &#123;&#125;</span><br></pre></td></tr></table></figure><p>如果主构造器没有任何注解，也没有任何可见度修饰符，那么constructor关键字可以省略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Person(firstName: String) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-getter-和-setter"><a href="#2-2-getter-和-setter" class="headerlink" title="2.2 getter 和 setter"></a>2.2 getter 和 setter</h2><p>属性声明的完整语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &lt;propertyName&gt;[: &lt;PropertyType&gt;] [= &lt;property_initializer&gt;]</span><br><span class="line">    [&lt;getter&gt;]</span><br><span class="line">    [&lt;setter&gt;]</span><br></pre></td></tr></table></figure><p><code>getter</code>和<code>setter</code>都是可选。如果属性类型可以从初始化语句或者类的成员函数中推断出来，那就可以省去类型，val不允许设置setter函数，因为它是只读的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> allByDefault: Int? <span class="comment">// 错误: 需要一个初始化语句, 默认实现了 getter 和 setter 方法</span></span><br><span class="line"><span class="keyword">var</span> initialized = <span class="number">1</span>    <span class="comment">// 类型为 Int, 默认实现了 getter 和 setter</span></span><br><span class="line">val simple: Int?       <span class="comment">// 类型为 Int ，默认实现 getter ，但必须在构造函数中初始化</span></span><br><span class="line">val inferredType = <span class="number">1</span>   <span class="comment">// 类型为 Int 类型,默认实现 getter</span></span><br></pre></td></tr></table></figure><p>以下实例定义了一个 Person 类，包含两个可变变量<code>lastName</code>和<code>no</code>，<code>lastName</code>修改了<code>getter</code>方法，<code>no</code>修改了<code>setter</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> lastName: String = <span class="string">"zhang"</span></span><br><span class="line">        get() = field.toUpperCase()   <span class="comment">// 变量取值时先转换为大写</span></span><br><span class="line">        set</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> no: Int = <span class="number">100</span></span><br><span class="line">        get() = field                <span class="comment">// 后端变量</span></span><br><span class="line">        set(value) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &lt; <span class="number">10</span>) &#123;       <span class="comment">// 如果传入的值小于 10 返回该值</span></span><br><span class="line">                field = value</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                field = -<span class="number">1</span>         <span class="comment">// 如果传入的值大于等于 10 返回 -1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> heiht: Float = <span class="number">145.4f</span></span><br><span class="line">        <span class="keyword">private</span> set</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="function">fun <span class="title">main</span><span class="params">(args: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> person: Person = Person()</span><br><span class="line"></span><br><span class="line">    person.lastName = <span class="string">"wang"</span></span><br><span class="line"></span><br><span class="line">    println(<span class="string">"lastName:$&#123;person.lastName&#125;"</span>)</span><br><span class="line"></span><br><span class="line">    person.no = <span class="number">9</span></span><br><span class="line">    println(<span class="string">"no:$&#123;person.no&#125;"</span>)</span><br><span class="line"></span><br><span class="line">    person.no = <span class="number">20</span></span><br><span class="line">    println(<span class="string">"no:$&#123;person.no&#125;"</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lastName:WANG</span><br><span class="line">no:9</span><br><span class="line">no:-1</span><br></pre></td></tr></table></figure><p>Kotlin 中类不能有字段。提供了<code>Backing Fields</code>(后端变量) 机制,备用字段使用<code>field</code>关键字声明，<code>field</code> 关键词只能用于属性的访问器，如以上实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> no: Int = <span class="number">100</span></span><br><span class="line">    get() = field                <span class="comment">// 后端变量</span></span><br><span class="line">    set(value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value &lt; <span class="number">10</span>) &#123;       <span class="comment">// 如果传入的值小于 10 返回该值</span></span><br><span class="line">            field = value</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            field = -<span class="number">1</span>         <span class="comment">// 如果传入的值大于等于 10 返回 -1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>在<code>getter</code>/<code>setter</code>方法中，要使用该属性的值必须使用<code>field</code>关键字，若直接使用属性名将导致<code>getter</code>/<code>setter</code>方法被调用。</strong></p><p>非空属性必须在定义的时候初始化，kotlin提供了一种可以延迟初始化的方案，使用 lateinit 关键字描述属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    lateinit <span class="keyword">var</span> subject: TestSubject</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SetUp</span> <span class="function">fun <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        subject = TestSubject()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> <span class="function">fun <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        subject.method()  <span class="comment">// dereference directly</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-主构造器"><a href="#3-主构造器" class="headerlink" title="3. 主构造器"></a>3. 主构造器</h1><p>主构造器中不能包含任何代码，初始化代码可以放在初始化代码段中，初始化代码段使用<code>init</code>关键字作为前缀。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Person constructor(firstName: String) &#123;</span><br><span class="line">    init &#123;</span><br><span class="line">        println(<span class="string">"FirstName is $firstName"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：主构造器的参数可以在初始化代码段中使用，也可以在类主体定义的属性初始化代码中使用。 一种简洁语法，可以通过主构造器来定义属性并初始化属性值（可以是var或val）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class People(val firstName: String, val lastName: String) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果构造器有注解，或者有可见度修饰符，这时constructor关键字是必须的，注解和修饰符要放在它之前。</p><p>实例。创建一个SomeThing类，并通过构造函数传入名称：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class SomeThing constructor(name: String) &#123;  // 类名为 SomeThing</span><br><span class="line">    <span class="comment">// 大括号内是类体构成</span></span><br><span class="line">    <span class="keyword">var</span> type: String = <span class="string">"BigThing"</span></span><br><span class="line">    <span class="keyword">var</span> name = name</span><br><span class="line"></span><br><span class="line">    init &#123;</span><br><span class="line">        println(<span class="string">"初始化名字: $&#123;name&#125;"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">printTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        println(<span class="string">"我是类的函数"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">fun <span class="title">main</span><span class="params">(args: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class="line">    val thing =  SomeThing(<span class="string">"好大一个东西"</span>)</span><br><span class="line">    println(thing.name)</span><br><span class="line">    println(thing.type)</span><br><span class="line">    thing.printTest()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">初始化名字: 好大一个东西</span><br><span class="line">好大一个东西</span><br><span class="line">BigThing</span><br><span class="line">我是类的函数</span><br></pre></td></tr></table></figure><h1 id="4-次构造函数"><a href="#4-次构造函数" class="headerlink" title="4. 次构造函数"></a>4. 次构造函数</h1><p>类也可以有二级构造函数，需要加前缀<code>constructor</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    constructor(parent: Person) &#123;</span><br><span class="line">        parent.children.add(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果类有主构造函数，每个次构造函数都要，或直接或间接通过另一个次构造函数代理主构造函数。在同一个类中代理另一个构造函数使用<code>this</code>关键字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Person(val name: String) &#123;</span><br><span class="line">    constructor (name: String, age:Int) : <span class="keyword">this</span>(name) &#123;</span><br><span class="line">        <span class="comment">// 初始化...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个非抽象类没有声明构造函数(主构造函数或次构造函数)，它会产生一个没有参数的构造函数。构造函数是<code>public</code>。如果你不想你的类有公共的构造函数，你就得声明一个空的主构造函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DontCreateMe</span> <span class="title">private</span> <span class="title">constructor</span> () </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：在 JVM 虚拟机中，如果主构造函数的所有参数都有默认值，编译器会生成一个附加的无参的构造函数，这个构造函数会直接使用默认值。这使得 Kotlin 可以更简单的使用像 Jackson 或者 JPA 这样使用无参构造函数来创建类实例的库。</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Customer(val customerName: String = "")</span><br></pre></td></tr></table></figure><h1 id="5-抽象类"><a href="#5-抽象类" class="headerlink" title="5. 抽象类"></a>5. 抽象类</h1><p>抽象是面向对象编程的特征之一，类本身，或类中的部分成员，都可以声明为<code>abstract</code>的。抽象成员在类中不存在具体的实现。</p><p>注意：无需对抽象类或抽象成员标注<code>open</code>注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">open <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function">open fun <span class="title">f</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">abstract class Derived : Base() &#123;</span><br><span class="line">    <span class="function">override <span class="keyword">abstract</span> fun <span class="title">f</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="6-嵌套类"><a href="#6-嵌套类" class="headerlink" title="6. 嵌套类"></a>6. 嵌套类</h1><p>我们可以把类嵌套在其他类中，看以下实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;                  <span class="comment">// 外部类</span></span><br><span class="line">    <span class="keyword">private</span> val bar: Int = <span class="number">1</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Nested</span> </span>&#123;             <span class="comment">// 嵌套类</span></span><br><span class="line">        <span class="function">fun <span class="title">foo</span><span class="params">()</span> </span>= <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">fun <span class="title">main</span><span class="params">(args: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class="line">    val demo = Outer.Nested().foo() <span class="comment">// 调用格式：外部类.嵌套类.嵌套类方法/属性</span></span><br><span class="line">    println(demo)    <span class="comment">// == 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嵌套类相当于Java中的静态内部类，在其他类中构建Outer的嵌套类使用方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> demo = Outter.Nested()<span class="comment">// 嵌套类，Outter后边没有括号</span></span><br></pre></td></tr></table></figure><h1 id="7-内部类"><a href="#7-内部类" class="headerlink" title="7. 内部类"></a>7. 内部类</h1><p>内部类使用<code>inner</code>关键字来表示。</p><p>内部类会带有一个对外部类的对象的引用，所以内部类可以访问外部类成员属性和成员函数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> val bar: Int = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> v = <span class="string">"成员属性"</span></span><br><span class="line">    <span class="comment">/**嵌套内部类**/</span></span><br><span class="line">    inner <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function">fun <span class="title">foo</span><span class="params">()</span> </span>= bar  <span class="comment">// 访问外部类成员</span></span><br><span class="line">        <span class="function">fun <span class="title">innerTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> o = <span class="keyword">this</span><span class="meta">@Outer</span> <span class="comment">//获取外部类的成员变量</span></span><br><span class="line">            println(<span class="string">"内部类可以引用外部类的成员，例如："</span> + o.v)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">fun <span class="title">main</span><span class="params">(args: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class="line">    val demo = Outer().Inner().foo()</span><br><span class="line">    println(demo) <span class="comment">//   1</span></span><br><span class="line">    val demo2 = Outer().Inner().innerTest()   </span><br><span class="line">    println(demo2)   <span class="comment">// 内部类可以引用外部类的成员，例如：成员属性</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了消除歧义，要访问来自外部作用域的<code>this</code>，我们使用<code>this@label</code>，其中<code>@label</code>是一个 代指<code>this</code>来源的标签。</p><p>内部类与Java中的内部类基本一致，在其他类中构建Outer的内部类使用方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> demo = Outter().Inner();<span class="comment">// 内部类，Outter后边有括号</span></span><br></pre></td></tr></table></figure><h1 id="8-匿名内部类"><a href="#8-匿名内部类" class="headerlink" title="8. 匿名内部类"></a>8. 匿名内部类</h1><p>使用对象表达式来创建匿名内部类，必须使用<code>object</code>关键字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> v = <span class="string">"成员属性"</span></span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">setInterFace</span><span class="params">(test: TestInterFace)</span> </span>&#123;</span><br><span class="line">        test.test()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">TestInterFace</span> </span>&#123;</span><br><span class="line">    <span class="function">fun <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">fun <span class="title">main</span><span class="params">(args: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> test = Test()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 采用对象表达式来创建接口对象，即匿名内部类的实例。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    test.setInterFace(object : TestInterFace &#123;</span><br><span class="line">        <span class="function">override fun <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            println(<span class="string">"对象表达式创建匿名内部类的实例"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-类的修饰符"><a href="#9-类的修饰符" class="headerlink" title="9. 类的修饰符"></a>9. 类的修饰符</h1><p>类的修饰符包括<code>classModifier</code>和<code>accessModifier</code>两大类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// classModifier: 类属性修饰符，标示类本身特性。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span>    <span class="comment">// 抽象类  </span></span><br><span class="line"><span class="keyword">final</span>       <span class="comment">// 类不可继承，默认属性</span></span><br><span class="line"><span class="keyword">enum</span>        <span class="comment">// 枚举类</span></span><br><span class="line">open        <span class="comment">// 类可继承，类默认是final的</span></span><br><span class="line">annotation  <span class="comment">// 注解类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// accessModifier: 访问权限修饰符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>    <span class="comment">// 仅在同一个文件中可见</span></span><br><span class="line"><span class="keyword">protected</span>  <span class="comment">// 同一个文件中或子类可见</span></span><br><span class="line"><span class="keyword">public</span>     <span class="comment">// 所有调用的地方都可见</span></span><br><span class="line">internal   <span class="comment">// 同一个模块中可见</span></span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件名：example.kt</span></span><br><span class="line"><span class="keyword">package</span> foo</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> fun <span class="title">foo</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">// 在 example.kt 内可见</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">var</span> bar: Int = <span class="number">5</span> <span class="comment">// 该属性随处可见</span></span><br><span class="line"></span><br><span class="line">internal val baz = <span class="number">6</span>    <span class="comment">// 相同模块内可见</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将伴随大家进入Kotlin语言的正式学习生涯中，希望大家不要半途而废哦！笔者将Kotlin用于Android开发中，因此将从Android开发的视角叙述相关内容，同时将与Java语言有所联系。  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Kotlin征途" scheme="http://hwb0011.github.io/categories/Kotlin%E5%BE%81%E9%80%94/"/>
    
    
      <category term="Android" scheme="http://hwb0011.github.io/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://hwb0011.github.io/tags/Kotlin/"/>
    
      <category term="编程" scheme="http://hwb0011.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin征途（四）：Kotlin控制语句</title>
    <link href="http://hwb0011.github.io/2019/10/15/Kotlin%E5%BE%81%E9%80%94%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9AKotlin%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    <id>http://hwb0011.github.io/2019/10/15/Kotlin征途（四）：Kotlin控制语句/</id>
    <published>2019-10-15T03:39:15.000Z</published>
    <updated>2020-02-21T03:07:06.771Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文将伴随大家进入Kotlin语言的正式学习生涯中，希望大家不要半途而废哦！笔者将Kotlin用于Android开发中，因此将从Android开发的视角叙述相关内容，同时将与Java语言有所联系。  </p></blockquote><a id="more"></a><h1 id="1-条件控制语句"><a href="#1-条件控制语句" class="headerlink" title="1. 条件控制语句"></a>1. 条件控制语句</h1><h2 id="1-1-if条件语句"><a href="#1-1-if条件语句" class="headerlink" title="1.1 if条件语句"></a>1.1 if条件语句</h2><p>一个 <code>if</code> 语句包含一个布尔表达式和一条或多条语句，完全兼容Java的使用方式，一个<code>if</code>关键字可匹配最多一个<code>else</code>关键字和多个<code>else if</code>关键字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统用法</span></span><br><span class="line"><span class="keyword">var</span> max = a</span><br><span class="line"><span class="keyword">if</span> (a &lt; b) max = b</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 else 和 else if</span></span><br><span class="line"><span class="keyword">var</span> max: Int</span><br><span class="line"><span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">    max = a</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">    max = b</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    max = a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kotlin还具有一个很方便的特性，<code>if</code>表达式可以将结果(执行语句块中的最后一行需为常量值或变量值)直接赋值给一个变量，这也说明我也不需要像Java那种有一个三元操作符<code>? :</code>，因为我们可以使用<code>if</code>来简单实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一般用法</span></span><br><span class="line">val max = <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">    print(<span class="string">"Choose a"</span>)</span><br><span class="line">    a</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    print(<span class="string">"Choose b"</span>)</span><br><span class="line">    b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于取代Java中的三元操作符 ? :</span></span><br><span class="line">val max = <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure><h2 id="1-2-when条件语句"><a href="#1-2-when条件语句" class="headerlink" title="1.2 when条件语句"></a>1.2 when条件语句</h2><p><code>when</code>将它的参数和所有的分支条件顺序比较，直到某个分支满足条件。</p><p><code>when</code>既可以被当做表达式使用也可以被当做语句使用。如果它被当做表达式，符合条件的分支的值就是整个表达式的值，如果当做语句使用， 则忽略个别分支的值。</p><p><code>when</code>类似其他语言的<code>switch</code>操作符。其最简单的形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">when (x) &#123;</span><br><span class="line">    <span class="number">1</span> -&gt; print(<span class="string">"x == 1"</span>)</span><br><span class="line">    <span class="number">2</span> -&gt; print(<span class="string">"x == 2"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">        print(<span class="string">"x 不是 1 ，也不是 2"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>when</code>中，<code>else</code>同<code>switch</code>的<code>default</code>。如果其他分支都不满足条件将会求值<code>else</code>分支。</p><p>如果很多分支需要用相同的方式处理，则可以把多个分支条件放在一起，用逗号分隔：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">when (x) &#123;</span><br><span class="line">    <span class="number">0</span>, <span class="number">1</span> -&gt; print(<span class="string">"x == 0 or x == 1"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; print(<span class="string">"otherwise"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>when</code>也可以用来取代<code>if-else if</code>链。 如果不提供参数，所有的分支条件都是简单的布尔表达式，而当一个分支的条件为真时则执行该分支：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">when &#123;</span><br><span class="line">    x.isOdd() -&gt; print(<span class="string">"x is odd"</span>)</span><br><span class="line">    x.isEven() -&gt; print(<span class="string">"x is even"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; print(<span class="string">"x is funny"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-循环控制语句"><a href="#2-循环控制语句" class="headerlink" title="2. 循环控制语句"></a>2. 循环控制语句</h1><h2 id="2-1-for循环语句"><a href="#2-1-for循环语句" class="headerlink" title="2.1 for循环语句"></a>2.1 for循环语句</h2><p><code>for</code>循环可以对任何提供迭代器<code>iterator</code>的对象进行遍历，条件的指定用的是<code>in</code>运算符来确定循环次数（关于<code>in</code>运算符的其他用法可看本文<a href="##3-2-1-in运算符">3.2.1 in运算符</a>），语法为<code>for (item in collection) print(item)</code>，循环体可以是一个代码块:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (item: Int in ints) &#123;</span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上所述，<code>for</code>可以循环遍历任何提供了迭代器的对象，使用方式与Java中的<code>foreach</code>语句非常相像。如果你想要通过索引遍历一个数组或者一个<code>list</code>，你可以这么做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i in array.indices) &#123;</span><br><span class="line">    print(array[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这种”在区间上遍历”会编译成优化的实现而不会创建额外对象。或者你可以用库函数<code>withIndex</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ((index, value) in array.withIndex()) &#123;</span><br><span class="line">    println(<span class="string">"the element at $index is $value"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而要达成在Java中平常经常使用的形式，需要使用区间来完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常循环：</span></span><br><span class="line"><span class="keyword">for</span> (i in <span class="number">1</span>..<span class="number">4</span>) print(i) <span class="comment">// 打印结果为: "1234"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果你需要按反序遍历整数可以使用标准库中的 downTo() 函数:</span></span><br><span class="line"><span class="keyword">for</span> (i in <span class="number">4</span> downTo <span class="number">1</span>) print(i) <span class="comment">// 打印结果为: "4321"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也支持指定步长：</span></span><br><span class="line"><span class="keyword">for</span> (i in <span class="number">1</span>..<span class="number">4</span> step <span class="number">2</span>) print(i) <span class="comment">// 打印结果为: "13"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i in <span class="number">4</span> downTo <span class="number">1</span> step <span class="number">2</span>) print(i) <span class="comment">// 打印结果为: "42"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果循环中不要最后一个范围区间的值可以使用 until 函数:</span></span><br><span class="line"><span class="keyword">for</span> (i in <span class="number">1</span> until <span class="number">4</span>) print(i) <span class="comment">// 打印结果为: "123"</span></span><br></pre></td></tr></table></figure><h2 id="2-2-while与do…while循环语句"><a href="#2-2-while与do…while循环语句" class="headerlink" title="2.2 while与do…while循环语句"></a>2.2 while与do…while循环语句</h2><p><code>while</code>是最基本的循环，它的结构为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( 布尔表达式 ) &#123;</span><br><span class="line">  <span class="comment">//循环内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>while</code>语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。<code>do…while</code>循环和<code>while</code>循环相似，不同的是，<code>do…while</code>循环至少会执行一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">       <span class="comment">//代码语句</span></span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">main</span><span class="params">(args: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class="line">    println(<span class="string">"----while 使用-----"</span>)</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">5</span></span><br><span class="line">    <span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        print( x--)</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">"----do...while 使用-----"</span>)</span><br><span class="line">    <span class="keyword">var</span> y = <span class="number">5</span></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        print(y--)</span><br><span class="line">    &#125; <span class="keyword">while</span>(y&gt;<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">----while 使用-----</span><br><span class="line">54321</span><br><span class="line">----do...while 使用-----</span><br><span class="line">54321</span><br></pre></td></tr></table></figure><h1 id="3-其他控制语句"><a href="#3-其他控制语句" class="headerlink" title="3. 其他控制语句"></a>3. 其他控制语句</h1><h2 id="3-1-返回和跳转"><a href="#3-1-返回和跳转" class="headerlink" title="3.1 返回和跳转"></a>3.1 返回和跳转</h2><p>Kotlin 有三种结构化跳转表达式：</p><ul><li><code>return</code>。默认从最直接包围它的函数或者匿名函数返回。</li><li><code>break</code>。终止最直接包围它的循环。</li><li><code>continue</code>。继续下一次最直接包围它的循环。</li></ul><p>在循环中 Kotlin 支持传统的 break 和 continue 操作符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">main</span><span class="params">(args: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (i in <span class="number">1</span>..<span class="number">10</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i==<span class="number">3</span>) <span class="keyword">continue</span>  <span class="comment">// i 为 3 时跳过当前循环，继续下一次循环</span></span><br><span class="line">        println(i)</span><br><span class="line">        <span class="keyword">if</span> (i&gt;<span class="number">5</span>) <span class="keyword">break</span>   <span class="comment">// i 为 6 时 跳出循环</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p>在 Kotlin 中任何表达式都可以用标签（label）来标记。 标签的格式为标识符后跟<code>@</code>符号，例如：<code>abc@</code>、<code>fooBar@</code>都是有效的标签。 要为一个表达式加标签，我们只要在其前加标签即可。现在，我们可以用标签限制<code>break</code>或者<code>continue</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">loop@ <span class="keyword">for</span> (i in <span class="number">1</span>..<span class="number">100</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j in <span class="number">1</span>..<span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (……) <span class="keyword">break</span><span class="meta">@loop</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标签限制的<code>break</code>跳转到刚好位于该标签指定的循环后面的执行点。<code>continue</code>继续标签指定的循环的下一次迭代。</p><p>Kotlin 有函数字面量、局部函数和对象表达式。因此 Kotlin 的函数可以被嵌套。 标签限制的<code>return</code>允许我们从外层函数返回。 最重要的一个用途就是从<code>lambda</code>表达式中返回。回想一下我们这么写的时候：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ints.forEach &#123;</span><br><span class="line">        <span class="keyword">if</span> (it == <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line">        print(it)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个<code>return</code>表达式从最直接包围它的函数即<code>foo</code>中返回。 （注意，这种非局部的返回只支持传给内联函数的<code>lambda</code>表达式。） 如果我们需要从<code>lambda</code>表达式中返回，我们必须给它加标签并用以限制<code>return</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ints.forEach lit@ &#123;</span><br><span class="line">        <span class="keyword">if</span> (it == <span class="number">0</span>) <span class="keyword">return</span><span class="meta">@lit</span></span><br><span class="line">        print(it)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，它只会从<code>lambda</code>表达式中返回。通常情况下使用隐式标签更方便。 该标签与接受该<code>lambda</code>的函数同名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ints.forEach &#123;</span><br><span class="line">        <span class="keyword">if</span> (it == <span class="number">0</span>) <span class="keyword">return</span><span class="meta">@forEach</span></span><br><span class="line">        print(it)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者，我们用一个匿名函数替代<code>lambda</code>表达式。 匿名函数内部的<code>return</code>语句将从该匿名函数自身返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ints.forEach(fun(value: Int) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line">        print(value)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当要返一个回值的时候，解析器优先选用标签限制的<code>return</code>，即</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span><span class="meta">@a</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>意为”从标签<code>@a</code>返回 1”，而不是”返回一个标签标注的表达式<code>@a 1</code>“。</p><h2 id="3-2-条件指定的几种特殊方式"><a href="#3-2-条件指定的几种特殊方式" class="headerlink" title="3.2 条件指定的几种特殊方式"></a>3.2 条件指定的几种特殊方式</h2><h3 id="3-2-1-in运算符"><a href="#3-2-1-in运算符" class="headerlink" title="3.2.1 in运算符"></a>3.2.1 in运算符</h3><p>使用<code>in</code>运算符来检测某个数字是否在指定区间内，区间格式为<code>x..y</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">main</span><span class="params">(args: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class="line">    val x = <span class="number">5</span></span><br><span class="line">    val y = <span class="number">9</span></span><br><span class="line">    <span class="keyword">if</span> (x in <span class="number">1</span>..<span class="number">8</span>) &#123;</span><br><span class="line">        println(<span class="string">"x 在区间内"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    when (y) &#123;</span><br><span class="line">        in <span class="number">1</span>..<span class="number">10</span> -&gt; print(<span class="string">"y 在区间内"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x 在区间内</span><br><span class="line">y 在区间内</span><br></pre></td></tr></table></figure><p><code>in</code>运算符也可以用来检测某个元素是否存在于指定集合或列表中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">main</span><span class="params">(args: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class="line">    val items = setOf(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"kiwi"</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"banana"</span> in items) &#123;</span><br><span class="line">        println(<span class="string">"香蕉"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    when &#123;</span><br><span class="line">        <span class="string">"orange"</span> in items -&gt; println(<span class="string">"橘子"</span>)</span><br><span class="line">        <span class="string">"apple"</span> in items -&gt; println(<span class="string">"苹果"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">香蕉</span><br><span class="line">苹果</span><br></pre></td></tr></table></figure><h3 id="3-2-2-is运算符"><a href="#3-2-2-is运算符" class="headerlink" title="3.2.2 is运算符"></a>3.2.2 is运算符</h3><p><code>is</code>运算符用来检测一个值是<code>is</code>或者不是<code>!is</code>一个特定类型的值。注意： 由于智能转换，你可以访问该类型的方法和属性而无需任何额外的检测。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">main</span><span class="params">(args: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class="line">    val x = <span class="string">"string obj 1"</span></span><br><span class="line">    val y = <span class="string">"string obj 2"</span></span><br><span class="line">    <span class="keyword">if</span> (x !is Int) &#123;</span><br><span class="line">        println(<span class="string">"x不是整型"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    when (y) &#123;</span><br><span class="line">        is String -&gt; println(<span class="string">"y是字符串"</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="keyword">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x不是整型</span><br><span class="line">y是字符串</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将伴随大家进入Kotlin语言的正式学习生涯中，希望大家不要半途而废哦！笔者将Kotlin用于Android开发中，因此将从Android开发的视角叙述相关内容，同时将与Java语言有所联系。  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Kotlin征途" scheme="http://hwb0011.github.io/categories/Kotlin%E5%BE%81%E9%80%94/"/>
    
    
      <category term="Android" scheme="http://hwb0011.github.io/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://hwb0011.github.io/tags/Kotlin/"/>
    
      <category term="编程" scheme="http://hwb0011.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>开发书籍阅读总结（一）：HeadFirst设计模式</title>
    <link href="http://hwb0011.github.io/2019/10/01/%E5%BC%80%E5%8F%91%E4%B9%A6%E7%B1%8D%E9%98%85%E8%AF%BB%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9AHeadFirst%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hwb0011.github.io/2019/10/01/开发书籍阅读总结（一）：HeadFirst设计模式/</id>
    <published>2019-10-01T10:53:53.000Z</published>
    <updated>2020-02-21T03:06:16.521Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文用于记录本人阅读完HeadFirst设计模式一书后对此书的总结，总结系个人理解并简化提炼，方便使用设计模式时速查，如有错漏，请积极指出，本人将虚心接受并及时改正。  </p></blockquote><a id="more"></a><h1 id="1-策略模式"><a href="#1-策略模式" class="headerlink" title="1. 策略模式"></a>1. 策略模式</h1><h2 id="1-1-使用前提"><a href="#1-1-使用前提" class="headerlink" title="1.1 使用前提"></a>1.1 使用前提</h2><p>多个同类型的不同对象，具有不同表现的同类行为。</p><h2 id="1-2-使用方法"><a href="#1-2-使用方法" class="headerlink" title="1.2 使用方法"></a>1.2 使用方法</h2><ol><li>建立父类，将对象中相同的方法整合到父类实现。</li><li>不同的同类型行为建立对应的接口。</li><li>为不同行为实现相应类型的行为接口。</li><li>父类持有行为接口对象，子类初始化具体的行为对象。</li></ol><h2 id="1-3-解决的问题"><a href="#1-3-解决的问题" class="headerlink" title="1.3 解决的问题"></a>1.3 解决的问题</h2><p>具有相同属性，但行为（功能）不同的同类型事物。</p><h2 id="1-4-案例类图"><a href="#1-4-案例类图" class="headerlink" title="1.4 案例类图"></a>1.4 案例类图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/策略模式类图.jpg" alt="策略模式类图" title="">                </div>                <div class="image-caption">策略模式类图</div>            </figure><h1 id="2-观察者模式"><a href="#2-观察者模式" class="headerlink" title="2. 观察者模式"></a>2. 观察者模式</h1><h2 id="2-1-使用前提"><a href="#2-1-使用前提" class="headerlink" title="2.1 使用前提"></a>2.1 使用前提</h2><p>某个对象的属性会对其他对象产生影响，且该属性会产生变化。</p><h2 id="2-2-使用方法"><a href="#2-2-使用方法" class="headerlink" title="2.2 使用方法"></a>2.2 使用方法</h2><ol><li>建立被观察者接口（注册与移除观察者，通知观察者变化）与观察者接口（观察到变化时触发行为）。</li><li>影响其他对象的对象实现被观察者接口，属性变化时通知观察者。</li><li>被影响的对象实现观察者接口，实现观察到变化时触发的行为。</li></ol><h2 id="2-3-解决的问题"><a href="#2-3-解决的问题" class="headerlink" title="2.3 解决的问题"></a>2.3 解决的问题</h2><p>当一个对象属性状态改变时，所有依赖他的对象都会收到通知并触发行为。</p><h2 id="2-4-案例类图"><a href="#2-4-案例类图" class="headerlink" title="2.4 案例类图"></a>2.4 案例类图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/观察者模式类图.jpg" alt="观察者模式类图" title="">                </div>                <div class="image-caption">观察者模式类图</div>            </figure><h1 id="3-装饰者模式"><a href="#3-装饰者模式" class="headerlink" title="3. 装饰者模式"></a>3. 装饰者模式</h1><h2 id="3-1-使用前提"><a href="#3-1-使用前提" class="headerlink" title="3.1 使用前提"></a>3.1 使用前提</h2><p>已有类具备基本的属性及功能，但新需求需要在原有类的基础上增加属性及功能，新需求不想影响原有类。</p><h2 id="3-2-使用方式"><a href="#3-2-使用方式" class="headerlink" title="3.2 使用方式"></a>3.2 使用方式</h2><ol><li>为原有类A提取父类B，提取出关键方法；</li><li>新建类C继承父类B，实现提取出的关键方法，增加新属性及功能完成新需求；</li><li>新建类D继承父类C，持有一个父类B对象，构造方法需要父类B对象作为参数；</li><li>创建类A的实例并用于创建类D的实例，完成新需求，类D是类A的装饰者。</li></ol><h2 id="3-3-解决的问题"><a href="#3-3-解决的问题" class="headerlink" title="3.3 解决的问题"></a>3.3 解决的问题</h2><p>在不修改原有类的代码的情况下，为原有类赋予新的属性及功能，达到不影响原有系统的情况下完成新的需求。</p><h2 id="3-4-案例类图"><a href="#3-4-案例类图" class="headerlink" title="3.4 案例类图"></a>3.4 案例类图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/装饰者模式类图.png" alt="装饰者模式类图" title="">                </div>                <div class="image-caption">装饰者模式类图</div>            </figure><h1 id="4-工厂模式"><a href="#4-工厂模式" class="headerlink" title="4. 工厂模式"></a>4. 工厂模式</h1><h2 id="4-1-使用前提"><a href="#4-1-使用前提" class="headerlink" title="4.1 使用前提"></a>4.1 使用前提</h2><p>有多个具有不同属性或构造方法但有相似功能的同类产物，需根据条件创建不同的对象。</p><h2 id="4-2-使用方式"><a href="#4-2-使用方式" class="headerlink" title="4.2 使用方式"></a>4.2 使用方式</h2><ol><li>为所有不同的产物提取父类；</li><li>建立工厂父类，统一工厂的创建目标产物对象的方法；</li><li>为各个产物建立工厂类，工厂实现创建目标产物对象的方法，完成目标产物对象的构造；</li><li>根据条件使用相应的工厂构造出产物。</li></ol><h2 id="4-3-解决的问题"><a href="#4-3-解决的问题" class="headerlink" title="4.3 解决的问题"></a>4.3 解决的问题</h2><p>需要频繁根据条件创建同类别的不同类的对象时，容易产生大量的重复代码，工厂模式可以将对象的创建过程集中在工厂中，上层只需要使用工厂即可。</p><h2 id="4-4-案例类图"><a href="#4-4-案例类图" class="headerlink" title="4.4 案例类图"></a>4.4 案例类图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/工厂模式类图.png" alt="工厂模式类图" title="">                </div>                <div class="image-caption">工厂模式类图</div>            </figure><h1 id="5-单例模式"><a href="#5-单例模式" class="headerlink" title="5. 单例模式"></a>5. 单例模式</h1><h2 id="5-1-使用前提"><a href="#5-1-使用前提" class="headerlink" title="5.1 使用前提"></a>5.1 使用前提</h2><p>一个类只能有一个实例，且这个实例是全局的（全世界独一无二）。</p><h2 id="5-2-使用方式"><a href="#5-2-使用方式" class="headerlink" title="5.2 使用方式"></a>5.2 使用方式</h2><ol><li>经典实现：构造方法私有化，静态变量保存单例，提供获取单例的方法，方法中根据单例变量是否为空决定是否调用构造方法；</li><li>改善多线程：在经典实现的基础上对单例变量及构造方法进行双重加锁；</li><li>最佳实现：在经典实现的基础上改造，单例变量由一个静态内部类持有并构造，根据java的类加载机制，第一次获取单例时将触发静态内部类调用单例的构造方法。(延迟加载，线程安全，)</li></ol><h2 id="5-3-解决的问题"><a href="#5-3-解决的问题" class="headerlink" title="5.3 解决的问题"></a>5.3 解决的问题</h2><p>全局只存在一个该类的实例，保证数据或处理过程的唯一性，并且可以全局使用该实例而无需另外创建实例。</p><h2 id="5-4-最佳实现简单例子"><a href="#5-4-最佳实现简单例子" class="headerlink" title="5.4 最佳实现简单例子"></a>5.4 最佳实现简单例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-命令模式"><a href="#6-命令模式" class="headerlink" title="6. 命令模式"></a>6. 命令模式</h1><h2 id="6-1-使用前提"><a href="#6-1-使用前提" class="headerlink" title="6.1 使用前提"></a>6.1 使用前提</h2><p>事件的处理过程需要隐藏，仅暴露事件的整体调用，类似黑盒。</p><h2 id="6-2-使用方式"><a href="#6-2-使用方式" class="headerlink" title="6.2 使用方式"></a>6.2 使用方式</h2><ol><li>为事件整体建立控制器类，将各个部分整合出执行命令的方法；</li><li>将事件的各个过程建立相应的命令类，并将它们的实例传递入控制器的执行方法中；</li><li>控制器的执行方法中遍历所有的命令并调用它们的执行方法。</li></ol><h2 id="6-3-解决的问题"><a href="#6-3-解决的问题" class="headerlink" title="6.3 解决的问题"></a>6.3 解决的问题</h2><p>将各个过程封装避免暴露而产生其他问题，让事件的进行顺利无误，但缺乏灵活与可扩展性。</p><h2 id="6-4-案例类图"><a href="#6-4-案例类图" class="headerlink" title="6.4 案例类图"></a>6.4 案例类图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/命令模式类图.png" alt="命令模式类图" title="">                </div>                <div class="image-caption">命令模式类图</div>            </figure><h1 id="7-适配器模式"><a href="#7-适配器模式" class="headerlink" title="7. 适配器模式"></a>7. 适配器模式</h1><h2 id="7-1-使用前提"><a href="#7-1-使用前提" class="headerlink" title="7.1 使用前提"></a>7.1 使用前提</h2><p>能够直接得到的对象不是所需或所能够处理的对象，需要将该对象包装后再应用。</p><h2 id="7-2-使用方式"><a href="#7-2-使用方式" class="headerlink" title="7.2 使用方式"></a>7.2 使用方式</h2><ol><li>为得到的对象A建立一个适配器类B，类B拥有满足所需的属性和方法；</li><li>类B的构造方法中接受一个对象A，并将对象A的属性与方法取出，完成所需的属性赋值与方法处理；</li><li>使用时，用得到的对象A来构建一个适配器B，并用适配器B来满足所需。</li></ol><h2 id="7-3-解决的问题"><a href="#7-3-解决的问题" class="headerlink" title="7.3 解决的问题"></a>7.3 解决的问题</h2><p>让本不能满足需求或不能被处理的对象变得满足需求或可以被处理。</p><h2 id="7-4-案例类图"><a href="#7-4-案例类图" class="headerlink" title="7.4 案例类图"></a>7.4 案例类图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/适配器模式类图.png" alt="适配器模式类图" title="">                </div>                <div class="image-caption">适配器模式类图</div>            </figure><h1 id="8-外观模式"><a href="#8-外观模式" class="headerlink" title="8 外观模式"></a>8 外观模式</h1><h2 id="8-1-使用前提"><a href="#8-1-使用前提" class="headerlink" title="8.1 使用前提"></a>8.1 使用前提</h2><p>一个系统可完成多个功能，每个功能由多个子系统配合完成，将每个功能单独封装可以让系统更便于使用。</p><h2 id="8-2-使用方式"><a href="#8-2-使用方式" class="headerlink" title="8.2 使用方式"></a>8.2 使用方式</h2><ol><li>为系统建立外观类，为系统的各个功能构建方法；</li><li>外观类的功能方法中整合子系统完成系统的该功能；</li><li>使用时仅暴露外观类，子系统隐藏，方便用户直接使用系统功能。</li></ol><h2 id="8-3-解决的问题"><a href="#8-3-解决的问题" class="headerlink" title="8.3 解决的问题"></a>8.3 解决的问题</h2><p>为系统提供一个上层接口，方便用户调用，让系统底层子接口易于使用。</p><h2 id="8-4-案例类图"><a href="#8-4-案例类图" class="headerlink" title="8.4 案例类图"></a>8.4 案例类图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/外观模式类图.png" alt="外观模式类图" title="">                </div>                <div class="image-caption">外观模式类图</div>            </figure><h1 id="9-模板方法模式"><a href="#9-模板方法模式" class="headerlink" title="9 模板方法模式"></a>9 模板方法模式</h1><h2 id="9-1-使用前提"><a href="#9-1-使用前提" class="headerlink" title="9.1 使用前提"></a>9.1 使用前提</h2><p>多个事件具有多个相似的过程，并且这些事件发生的场景类似。</p><h2 id="9-2-使用方式"><a href="#9-2-使用方式" class="headerlink" title="9.2 使用方式"></a>9.2 使用方式</h2><ol><li>为这些事件提取父类，这些事件相同的过程由父类统一实现；</li><li>事件的过程相似但区别细微，这些过程可由父类构建抽象方法，由子类自行实现；</li><li>事件有需要根据条件执行或执行某方法后需要执行额外方法时，可用Hook实现。</li></ol><h2 id="9-3-解决的问题"><a href="#9-3-解决的问题" class="headerlink" title="9.3 解决的问题"></a>9.3 解决的问题</h2><p>让相似的事件抽离成算法框架，具体子步骤可由子类实现不同的具体行为。</p><h2 id="9-4-案例类图"><a href="#9-4-案例类图" class="headerlink" title="9.4 案例类图"></a>9.4 案例类图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/模板方法模式类图.png" alt="模板方法模式类图" title="">                </div>                <div class="image-caption">模板方法模式类图</div>            </figure><h1 id="10-迭代器模式"><a href="#10-迭代器模式" class="headerlink" title="10 迭代器模式"></a>10 迭代器模式</h1><h2 id="10-1-使用前提"><a href="#10-1-使用前提" class="headerlink" title="10.1 使用前提"></a>10.1 使用前提</h2><p>需要遍历集合中的对象，但不想暴露对象的存储方式。</p><h2 id="10-2-使用方式"><a href="#10-2-使用方式" class="headerlink" title="10.2 使用方式"></a>10.2 使用方式</h2><ol><li>建立迭代器类，持有目标对象的集合（列表/图等等）；</li><li>迭代器类实现安卓系统提供的Iterator接口，并实现相应方法。</li></ol><blockquote><p>此模式有系统接口帮助使用，方便快捷。</p></blockquote><h2 id="10-3-解决的问题"><a href="#10-3-解决的问题" class="headerlink" title="10.3 解决的问题"></a>10.3 解决的问题</h2><p>提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。</p><h2 id="10-4-案例类图"><a href="#10-4-案例类图" class="headerlink" title="10.4 案例类图"></a>10.4 案例类图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/迭代器模式类图.png" alt="迭代器模式类图" title="">                </div>                <div class="image-caption">迭代器模式类图</div>            </figure><h1 id="11-组合模式"><a href="#11-组合模式" class="headerlink" title="11 组合模式"></a>11 组合模式</h1><h2 id="11-1-使用前提"><a href="#11-1-使用前提" class="headerlink" title="11.1 使用前提"></a>11.1 使用前提</h2><p>集合的元素也可能是一个集合，需要对集合的各个元素进行处理。</p><h2 id="11-2-使用方式"><a href="#11-2-使用方式" class="headerlink" title="11.2 使用方式"></a>11.2 使用方式</h2><ol><li>为集合类与元素类提取组件接口，包含集合类和元素类共同的性质与功能；</li><li>让集合类与元素类均实现组件接口，集合类将属于元素类的性质与功能委托给自己的元素去完成，元素类处理集合类的性质与功能时将自身当成大小为1的集合。</li></ol><h2 id="11-3-解决的问题"><a href="#11-3-解决的问题" class="headerlink" title="11.3 解决的问题"></a>11.3 解决的问题</h2><p>让集合与元素可以用同样的方式被使用到业务中去。</p><p><em>组合模式与迭代器模式共同使用可以达到1+1&gt;2的效果</em></p><h2 id="11-4-案例类图"><a href="#11-4-案例类图" class="headerlink" title="11.4 案例类图"></a>11.4 案例类图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/组合模式类图.png" alt="组合模式类图" title="">                </div>                <div class="image-caption">组合模式类图</div>            </figure><h1 id="12-状态模式"><a href="#12-状态模式" class="headerlink" title="12 状态模式"></a>12 状态模式</h1><h2 id="12-1-使用前提"><a href="#12-1-使用前提" class="headerlink" title="12.1 使用前提"></a>12.1 使用前提</h2><p>一个系统的行为由多个不同但相互联系并能在一定情况下转变的状态所控制。</p><h2 id="12-2-使用方式"><a href="#12-2-使用方式" class="headerlink" title="12.2 使用方式"></a>12.2 使用方式</h2><ol><li>将系统中会受到影响的行为方法提取到一个状态接口中；</li><li>根据系统状态的不同建立不同的状态类，状态类实现状态接口，并根据需要实现相应的行为方法；</li><li>当系统状态变化时，将委托对应的状态类完成相应的行为。</li></ol><h2 id="12-3-解决的问题"><a href="#12-3-解决的问题" class="headerlink" title="12.3 解决的问题"></a>12.3 解决的问题</h2><p>让对象在内部状态改变时，轻易的改变自己的行为。</p><h2 id="12-4-案例类图"><a href="#12-4-案例类图" class="headerlink" title="12.4 案例类图"></a>12.4 案例类图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/状态模式类图.png" alt="状态模式类图" title="">                </div>                <div class="image-caption">状态模式类图</div>            </figure><h1 id="13-代理模式"><a href="#13-代理模式" class="headerlink" title="13 代理模式"></a>13 代理模式</h1><h2 id="13-1-使用前提"><a href="#13-1-使用前提" class="headerlink" title="13.1 使用前提"></a>13.1 使用前提</h2><p>目标对象不可以直接访问，但需要使用该对象的信息或功能。</p><h2 id="13-2-使用方式"><a href="#13-2-使用方式" class="headerlink" title="13.2 使用方式"></a>13.2 使用方式</h2><ol><li>在目标对象的有效区域内，建立目标对象的代理类，代理类持有目标对象或拥有访问目标对象的能力，并将目标对象的属性及功能包装后暴露出去；</li><li>在使用方也可建立使用代理类，用于对接目标代理类，也可直接访问目标代理类，最终完成对目标对象的间接访问。</li></ol><h2 id="13-3-解决的问题"><a href="#13-3-解决的问题" class="headerlink" title="13.3 解决的问题"></a>13.3 解决的问题</h2><p>让代理访问目标对象，可保证访问的成功与安全，用于需要远程访问/直接访问开销巨大/需要安全保障的对象。</p><h2 id="13-4-案例类图"><a href="#13-4-案例类图" class="headerlink" title="13.4 案例类图"></a>13.4 案例类图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/代理模式类图.png" alt="代理模式类图" title="">                </div>                <div class="image-caption">代理模式类图</div>            </figure><h1 id="14-设计模式总结"><a href="#14-设计模式总结" class="headerlink" title="14 设计模式总结"></a>14 设计模式总结</h1><h2 id="14-1-复合模式"><a href="#14-1-复合模式" class="headerlink" title="14.1 复合模式"></a>14.1 复合模式</h2><p>模式与模式可以携手合作，多个模式的复合模式就成了架构，让合适的模式出现在合适的位置就是优秀的架构。</p><p>书中提及了MVC，将设计模式称为MVC的钥匙，解读了MVC中对于设计模式的复合使用。在这字里行间，MVP和MVVM都可以拆解出一个个的设计模式，设计模式就是框架的基础，框架就是模式与模式的复合。</p><h2 id="14-2-与设计模式相处"><a href="#14-2-与设计模式相处" class="headerlink" title="14.2 与设计模式相处"></a>14.2 与设计模式相处</h2><ol><li>用模式思考；</li><li>保持简单；</li><li>模式不是万能的；</li><li>明确何时该使用模式；</li><li>利用模式进行重构；</li><li>删除不需要的；</li><li>现在不需要就别用。</li></ol><blockquote><p><strong>总结</strong>   </p><ol><li>知道能不能用；</li><li>知道该不该用；</li><li>把握用不用的度。</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文用于记录本人阅读完HeadFirst设计模式一书后对此书的总结，总结系个人理解并简化提炼，方便使用设计模式时速查，如有错漏，请积极指出，本人将虚心接受并及时改正。  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://hwb0011.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="编程" scheme="http://hwb0011.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Java" scheme="http://hwb0011.github.io/tags/Java/"/>
    
      <category term="设计模式" scheme="http://hwb0011.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin征途（三）：Kotlin基本类型</title>
    <link href="http://hwb0011.github.io/2019/09/15/Kotlin%E5%BE%81%E9%80%94%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9AKotlin%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/"/>
    <id>http://hwb0011.github.io/2019/09/15/Kotlin征途（三）：Kotlin基本类型/</id>
    <published>2019-09-15T07:41:08.000Z</published>
    <updated>2020-02-21T03:07:00.930Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文将伴随大家进入Kotlin语言的正式学习生涯中，希望大家不要半途而废哦！笔者将Kotlin用于Android开发中，因此将从Android开发的视角叙述相关内容，同时将与Java语言有所联系。  </p></blockquote><a id="more"></a><h1 id="1-Kotlin基本类型"><a href="#1-Kotlin基本类型" class="headerlink" title="1. Kotlin基本类型"></a>1. Kotlin基本类型</h1><h2 id="1-1-数字"><a href="#1-1-数字" class="headerlink" title="1.1 数字"></a>1.1 数字</h2><h3 id="1-1-1-整型"><a href="#1-1-1-整型" class="headerlink" title="1.1.1 整型"></a>1.1.1 整型</h3><p>整型，即整数，与Java类似，有四种内置的整型类，表示的数值范围有所不同：</p><table><thead><tr><th>类型</th><th>位数</th><th>可表示的最小值</th><th>可表示的最大值</th></tr></thead><tbody><tr><td>Byte</td><td>8</td><td>-128</td><td>127</td></tr><tr><td>Short</td><td>16</td><td>-32768</td><td>32767</td></tr><tr><td>Int</td><td>32</td><td>-2,147,483,648 (-2<sup>31</sup>)</td><td>2,147,483,647 (2<sup>31</sup>-1)</td></tr><tr><td>Long</td><td>64</td><td>-9,223,372,036,854,775,808 (-2<sup>63</sup>)</td><td>9,223,372,036,854,775,807 (2<sup>63</sup>-1)</td></tr></tbody></table><p>所有以未超出<code>Int</code>最大值的整型值初始化的变量都会推断为<code>Int</code>类型。如果初始值超过了其最大值，那么推断为<code>Long</code>类型。 如需显式指定<code>Long</code>型值，请在该值后追加<code>l</code>或<code>L</code>后缀。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val one = <span class="number">1</span> <span class="comment">// Int</span></span><br><span class="line">val threeBillion = <span class="number">3000000000</span> <span class="comment">// Long</span></span><br><span class="line">val oneLong = <span class="number">1L</span> <span class="comment">// Long</span></span><br><span class="line">val oneByte: Byte = <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="1-1-2-浮点型"><a href="#1-1-2-浮点型" class="headerlink" title="1.1.2 浮点型"></a>1.1.2 浮点型</h3><p>Kotlin提供了<code>Float</code>与<code>Double</code>类型。 根据<code>IEEE 754</code>标准， 两种浮点类型的十进制位数（即可以存储多少位十进制数）不同：</p><table><thead><tr><th>类型</th><th>位数</th><th>可表示的最小值</th><th>可表示的最大值</th></tr></thead><tbody><tr><td>Float</td><td>32</td><td>1.4E-45 (2<sup>-149</sup>)</td><td>3.4028235E+38 (2<sup>128</sup>-1)</td></tr><tr><td>Double</td><td>64</td><td>4.9E-324 (2<sup>-1074</sup>)</td><td>1.7976931348623157E+308 (2<sup>1024</sup>-1)</td></tr></tbody></table><p>与Java所不同的是，Kotlin中的数字<strong>没有</strong><code>隐式拓宽转换</code>。 例如，具有<code>Double</code>参数的函数只能对<code>Double</code>值调用，而不能对<code>Float</code>、 <code>Int</code>或者其他数字值调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">fun <span class="title">printDouble</span><span class="params">(d: Double)</span> </span>&#123; print(d) &#125;</span><br><span class="line"></span><br><span class="line">    val i = <span class="number">1</span>    </span><br><span class="line">    val d = <span class="number">1.1</span></span><br><span class="line">    val f = <span class="number">1.1f</span></span><br><span class="line"></span><br><span class="line">    printDouble(d)</span><br><span class="line">    printDouble(i) <span class="comment">// 错误：类型不匹配</span></span><br><span class="line">    printDouble(f) <span class="comment">// 错误：类型不匹配</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-1-3-字面常量"><a href="#1-1-3-字面常量" class="headerlink" title="1.1.3 字面常量"></a>1.1.3 字面常量</h3><p><code>字面常量</code>这个词很有意思，字面，代表浅显不深入。在Java中，字面常量指的就是普通的数字、字符、字符串，不是这里说的基本类型。比如下面一段Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1024</span></span><br><span class="line"><span class="keyword">double</span> b = <span class="number">20.48</span></span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'A'</span></span><br><span class="line">String d = <span class="string">"Hello World!"</span></span><br></pre></td></tr></table></figure><p>上述代码中，<code>=</code>右边的就是字面常量，而<code>=</code>左边的是变量。同理，Kotlin中也是这样的情况，下面是所有的字面常量：</p><ul><li>十进制：123</li><li>长整型以大写的 L 结尾：123L</li><li>16 进制以 0x 开头：0x0F</li><li>2 进制以 0b 开头：0b00001011</li></ul><p><em>注意：8进制不支持</em></p><p>在Kotlin里有一个很方便的设定，你可以使用下划线使数字常量更易读，而这些下划线并不会编入你的软件中，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val oneMillion = <span class="number">1_000_000</span></span><br><span class="line">val creditCardNumber = <span class="number">1234_5678_9012_3456L</span></span><br><span class="line">val socialSecurityNumber = <span class="number">999_99_9999L</span></span><br><span class="line">val hexBytes = <span class="number">0xFF_EC_DE_5E</span></span><br><span class="line">val bytes = <span class="number">0b11010010_01101001_10010100_10010010</span></span><br></pre></td></tr></table></figure><h2 id="1-2-布尔"><a href="#1-2-布尔" class="headerlink" title="1.2 布尔"></a>1.2 布尔</h2><p>Kotlin中的布尔值与Java中一致，我就不多赘述了。</p><p>布尔用 Boolean 类型表示，它有两个值：true 和 false。若需要可空引用布尔会被装箱。内置的布尔运算有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">val boolA = <span class="keyword">true</span></span><br><span class="line">val boolB = <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">boolA || boolB    <span class="comment">// 短路逻辑或，结果为true</span></span><br><span class="line">boolA &amp;&amp; boolB    <span class="comment">// 短路逻辑与，结果为false</span></span><br><span class="line">!boolA            <span class="comment">// 逻辑非，结果为false</span></span><br></pre></td></tr></table></figure><h2 id="1-3-字符"><a href="#1-3-字符" class="headerlink" title="1.3 字符"></a>1.3 字符</h2><p>字符在日常开发中不是特别常用，但是它是字符串的组成部分，字符串在日常开发中确实有很重要的地位。</p><p>Char（字符型） 必需是单引号 ‘ 包含起来的，比如普通字符 ‘0’，’a’。与 Java 不一样，Kotlin 中的 Char 不能直接和数字操作，如下代码在Kotlin中是不可行的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">check</span><span class="params">(c: Char)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">1</span>) &#123; <span class="comment">// 错误：类型不兼容</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和Java一样，特殊字符可以用反斜杠转义。 支持这几个转义序列：<code>\t、 \b、\n、\r、\&#39;、\&quot;、\\ 和 \$</code>。 编码其他字符要用 Unicode 转义序列语法：<code>\uFF00</code>。</p><h2 id="1-4-字符串"><a href="#1-4-字符串" class="headerlink" title="1.4 字符串"></a>1.4 字符串</h2><h3 id="1-4-1-String类型"><a href="#1-4-1-String类型" class="headerlink" title="1.4.1 String类型"></a>1.4.1 String类型</h3><p>和 Java 一样，String 是不可变的。Kotlin提供了方括号 <code>[]</code> 语法可以很方便的获取字符串中的某个字符，也可以通过 <code>for</code> 循环来遍历：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">val str = <span class="string">"String"</span></span><br><span class="line"></span><br><span class="line">pritln(str[<span class="number">3</span>])      <span class="comment">// 打印出 r</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (c in str) &#123;</span><br><span class="line">    println(c)      <span class="comment">// 逐行打印出 S t r i n g</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kotlin 支持三个引号 “”” 扩起来的字符串，支持多行字符串，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">main</span><span class="params">(args: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class="line">    val text = <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">    多行字符串</span></span><br><span class="line"><span class="string">    多行字符串</span></span><br><span class="line"><span class="string">    "</span><span class="string">""</span></span><br><span class="line">    println(text)   <span class="comment">// 输出时保留编码时的格式，此次输出的两行字符串之前有一些前置空格</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过 trimMargin() 方法来删除多余的空白。默认 | 用作边界前缀，但你可以选择其他字符并作为参数传入，比如 trimMargin(“&gt;”)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">main</span><span class="params">(args: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class="line">    val text = <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">    |多行字符串</span></span><br><span class="line"><span class="string">    |菜鸟教程</span></span><br><span class="line"><span class="string">    |多行字符串</span></span><br><span class="line"><span class="string">    |Runoob</span></span><br><span class="line"><span class="string">    "</span><span class="string">""</span>.trimMargin()</span><br><span class="line">    println(text)    <span class="comment">// 前置空格删除了</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-2-字符串模板"><a href="#1-4-2-字符串模板" class="headerlink" title="1.4.2 字符串模板"></a>1.4.2 字符串模板</h3><p>Kotlin中，字符串可以包含模板表达式 ，即一些小段代码，会求值并把结果合并到字符串中。 模板表达式以美元符<code>$</code>开头，由一个简单的名字构成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">main</span><span class="params">(args: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class="line">    val i = <span class="number">10</span></span><br><span class="line">    val s = <span class="string">"i = $i"</span>   <span class="comment">// 相当于Java中的String.format("i = %d", i)</span></span><br><span class="line">    println(s)  <span class="comment">// 输出结果为 "i = 10"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了插入变量还可插入一行表达式，用花括号扩起来:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">main</span><span class="params">(args: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class="line">    val s = <span class="string">"runoob"</span></span><br><span class="line">    val str = <span class="string">"$s.length is $&#123;s.length&#125;"</span></span><br><span class="line">    println(str) <span class="comment">// 输出结果为 "runoob.length is 6"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原生字符串和转义字符串内部都支持模板。 如果你需要在原生字符串中表示字面值 $ 字符（它不支持反斜杠转义），你可以用下列语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">main</span><span class="params">(args: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class="line">    val price = <span class="string">"$&#123;'$'&#125;9.99"</span></span><br><span class="line">    println(price)  <span class="comment">// 输出结果为 $9.99</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-数组"><a href="#1-5-数组" class="headerlink" title="1.5 数组"></a>1.5 数组</h2><p>和Java中的类型后加上<code>[]</code>即可声明数组变量不同，Kotlin的数组用类<code>Array</code>实现，并且还有一个 <code>size</code> 属性及 <code>get</code> 和 <code>set</code> 方法，由于使用 <code>[]</code> 重载了 <code>get</code> 和 <code>set</code> 方法，所以我们可以通过下标很方便的获取或者设置数组对应位置的值，使用时与Java可以达到一致。</p><p>数组的创建两种方式：一种是使用函数arrayOf()；另外一种是使用工厂函数。如下所示，我们分别是两种方式创建了两个数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">main</span><span class="params">(args: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//[1,2,3]</span></span><br><span class="line">    val a = arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="comment">//[0,2,4]</span></span><br><span class="line">    val b = Array(<span class="number">3</span>, &#123; i -&gt; (i * <span class="number">2</span>) &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取数组内容</span></span><br><span class="line">    println(a[<span class="number">0</span>])    <span class="comment">// 输出结果：1</span></span><br><span class="line">    println(b[<span class="number">1</span>])    <span class="comment">// 输出结果：2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上所述，[] 运算符代表调用成员函数 get() 和 set()。</p><p><em>注意: 与 Java 不同的是，Kotlin 中数组是不型变的（invariant）。</em></p><p>除了类Array，还有ByteArray, ShortArray, IntArray，用来表示各个类型的数组，省去了装箱操作，因此效率更高，其用法同Array一样。</p><h1 id="2-基本数据类型间的关系"><a href="#2-基本数据类型间的关系" class="headerlink" title="2. 基本数据类型间的关系"></a>2. 基本数据类型间的关系</h1><h2 id="2-1-类型比较"><a href="#2-1-类型比较" class="headerlink" title="2.1 类型比较"></a>2.1 类型比较</h2><p>实际上 Kotlin 中没有基础数据类型，只有封装的类型，你每定义的一个变量，其实 Kotlin 帮你封装了一个对象，这样可以保证不会出现空指针。基本类型也一样，所以在比较两个类型的时候，就有比较数据大小和比较两个对象是否相同的区别了。</p><p>在Java中大家都知道有两种比较类型相等的方式：<code>==</code>双等号与<code>equals()</code>方法。<code>equals()</code>方法可以为我们比较两个变量的数值或者说大小是否相等，<code>==</code>双等号则用于比较两个变量的地址是否相同，基本数据类型这两种方式得到的结果一致。</p><p>与Java不同的是，在 Kotlin 中，三个等号 <code>===</code> 表示比较对象地址，两个 <code>==</code> 表示比较两个值大小。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">main</span><span class="params">(args: Array&lt;String&gt;)</span> </span>&#123;</span><br><span class="line">    val a: Int = <span class="number">10000</span></span><br><span class="line">    println(a === a) <span class="comment">// true，值相等，对象地址相等</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//经过了装箱，创建了两个不同的对象</span></span><br><span class="line">    val boxedA: Int? = a</span><br><span class="line">    val anotherBoxedA: Int? = a</span><br><span class="line"></span><br><span class="line">    <span class="comment">//虽然经过了装箱，但是值是相等的，都是10000</span></span><br><span class="line">    println(boxedA === anotherBoxedA) <span class="comment">//  false，值相等，对象地址不一样</span></span><br><span class="line">    println(boxedA == anotherBoxedA) <span class="comment">// true，值相等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-类型转换"><a href="#2-2-类型转换" class="headerlink" title="2.2 类型转换"></a>2.2 类型转换</h2><p>在Java中，类型装换相当方便，隐式转换和显式转换用起来不亦乐乎。而在Kotlin中，由于不同的表示方式，较小类型并不是较大类型的子类型，较小的类型不能隐式转换为较大的类型。 这意味着在不进行显式转换的情况下我们不能把 Byte 型值赋给一个 Int 变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val b: Byte = <span class="number">1</span> <span class="comment">// OK, 字面值是静态检测的</span></span><br><span class="line">val i: Int = b <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure><p>我们可以代用其toInt()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val b: Byte = <span class="number">1</span> <span class="comment">// OK, 字面值是静态检测的</span></span><br><span class="line">val i: Int = b.toInt() <span class="comment">// OK</span></span><br></pre></td></tr></table></figure><p>Kotlin为每种数据类型都提供了下面的这些方法，可以转化为其它的类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">toByte(): Byte</span><br><span class="line">toShort(): Short</span><br><span class="line">toInt(): Int</span><br><span class="line">toLong(): Long</span><br><span class="line">toFloat(): Float</span><br><span class="line">toDouble(): Double</span><br><span class="line">toChar(): Char</span><br></pre></td></tr></table></figure><p>有些情况下也是可以使用自动类型转化的，前提是可以根据上下文环境推断出正确的数据类型而且数学操作符会做相应的重载。例如下面是正确的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val l = <span class="number">1L</span> + <span class="number">3</span> <span class="comment">// Long + Int =&gt; Long</span></span><br></pre></td></tr></table></figure><p>另外Kotlin也提供了<code>as</code>关键字来完成类型的显式转换，使用方式与二元运算符相同：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val b: Byte = <span class="number">1</span> <span class="comment">// OK, 字面值是静态检测的</span></span><br><span class="line">val i: Int = b as Int <span class="comment">// OK</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将伴随大家进入Kotlin语言的正式学习生涯中，希望大家不要半途而废哦！笔者将Kotlin用于Android开发中，因此将从Android开发的视角叙述相关内容，同时将与Java语言有所联系。  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Kotlin征途" scheme="http://hwb0011.github.io/categories/Kotlin%E5%BE%81%E9%80%94/"/>
    
    
      <category term="Android" scheme="http://hwb0011.github.io/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://hwb0011.github.io/tags/Kotlin/"/>
    
      <category term="编程" scheme="http://hwb0011.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>UDP局域网通信的Java实现及Android平台尝试</title>
    <link href="http://hwb0011.github.io/2019/09/01/UDP%E5%B1%80%E5%9F%9F%E7%BD%91%E9%80%9A%E4%BF%A1%E7%9A%84Java%E5%AE%9E%E7%8E%B0%E5%8F%8AAndroid%E5%B9%B3%E5%8F%B0%E5%B0%9D%E8%AF%95/"/>
    <id>http://hwb0011.github.io/2019/09/01/UDP局域网通信的Java实现及Android平台尝试/</id>
    <published>2019-09-01T07:17:19.000Z</published>
    <updated>2020-02-21T03:07:29.808Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>局域网通信已经很少被他人所提及了，我曾经还尝试过通过蓝牙构建通信网络，这次有机会尝试UDP局域网通信，在这里把一些基本过程和在Android平台上的问题记录一下。  </p></blockquote><a id="more"></a><h1 id="1-UDP基础知识"><a href="#1-UDP基础知识" class="headerlink" title="1. UDP基础知识"></a>1. UDP基础知识</h1><h2 id="1-1-什么是UDP"><a href="#1-1-什么是UDP" class="headerlink" title="1.1 什么是UDP"></a>1.1 什么是UDP</h2><blockquote><p>Internet 协议集支持一个无连接的传输协议，该协议称为用户数据报协议（UDP，User Datagram Protocol）。UDP 为应用程序提供了一种无需建立连接就可以发送封装的 IP 数据报的方法。RFC 768 描述了 UDP。<br>Internet 的传输层有两个主要协议，互为补充。无连接的是 UDP，它除了给应用程序发送数据包功能并允许它们在所需的层次上架构自己的协议之外，几乎没有做什么特别的的事情。面向连接的是 TCP，该协议几乎做了所有的事情。<br>——《百度百科》</p></blockquote><p>根据百度百科的解释，UDP是一个数据传输协议，面向无连接的数据传输方式，说明此协议丢包概率较高，不适合复杂的网络环境。UDP报文没有可靠性保证、顺序保证和流量控制字段等，可靠性较差。但是正因为UDP协议的控制选项较少，在数据传输过程中延迟小、数据传输效率高，适合对可靠性要求不高的应用程序，或者可以保障可靠性的应用程序。在局域网中，数据的到达率几乎是可以保证的，因此UDP在局域网通信中拥有比TCP更重要的地位。</p><h2 id="1-2-UDP通信基本流程"><a href="#1-2-UDP通信基本流程" class="headerlink" title="1.2 UDP通信基本流程"></a>1.2 UDP通信基本流程</h2><ol><li><p>设定好统一的端口号；</p></li><li><p>初始化绑定指定端口号的数据接收器；</p></li><li><p>指定接收方的IP地址；</p></li><li><p>准备好轻量数据；</p></li><li><p>发送数据至指定的IP地址；</p></li><li><p>数据接收器触发后续逻辑。</p></li></ol><h1 id="2-UDP局域网通信的Java实现"><a href="#2-UDP局域网通信的Java实现" class="headerlink" title="2. UDP局域网通信的Java实现"></a>2. UDP局域网通信的Java实现</h1><h2 id="2-1-UDP广播"><a href="#2-1-UDP广播" class="headerlink" title="2.1 UDP广播"></a>2.1 UDP广播</h2><p>UDP广播的实现较为简单，其接收方的IP地址固定为<code>255.255.255.255</code>，端口号任选，保证发送方与接收方端口号一致且不与其他程序冲突即可，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER_SIZE = <span class="number">2048</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> DatagramSocket socket;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//先创建一个绑定了端口号为9527的DatagramSocket</span></span><br><span class="line">      socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9527</span>);</span><br><span class="line">      <span class="comment">//开启数据接收器</span></span><br><span class="line">      openReceiver();</span><br><span class="line">      <span class="comment">//发送广播消息</span></span><br><span class="line">      sendBroadcast(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openReceiver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在子线程中循环接收数据</span></span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">      <span class="meta">@override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER_SIZE];</span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buffer, BUFFER_SIZE);</span><br><span class="line">        <span class="keyword">while</span>(socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            socket.receive(dp);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(buffer));</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendBroadcast</span><span class="params">(String dataStr)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//发送广播消息，消息内容为dataStr</span></span><br><span class="line">    <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">byte</span>[] buffer = dataStr.getBytes();</span><br><span class="line">      DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, buffer.length, InetAddress.getByName(<span class="string">"255.255.255.255"</span>), <span class="number">9527</span>);</span><br><span class="line">      socket.send(packet);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-UDP单播"><a href="#2-2-UDP单播" class="headerlink" title="2.2 UDP单播"></a>2.2 UDP单播</h2><p>UDP单播的实现与广播类似，其接收方的IP地址需发送消息时传入，端口号任选，保证发送方与接收方端口号一致且不与其他程序冲突即可，在2.1中展示的UDPManager类中增加单播发送方法即可，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPManager</span> </span>&#123;</span><br><span class="line">  <span class="comment">//···</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSingle</span><span class="params">(String dataStr, String targetIP)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//发送单播消息，消息内容为dataStr，接收方IP地址为targetIP</span></span><br><span class="line">    <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">byte</span>[] buffer = dataStr.getBytes();</span><br><span class="line">      DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, buffer.length, InetAddress.getByName(targetIP), <span class="number">9527</span>);</span><br><span class="line">      socket.send(packet);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-UDP多播"><a href="#2-3-UDP多播" class="headerlink" title="2.3 UDP多播"></a>2.3 UDP多播</h2><p>UDP多播的实现类似群聊，需要先加入一个指定IP的群组，之后消息往该IP发送即可，，端口号任选，单播与多播端口号不可相同，保证发送方与接收方端口号一致且不与其他程序冲突即可，并且需要在2.1中展示的UDPManager类中增加MulticastSocket类型的成员变量、修改init方法和openReceiver方法、增加对应的多播方法，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPManager</span> </span>&#123;</span><br><span class="line">  <span class="comment">//···</span></span><br><span class="line">  <span class="comment">//多播地址自选，在224.0.1.0～238.255.255.255之间即可</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MULICAST_ADDRESS = <span class="string">"224.255.0.1"</span></span><br><span class="line">  <span class="keyword">public</span> MulticastSocket multiSocket;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//先创建一个绑定了端口号为9527的DatagramSocket</span></span><br><span class="line">      socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9527</span>);</span><br><span class="line">      <span class="comment">//创建一个绑定端口号为9528的MulticastSocket</span></span><br><span class="line">      multiSocket = <span class="keyword">new</span> MulticastSocket(<span class="number">9528</span>);</span><br><span class="line">      <span class="comment">//开启数据接收器</span></span><br><span class="line">      openReceiver();</span><br><span class="line">      <span class="comment">//加入多播群组</span></span><br><span class="line">      multiSocket.joinGroup(InetAddress.getByName(MULICAST_ADDRESS))</span><br><span class="line">      <span class="comment">//发送广播消息</span></span><br><span class="line">      sendBroadcast(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openReceiver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//···</span></span><br><span class="line">    <span class="comment">//新建子线程接收多播数据</span></span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">      <span class="meta">@override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER_SIZE];</span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buffer, BUFFER_SIZE);</span><br><span class="line">        <span class="keyword">while</span>(multiSocket != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            multiSocket.receive(dp);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(buffer));</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//···</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMultiple</span><span class="params">(String dataStr)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//发送多播消息，消息内容为dataStr</span></span><br><span class="line">    <span class="keyword">if</span> (multiSocket != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">byte</span>[] buffer = dataStr.getBytes();</span><br><span class="line">      DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, buffer.length, InetAddress.getByName(MULICAST_ADDRESS), <span class="number">9528</span>);</span><br><span class="line">      multiSocket.send(packet);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-局域网通信基础构想"><a href="#2-4-局域网通信基础构想" class="headerlink" title="2.4 局域网通信基础构想"></a>2.4 局域网通信基础构想</h2><p>在上述三种UDP通信方式的实现过程中，发现广播方式并不能送达局域网中所有接收者，非同一网段下的接收者将无法收到广播消息，而单播及多播是可以做到跨网段的。</p><p>初步设想，仅使用多播方式，局域网通信流程大致如下：</p><ol><li><p>用户程序启动，UDP初始化完成；</p></li><li><p>加入组播，发送用户上线消息，暴露本机信息（IP地址等）；</p></li><li><p>接收到用户上线消息的接收方将该用户加入在线用户列表，并再发送一次本机的用户上线消息；</p></li><li><p>用户触发消息发送，消息中附带本机信息（IP地址等）与指定接收方IP地址或是用户名等（可以是数组，指定多个接收方）；</p></li><li><p>接收方收到消息，判断此消息指定接收方中是否有本机，若有则处理该消息，否则丢弃；</p></li><li><p>用户关闭程序，发送用户下线消息；</p></li><li><p>接收到用户下线消息的接收方将该用户移除在线用户列表。</p></li></ol><h1 id="3-Android平台同一wifi环境下的尝试"><a href="#3-Android平台同一wifi环境下的尝试" class="headerlink" title="3. Android平台同一wifi环境下的尝试"></a>3. Android平台同一wifi环境下的尝试</h1><h2 id="3-1-UDP通信方式上的问题"><a href="#3-1-UDP通信方式上的问题" class="headerlink" title="3.1 UDP通信方式上的问题"></a>3.1 UDP通信方式上的问题</h2><p>在Android平台上初步尝试了UDP的各个通信方式，发现多播方式受到了极大的影响，经多方查证并多次尝试多播的使用，最后放弃了在Android平台上使用多播方式，如读者有兴趣可以尝试解决一下。</p><h2 id="3-2-安卓wifi局域网通信基础构想"><a href="#3-2-安卓wifi局域网通信基础构想" class="headerlink" title="3.2 安卓wifi局域网通信基础构想"></a>3.2 安卓wifi局域网通信基础构想</h2><p>参考之前的构想，多播方式无法使用的情况下，广播结合单播的方式成为我的备用方案，大致流程如下：</p><ol><li><p>用户程序启动，UDP初始化完成；</p></li><li><p>发送广播，传输用户上线消息，暴露本机信息（IP地址等）；</p></li><li><p>接收到广播的接收方将该用户加入在线用户列表，并向该用户发送一次本机的用户上线消息；</p></li><li><p>用户触发消息发送，以单播的方式发送给指定接收方的IP地址，消息中附带本机信息（IP地址等）；</p></li><li><p>接收方收到消息，处理该消息。</p></li><li><p>用户关闭程序，发送用户下线消息；</p></li><li><p>接收到用户下线消息的接收方将该用户移除在线用户列表。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;局域网通信已经很少被他人所提及了，我曾经还尝试过通过蓝牙构建通信网络，这次有机会尝试UDP局域网通信，在这里把一些基本过程和在Android平台上的问题记录一下。  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工作之余" scheme="http://hwb0011.github.io/categories/%E5%B7%A5%E4%BD%9C%E4%B9%8B%E4%BD%99/"/>
    
    
      <category term="Android" scheme="http://hwb0011.github.io/tags/Android/"/>
    
      <category term="Java" scheme="http://hwb0011.github.io/tags/Java/"/>
    
      <category term="UDP" scheme="http://hwb0011.github.io/tags/UDP/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin征途（二）：Kotlin基本语法</title>
    <link href="http://hwb0011.github.io/2019/08/15/Kotlin%E5%BE%81%E9%80%94%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AKotlin%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://hwb0011.github.io/2019/08/15/Kotlin征途（二）：Kotlin基本语法/</id>
    <published>2019-08-15T06:20:28.000Z</published>
    <updated>2020-02-21T03:06:38.094Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文将伴随大家进入Kotlin语言的正式学习生涯中，希望大家不要半途而废哦！笔者将Kotlin用于Android开发中，因此将从Android开发的视角叙述相关内容，同时将与Java语言有所联系。  </p></blockquote><a id="more"></a><h1 id="1-正式进入开发的准备知识"><a href="#1-正式进入开发的准备知识" class="headerlink" title="1. 正式进入开发的准备知识"></a>1. 正式进入开发的准备知识</h1><h2 id="1-1-声明包名及导入包"><a href="#1-1-声明包名及导入包" class="headerlink" title="1.1 声明包名及导入包"></a>1.1 声明包名及导入包</h2><p>包，含义、关键字、使用方式与Java一致，如在包com.my.demo下，导入包android.os.Bundle，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源文件顶部</span></span><br><span class="line"><span class="comment">//package关键字声明包名</span></span><br><span class="line"><span class="keyword">package</span> com.my.demo</span><br><span class="line"></span><br><span class="line"><span class="comment">//import关键字导入所需包</span></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br></pre></td></tr></table></figure><h2 id="1-2-程序入口"><a href="#1-2-程序入口" class="headerlink" title="1.2 程序入口"></a>1.2 程序入口</h2><p>每个程序都需要一个入口，一个main函数是必不可少的。当然，在Android开发中不需要main函数，而是由系统调用Application和Activity来触发程序的入口。Kotlin的main函数较为简单，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fun关键字声明一个函数/方法</span></span><br><span class="line"><span class="function">fun <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//函数体/方法体，如打印Hello World!文字</span></span><br><span class="line">  println(<span class="string">"Hello World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-行注释及块注释"><a href="#1-3-行注释及块注释" class="headerlink" title="1.3 行注释及块注释"></a>1.3 行注释及块注释</h2><p>在前面的代码中，我用到了许多注释，用来解释说明我写的代码。日常开发中，注释是很有必要的，代码将被你逐渐遗忘，原本的含义也许不易通过代码去理解，良好的注释不仅方便了自己也帮助了别人。在我们的代码中，注释有两种，行注释与块注释，Kotlin中的注释与Java类似，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是一条行注释</span></span><br><span class="line">println(<span class="string">"Hello World!"</span>) <span class="comment">//行末也可以使用行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*这是块注释</span></span><br><span class="line"><span class="comment">块注释可以包含多行*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*块注释也可在一行中使用*/</span></span><br><span class="line"></span><br><span class="line">println(<span class="comment">/*块注释也可以插入代码中使用*/</span><span class="string">"Hello World!"</span>)</span><br></pre></td></tr></table></figure><h2 id="1-4-代码风格"><a href="#1-4-代码风格" class="headerlink" title="1.4 代码风格"></a>1.4 代码风格</h2><p>Kotlin的代码风格类似多种语言的结合体，可以看到很多Java、C#、C++等语言的影子，官方有提供代码风格指南：</p><blockquote><p><strong>应用风格指南</strong><br>如需根据本风格指南配置 IntelliJ 格式化程序，请安装 Kotlin 插件 1.2.20 或更高版本，转到 Settings | Editor | Code Style | Kotlin，点击右上角的 Set from… 链接，并从菜单中选择 Predefined style | Kotlin style guide。<br>如需验证代码已按风格指南格式化，请转到探查设置（Inspections）并启用 Kotlin | Style issues | File is not formatted according to project settings 探查项。 验证风格指南中描述的其他问题（如命名约定）的附加探查项默认已启用。</p></blockquote><p>包名采用全小写字母（例：<code>package com.my.demopackage</code>），类名采用首字母大写的驼峰式命名（例：<code>class SplahActivity{}</code>），函数名及变量名采用首字母小写的驼峰式命名（例：<code>fun doSomething(){}</code>），常量名采用大写字母与下划线结合的方式（例：<code>const val MAX_COUNT = 8</code>）。</p><p>Kotlin语句末尾无需<code>;</code>标识，因此换行是代表语句结束还是未完待续就需要我们仔细观察了。其他一些不影响代码运行的风格就不一一例举了，可以参考<a href="https://www.kotlincn.net/docs/reference/coding-conventions.html#%E5%BA%94%E7%94%A8%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97" target="_blank" rel="noopener">官方文档</a>，希望大家好好写代码，不只是关注于功能、性能，还要注意代码的可读性，写出漂亮的代码！</p><h2 id="1-5-是否需要取代findViewById-方法"><a href="#1-5-是否需要取代findViewById-方法" class="headerlink" title="1.5 是否需要取代findViewById()方法"></a>1.5 是否需要取代findViewById()方法</h2><p>Kotlin在Android开发中有一个自动绑定View控件的特性，很多人都推崇取代findViewById()方法，但在使用中发现，这个特性的适用性不高。</p><p>Kotlin可以直接在代码中通过id来使用View控件，如：在SplashActivity的布局activity_splash_layout.xml中，存在一个id为tv_hello_world的TextView，那么在SplashActivity的onCreate()方法中可以使用语句<code>tv_hello_world.setText(&quot;Hello World!&quot;)</code>，无需提前声明一个TextView变量，再经过findViewById()来绑定控件。</p><p>但如果是需要同一个类配合多个布局，且布局中存在相同id的控件时，此特性将无法使用；或是ListView、RecyclerView中存在多个Item类型对应不同布局，且布局中存在相同id控件的情况，此特性也无法使用。</p><p>此特性还存在可读性问题，布局中id均使用小写字母与下划线结合的方式命名，在类文件中直接当作变量使用，违背了变量采用驼峰式命名的代码风格，并且找不到该变量的声明，使得代码逻辑不易于理解。</p><p>综述，个人意见为尽量还是使用findViewById()方法，毕竟我们的代码不能只想着省事。</p><h1 id="2-基本语法结构"><a href="#2-基本语法结构" class="headerlink" title="2. 基本语法结构"></a>2. 基本语法结构</h1><h2 id="2-1-函数"><a href="#2-1-函数" class="headerlink" title="2.1 函数"></a>2.1 函数</h2><p>函数的声明关键字是<code>fun</code>，结束语句是<code>return some</code>，空返回值类型是<code>Unit</code>，返回值类型为<code>Unit</code>时结束语句是<code>return</code>且返回值声明及结束语句都可以省略。基本结构是<code>fun 方法名(入参1名: 入参1类型, 入参2名: 入参2类型): 返回值类型{ 方法体 }</code>，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//带有两个 Int 参数、返回 Int 的函数</span></span><br><span class="line"><span class="function">fun <span class="title">sum</span><span class="params">(a: Int, b: Int)</span>: Int </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将表达式作为函数体、返回值类型自动推断的函数</span></span><br><span class="line"><span class="function">fun <span class="title">sum</span><span class="params">(a: Int, b: Int)</span> </span>= a + b</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数返回无意义的值</span></span><br><span class="line"><span class="function">fun <span class="title">printSum</span><span class="params">(a: Int, b: Int)</span>: Unit </span>&#123;</span><br><span class="line">    println(<span class="string">"sum of $a and $b is $&#123;a + b&#125;"</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Unit 返回类型可以省略</span></span><br><span class="line"><span class="function">fun <span class="title">printSum</span><span class="params">(a: Int, b: Int)</span> </span>&#123;</span><br><span class="line">    println(<span class="string">"sum of $a and $b is $&#123;a + b&#125;"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-变量"><a href="#2-2-变量" class="headerlink" title="2.2 变量"></a>2.2 变量</h2><p>变量的声明关键字有两个，<code>var</code>和<code>val</code>，其中<code>val</code>修饰的变量只能被赋值一次，类似Java中被<code>final</code>修饰的变量。一个变量的声明基本结构是<code>var/val 变量名: 变量类型</code>，声明语句后可直接跟<code>= 值</code>进行初始赋值并且此时能够自动推断变量类型（可省略<code>: 变量类型</code>），代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义只读局部变量使用关键字 val 定义，只能为其赋值一次</span></span><br><span class="line">val a: Int = <span class="number">1</span>  <span class="comment">// 立即赋值</span></span><br><span class="line">val b = <span class="number">2</span>   <span class="comment">// 自动推断出 `Int` 类型</span></span><br><span class="line">val c: Int  <span class="comment">// 如果没有初始值类型不能省略</span></span><br><span class="line">c = <span class="number">3</span>       <span class="comment">// 明确赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可重新赋值的变量使用 var 关键字</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">5</span> <span class="comment">// 自动推断出 `Int` 类型</span></span><br><span class="line">x += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//顶层变量（成员变量）</span></span><br><span class="line">val PI = <span class="number">3.14</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function">fun <span class="title">incrementX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-字符串模板"><a href="#2-3-字符串模板" class="headerlink" title="2.3 字符串模板"></a>2.3 字符串模板</h2><p>在Java中，字符串要拼接上变量值或是方法的返回值比较不友好，要么用<code>+</code>连接，要么就得使用<code>String.format()</code>方法。在Kotlin中可以在字符串中使用<code>$变量名</code>或是<code>${表达式}</code>的方式在字符串中插入变量或是表达式，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="comment">// 模板中的简单名称</span></span><br><span class="line">val s1 = <span class="string">"a is $a"</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="comment">// 模板中的任意表达式</span></span><br><span class="line">val s2 = <span class="string">"$&#123;s1.replace("</span>is<span class="string">", "</span>was<span class="string">")&#125;, but now is $a"</span></span><br></pre></td></tr></table></figure><h2 id="2-4-空值与Null检测"><a href="#2-4-空值与Null检测" class="headerlink" title="2.4 空值与Null检测"></a>2.4 空值与Null检测</h2><p>Kotlin著名的空安全使用起来还是很烧脑的，变量默认是不会为空的，未赋值的变量在编译中是会报错的，当某个变量的值可以为<code>null</code>的时候，必须在声明处的类型后添加<code>?</code>来标识该引用可为空，但在使用时就需要进行判空操作了。具体的空安全可以看<a href="https://www.kotlincn.net/docs/reference/null-safety.html" target="_blank" rel="noopener">官方文档</a>，这里就先简单说一下，以后可能会单独写一篇空安全的分析。代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果 str 的内容不是数字返回 null</span></span><br><span class="line"><span class="function">fun <span class="title">parseInt</span><span class="params">(str: String)</span>: Int? </span>&#123;</span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用返回可空值的函数</span></span><br><span class="line"><span class="function">fun <span class="title">printProduct</span><span class="params">(arg1: String, arg2: String)</span> </span>&#123;</span><br><span class="line">    val x = parseInt(arg1)</span><br><span class="line">    val y = parseInt(arg2)</span><br><span class="line">    <span class="comment">// 直接使用 `x * y` 会导致编译错误，因为它们可能为 null</span></span><br><span class="line">    <span class="keyword">if</span> (x != <span class="keyword">null</span> &amp;&amp; y != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 在空检测后，x 与 y 会自动转换为非空值（non-nullable）</span></span><br><span class="line">        println(x * y)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        println(<span class="string">"'$arg1' or '$arg2' is not a number"</span>)</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="function">fun <span class="title">printProduct</span><span class="params">(arg1: String, arg2: String)</span> </span>&#123;</span><br><span class="line">    val x = parseInt(arg1)</span><br><span class="line">    val y = parseInt(arg2)</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">        println(<span class="string">"Wrong number format in arg1: '$arg1'"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="keyword">null</span>) &#123;</span><br><span class="line">        println(<span class="string">"Wrong number format in arg2: '$arg2'"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在空检测后，x 与 y 会自动转换为非空值</span></span><br><span class="line">    println(x * y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-类型检测与自动类型转换"><a href="#2-5-类型检测与自动类型转换" class="headerlink" title="2.5 类型检测与自动类型转换"></a>2.5 类型检测与自动类型转换</h2><p>Kotlin这一特性用起来相当舒服，<code>is</code>运算符检测一个表达式是否某类型的一个实例，如果一个不可变的局部变量或属性已经判断出为某类型，那么检测后的分支中可以直接当作该类型使用，无需显式转换，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">getStringLength</span><span class="params">(obj: Any)</span>: Int? </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj is String) &#123;</span><br><span class="line">        <span class="comment">// `obj` 在该条件分支内自动转换成 `String`</span></span><br><span class="line">        <span class="keyword">return</span> obj.length</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在离开类型检测分支后，`obj` 仍然是 `Any` 类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="function">fun <span class="title">getStringLength</span><span class="params">(obj: Any)</span>: Int? </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj !is String) <span class="keyword">return</span> <span class="keyword">null</span></span><br><span class="line">    <span class="comment">// `obj` 在这一分支自动转换为 `String`</span></span><br><span class="line">    <span class="keyword">return</span> obj.length</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//甚至</span></span><br><span class="line"><span class="function">fun <span class="title">getStringLength</span><span class="params">(obj: Any)</span>: Int? </span>&#123;</span><br><span class="line">    <span class="comment">// `obj` 在 `&amp;&amp;` 右边自动转换成 `String` 类型</span></span><br><span class="line">    <span class="keyword">if</span> (obj is String &amp;&amp; obj.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> obj.length</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-条件表达式"><a href="#2-6-条件表达式" class="headerlink" title="2.6 条件表达式"></a>2.6 条件表达式</h2><p><code>if</code>语句在Kotlin中基本与Java一致，唯一的不同点在于最后一行代码若是单独的值，将作为<code>if</code>语句的返回值，这一特点用来取代了Java中的<code>a? b : c</code>三元表达式，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">maxOf</span><span class="params">(a: Int, b: Int)</span>: Int </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//if 也可以用作表达式</span></span><br><span class="line"><span class="function">fun <span class="title">maxOf</span><span class="params">(a: Int, b: Int)</span> </span>= <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure><h2 id="2-7-循环表达式"><a href="#2-7-循环表达式" class="headerlink" title="2.7 循环表达式"></a>2.7 循环表达式</h2><h3 id="2-7-1-for-循环"><a href="#2-7-1-for-循环" class="headerlink" title="2.7.1 for 循环"></a>2.7.1 for 循环</h3><p>Kotlin中的<code>for</code>循环有点像Java中的<code>foreach</code>语句，基本结构为<code>for (对象 in 列表/数组/区间) { 循环体 }</code>，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">val items = listOf(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"kiwifruit"</span>)</span><br><span class="line"><span class="keyword">for</span> (item in items) &#123;</span><br><span class="line">    println(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">val items = listOf(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"kiwifruit"</span>)</span><br><span class="line"><span class="keyword">for</span> (index in items.indices) &#123;</span><br><span class="line">    println(<span class="string">"item at $index is $&#123;items[index]&#125;"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-7-2-while-循环"><a href="#2-7-2-while-循环" class="headerlink" title="2.7.2 while 循环"></a>2.7.2 while 循环</h3><p>Kotlin中的<code>while</code>循环与Java一致，基本结构为<code>while (循环条件) { 循环体 }</code>，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">val items = listOf(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"kiwifruit"</span>)</span><br><span class="line"><span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (index &lt; items.size) &#123;</span><br><span class="line">    println(<span class="string">"item at $index is $&#123;items[index]&#125;"</span>)</span><br><span class="line">    index++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-8-when-表达式"><a href="#2-8-when-表达式" class="headerlink" title="2.8 when 表达式"></a>2.8 when 表达式</h2><p><code>when</code>表达式类似Java中的<code>switch</code>语句，但是比<code>switch</code>更高级，能够完全取代多个<code>elseif</code>的情况，基本结构为<code>when (变量) { 条件 -&gt; 操作 }</code>，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本使用，类似switch</span></span><br><span class="line">when (x) &#123;</span><br><span class="line">    <span class="number">1</span> -&gt; print(<span class="string">"x == 1"</span>)</span><br><span class="line">    <span class="number">2</span> -&gt; print(<span class="string">"x == 2"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; &#123; <span class="comment">// 注意这个块</span></span><br><span class="line">        print(<span class="string">"x is neither 1 nor 2"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们可以用任意表达式（而不只是常量）作为分支条件</span></span><br><span class="line">when (x) &#123;</span><br><span class="line">    parseInt(s) -&gt; print(<span class="string">"s encodes x"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; print(<span class="string">"s does not encode x"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们也可以检测一个值在（in）或者不在（!in）一个区间或者集合中</span></span><br><span class="line">when (x) &#123;</span><br><span class="line">    in <span class="number">1</span>..<span class="number">10</span> -&gt; print(<span class="string">"x is in the range"</span>)</span><br><span class="line">    in validNumbers -&gt; print(<span class="string">"x is valid"</span>)</span><br><span class="line">    !in <span class="number">10</span>..<span class="number">20</span> -&gt; print(<span class="string">"x is outside the range"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; print(<span class="string">"none of the above"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//另一种可能性是检测一个值是（is）或者不是（!is）一个特定类型的值。注意： 由于智能转换，你可以访问该类型的方法与属性而无需任何额外的检测。</span></span><br><span class="line"><span class="function">fun <span class="title">hasPrefix</span><span class="params">(x: Any)</span> </span>= when(x) &#123;</span><br><span class="line">    is String -&gt; x.startsWith(<span class="string">"prefix"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; <span class="keyword">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//when 也可以用来取代 if-else if链。 如果不提供参数，所有的分支条件都是简单的布尔表达式，而当一个分支的条件为真时则执行该分支：</span></span><br><span class="line">when &#123;</span><br><span class="line">    x.isOdd() -&gt; print(<span class="string">"x is odd"</span>)</span><br><span class="line">    x.isEven() -&gt; print(<span class="string">"x is even"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; print(<span class="string">"x is funny"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-9-区间"><a href="#2-9-区间" class="headerlink" title="2.9 区间"></a>2.9 区间</h2><p>区间这个概念类似于数学中的区间（适用于整数，假设有整数a和b，a&lt;b），形式有三种：</p><ol><li><p><code>a..b</code>，即从a到b之间的所有整数的升序排列，包括a和b，相当于数学中的<code>[a,b]</code>；</p></li><li><p><code>b downTo a</code>，即从a到b之间的所有整数的降序排列，包括a和b，可以理解成<code>[b,a]</code>；</p></li><li><p><code>a until b</code>，即从a到b之间的所有整数的升序排列，包括a但不包括b，相当于数学中的<code>[a,b)</code>。</p></li></ol><p>同时，还可以在末尾加上<code>step 整数</code>来指定步长，例如<code>1..5 step 2</code>代表数列<code>{1, 3, 5}</code>。区间一般用于<code>for</code>循环，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i in <span class="number">1</span>..<span class="number">4</span>) print(i)</span><br><span class="line"><span class="comment">//输出1234</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i in <span class="number">4</span> downTo <span class="number">1</span>) print(i)</span><br><span class="line"><span class="comment">//输出4321</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i in <span class="number">1</span> until <span class="number">4</span>) print(i)</span><br><span class="line"><span class="comment">//输出123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i in <span class="number">1</span>..<span class="number">8</span> step <span class="number">2</span>) print(i)</span><br><span class="line"><span class="comment">//输出1357</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure><h2 id="2-10-创建实例"><a href="#2-10-创建实例" class="headerlink" title="2.10 创建实例"></a>2.10 创建实例</h2><p>实例的创建，没有关键字的标识，就像函数的调用。常用操作是声明一个变量，赋值为某个对象实例，调用其构造方法，例如<code>val rectangle = Rectangle(5.0, 2.0)</code>，相对于Java来说，省略了<code>new</code>关键字，就像调用了一个返回值类型为Rectangle的方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将伴随大家进入Kotlin语言的正式学习生涯中，希望大家不要半途而废哦！笔者将Kotlin用于Android开发中，因此将从Android开发的视角叙述相关内容，同时将与Java语言有所联系。  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Kotlin征途" scheme="http://hwb0011.github.io/categories/Kotlin%E5%BE%81%E9%80%94/"/>
    
    
      <category term="Android" scheme="http://hwb0011.github.io/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://hwb0011.github.io/tags/Kotlin/"/>
    
      <category term="编程" scheme="http://hwb0011.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>APP启动黑屏白屏原因与解决方式</title>
    <link href="http://hwb0011.github.io/2019/08/01/APP%E5%90%AF%E5%8A%A8%E9%BB%91%E5%B1%8F%E7%99%BD%E5%B1%8F%E5%8E%9F%E5%9B%A0%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/"/>
    <id>http://hwb0011.github.io/2019/08/01/APP启动黑屏白屏原因与解决方式/</id>
    <published>2019-08-01T06:55:52.000Z</published>
    <updated>2020-02-21T03:06:01.289Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们在桌面启动自己辛苦创建的APP时，总是会看到黑屏或是白屏现象，这让人的体验感觉不是很好，看看大厂的APP为什么不会有这个现象？有问题就要解决，即便不是BUG，用户体验一样很重要。</p></blockquote><a id="more"></a><h1 id="1-APP启动黑-白屏的原因"><a href="#1-APP启动黑-白屏的原因" class="headerlink" title="1. APP启动黑/白屏的原因"></a>1. APP启动黑/白屏的原因</h1><p>首先，我们需要知道一个APP启动时，屏幕上都会有什么。在我们的APP里，显示在屏幕上的自然是各个View了，而我们的View又都是在Activity的onCreate()方法中调用了setContentView()方法，传入了我们的layout文件，也就是我们理论上应该看到的Activity内容。但是Android系统在启动一个新的Activity时，首先进行的并不是绘制Activity的内容，我们来看看一个Activity的UI结构。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/img0630_01.jpg" alt="Activity UI结构" title="">                </div>                <div class="image-caption">Activity UI结构</div>            </figure><p>我们可以看到，一个Activity中在ContentView的外围还有PhoneWindow、DecorView、TitleView，当Activity进行绘制时会先绘制这三个View，这时ContentView还没加载进来，所以什么东西都看不到，系统会将屏幕填充主题默认的背景色，亮系主题填充白色，暗系主题填充黑色，就出现了Activity启动之前的黑/白屏现象。</p><h1 id="2-解决黑-白屏的方法"><a href="#2-解决黑-白屏的方法" class="headerlink" title="2. 解决黑/白屏的方法"></a>2. 解决黑/白屏的方法</h1><p>刚才说了，系统会为屏幕填充主题默认的背景色，那么要解决这个问题就应该从屏幕的背景下手了。一想到背景，第一反应就是去layout里设置ContentView的background，但是系统并不会先加载ContentView，那有什么在系统绘制之前就能调整屏幕背景呢？</p><p>注意，系统会填充主题默认的背景色，所以主题会在绘制之前加载，我们可以修改主题的背景达到目的。一般一个APP第一个启动的Activity都是Splash，作为一个Splash并不需要标题栏，而且普遍是全屏的。那么我们可以将主题进行修改一下，大概有两种方式：</p><ol><li>将主题背景变成透明的，这样在ContentView加载出来之前，我们会透过启动的Activity看到桌面，就不会有黑/白屏的现象。再把标题栏去掉，把Activity设置成全屏的，效果挺不错，缺点是如果启动的是一个有复杂耗时操作的Activity，那么会有一种延迟的感觉。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"android:Theme.Light.NoActionBar"</span>&gt;</span>  </span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsTranslucent"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:WindowFullscreen"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>将主题背景设置成一张图片，把标题栏去掉，把Activity设置成全屏的，这这样在ContentView加载出来之前，我们就能看到一张默认背景图，但是图片的屏幕适配问题就需要考虑了，主题里的背景图片会自动拉伸，可能会导致失真或者比例失调的问题。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"android:Theme.Light.NoActionBar"</span>&gt;</span>  </span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@drawable/bg_splash<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:WindowFullscreen"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-背景显示优化"><a href="#3-背景显示优化" class="headerlink" title="3. 背景显示优化"></a>3. 背景显示优化</h1><p>这里再将上述解决方法进行优化，减少用户使用时不好的体验。（PS：当然你可以不做此优化，如果你想忽悠老板，把锅甩给Android系统、手机的硬件配置、UI的图给的不匹配屏幕等等）</p><h2 id="3-1-方法一优化"><a href="#3-1-方法一优化" class="headerlink" title="3.1 方法一优化"></a>3.1 方法一优化</h2><p>方法一中的问题在于延迟感严重，那么我们需要做的就是尽量加快Splash的启动速度，在Splash中不加入任何逻辑操作，并且Application中任何的数据及开源框架的初始化方法都不应调用，当Splash启动完全后，在Splash的OnResume()方法中可以启动子线程进行各初始化操作，宁可让用户在背景图中等待，不要让用户看着手机桌面认为手机死机了。</p><h2 id="3-2-方法二优化"><a href="#3-2-方法二优化" class="headerlink" title="3.2 方法二优化"></a>3.2 方法二优化</h2><p>方法二中的问题在于图片拉伸可能导致失真或者比例失调，使得界面不够美观。简单的方式就是建立各个drawable文件夹，覆盖所有的屏幕尺寸类型，每个文件夹下塞一张让UI做的合理的背景图。这种方法超级令人无语，UI的工作量较大，而且你也不可能覆盖所有的屏幕尺寸，比如这样：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/img0630_02.jpg" alt="超长的手机屏幕" title="">                </div>                <div class="image-caption">超长的手机屏幕</div>            </figure><p>那么怎样可以拥有更好的用户体验呢？这时候我们需要的是drawable。</p><h3 id="3-2-1-drawable的类型"><a href="#3-2-1-drawable的类型" class="headerlink" title="3.2.1 drawable的类型"></a>3.2.1 drawable的类型</h3><p>在Android中，我们可以使用xml自定义一个drawable，用的最多的场景就是背景图了，Android系统的一些默认图标也都是用xml实现的，当然那涉及到了一些矢量图的知识。</p><p>首先我们先了解一下drawable的类型，常见的几种有：<code>BitmapDrawable</code>、<code>ShapeDrawable</code>、<code>StateListDrawable</code>、<code>LevelListDrawable</code>、<code>LayerDrawable</code>、<code>TransitionDrawable</code>、<code>ScaleDrawable</code>、<code>AnimationDrawable</code>、<code>InsetDrawable</code>、<code>NinePatchDrawable</code>、<code>ClipDrawable</code>、<code>VectorDrawable</code>。</p><p>这里我采用了LayerDrawable来解决图片拉伸的问题，其他的drawable以后再写一篇文章专门分析各个drawable。</p><h3 id="3-2-2-LayerDrawable解决图片拉伸"><a href="#3-2-2-LayerDrawable解决图片拉伸" class="headerlink" title="3.2.2 LayerDrawable解决图片拉伸"></a>3.2.2 LayerDrawable解决图片拉伸</h3><p>LayerDrawable为什么能解决图片拉伸问题呢？这要从LayerDrawble的性质说起了：</p><ol><li><p>XML标签为layer-list</p></li><li><p>层次化的Drawable合集</p></li><li><p>可以包含多个item，每个item表示一个Drawable</p></li><li><p>item中可以通过android:drawable直接引用资源</p></li><li><p>item中可以通过android:top等指定相对于父节点的位置</p></li></ol><p>多个Drawable的层次化叠加，并且可以指定每个Drawable的位置，是不是和layout很像？一些简单的布局显示可以用LayerDrawble来完成，不过只能塞Drawable进去，文字什么的就不行了。</p><p>那么我们来看一下一个可以很好适配屏幕的背景图改如何完成。首先在drawable文件夹下建立一个layer-list类型的drawable文件bg_splash.xml，随后写入如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/bg"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:top</span>=<span class="string">"175dp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bitmap</span> <span class="attr">android:gravity</span>=<span class="string">"top"</span> <span class="attr">android:src</span>=<span class="string">"@drawable/logo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们在layer-list中放入了两个item：第一个是一整个页面的背景，可以是图片，但是笔者建议用纯色的ShapeDrawable，一定程度上减少内存开销并且无需考虑图片失真之类的问题；第二个是一个Bitmap，<code>&lt;bitmap&gt;</code>这个标签是按照图片大小插入一张图片，这样避免了图片在屏幕上的拉伸，通过<code>android:top</code>来指定这个item顶部的偏移距离，同样还可以指定<code>android:bottom</code>、<code>android:left</code>、<code>android:right</code>来定位item的位置，随后对<code>&lt;bitmap&gt;</code>的<code>android:gravity</code>设置为<code>top</code>，让logo可以显示在顶部。这样一个能随着屏幕进行适配并且不会失真的背景就做好了，按照方法二设置为<code>android:windowBackground</code>即可。</p><h3 id="3-2-3-style主题优化"><a href="#3-2-3-style主题优化" class="headerlink" title="3.2.3 style主题优化"></a>3.2.3 style主题优化</h3><p>按照方法二的设定，整个App将使用我们制作的bg_splash作为背景，这时候如果不给每个Activity设置背景或者在使用虚拟键盘时，进入App之后屏幕上也会看到bg_splash出现在没有控件的位置，造成用户的疑惑或者反感。</p><p>我们知道Activity也是可以设置主题的，那么我们可以给Application设置一个默认的主题AppTheme，然后给SplashActivity设置我们的全屏带背景的主题SplashTheme，这样在我们的SplashActivity中就可以迅速显示启动背景图，进入App中，在其他Activity中也不会出现启动背景图，最终的styles和AndroidManifest文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">styles.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@color/colorDefaultBg<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"SplashTheme"</span> <span class="attr">parent</span>=<span class="string">"AppTheme"</span>&gt;</span>  </span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowFullscreen"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@drawable/bg_splash<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">AndroidManifest.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">android:name</span>=<span class="string">".MyApplication"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:allowBackup</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SplashActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">"@style/SplashTheme"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:screenOrientation</span>=<span class="string">"portrait"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:configChanges</span>=<span class="string">"orientation|screenSize|keyboardHidden"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我们在桌面启动自己辛苦创建的APP时，总是会看到黑屏或是白屏现象，这让人的体验感觉不是很好，看看大厂的APP为什么不会有这个现象？有问题就要解决，即便不是BUG，用户体验一样很重要。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="避坑指南" scheme="http://hwb0011.github.io/categories/%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Android" scheme="http://hwb0011.github.io/tags/Android/"/>
    
      <category term="优化" scheme="http://hwb0011.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>25类Android常用开源框架</title>
    <link href="http://hwb0011.github.io/2019/07/15/25%E7%B1%BBAndroid%E5%B8%B8%E7%94%A8%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    <id>http://hwb0011.github.io/2019/07/15/25类Android常用开源框架/</id>
    <published>2019-07-15T03:41:22.000Z</published>
    <updated>2020-02-21T03:01:23.609Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>工欲善其事，必先利其器！开源框架奉上，支持开源，不造轮子，巨人带飞！持续更新，让开发更顺利。</p></blockquote><a id="more"></a><h2 id="1-图片加载，缓存，处理"><a href="#1-图片加载，缓存，处理" class="headerlink" title="1. 图片加载，缓存，处理"></a>1. 图片加载，缓存，处理</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="noopener">Android Universal Image Loader</a></td><td>一个强大的加载，缓存，展示图片的库，<strong>已过时</strong></td></tr><tr><td><a href="https://github.com/square/picasso" target="_blank" rel="noopener">Picasso</a></td><td>一个强大的图片下载与缓存的库</td></tr><tr><td><a href="https://github.com/facebook/fresco" target="_blank" rel="noopener">Fresco</a></td><td>一个用于管理图像和他们使用的内存的库</td></tr><tr><td><a href="https://github.com/bumptech/glide" target="_blank" rel="noopener">Glide</a></td><td>一个图片加载和缓存的库，使用的App有：网易新闻</td></tr><tr><td><a href="https://github.com/florent37/GlidePalette" target="_blank" rel="noopener">GlidePalette</a></td><td>Android Lollipop Palette is now easy to use with Glide</td></tr><tr><td><a href="https://github.com/florent37/PicassoPalette" target="_blank" rel="noopener">PicassoPalette</a></td><td>Android Lollipop Palette is now easy to use with Picasso</td></tr><tr><td><a href="https://github.com/wasabeef/picasso-transformations" target="_blank" rel="noopener">Picasso-transformations</a></td><td>一个为Picasso提供多种图片变换的库</td></tr><tr><td><a href="https://github.com/wasabeef/glide-transformations" target="_blank" rel="noopener">Glide-transformations</a></td><td>一个为Glide提供多种图片变换的库</td></tr></tbody></table><h2 id="2-图片裁剪"><a href="#2-图片裁剪" class="headerlink" title="2. 图片裁剪"></a>2. 图片裁剪</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/Yalantis/uCrop" target="_blank" rel="noopener">uCrop</a></td><td>Image Cropping Library for Android，使用的App有：薄荷，哔哩哔哩</td></tr><tr><td><a href="https://github.com/jdamcd/android-crop" target="_blank" rel="noopener">android-crop</a></td><td>图片裁剪，使用的App有：网易新闻，芒果TV</td></tr><tr><td><a href="https://github.com/edmodo/cropper" target="_blank" rel="noopener">cropper</a></td><td>图片裁剪开源框架</td></tr><tr><td><a href="https://github.com/ArthurHub/Android-Image-Cropper" target="_blank" rel="noopener">Android-Image-Cropper</a></td><td>Image Cropping Library for Android, optimized for Camera / Gallery</td></tr><tr><td><a href="https://github.com/ryanhoo/PhotoCropper" target="_blank" rel="noopener">PhotoCropper</a></td><td>Android 大图片裁剪终极解决方案</td></tr><tr><td><a href="https://github.com/lvillani/android-cropimage" target="_blank" rel="noopener">android-cropimage</a></td><td>CropImage Activity from Gallery.apk packaged as a reusable Android library</td></tr><tr><td><a href="https://github.com/albinmathew/PhotoCrop" target="_blank" rel="noopener">PhotoCrop</a></td><td>A Library which can be used to crop images in Android similar to Facebook and Telegram，使用的App有：快手</td></tr></tbody></table><h2 id="3-图片选择"><a href="#3-图片选择" class="headerlink" title="3. 图片选择"></a>3. 图片选择</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/lovetuzitong/MultiImageSelector" target="_blank" rel="noopener">MultiImageSelector</a></td><td>图片选择，使用的App有：薄荷</td></tr><tr><td><a href="https://github.com/bingoogolapple/BGAPhotoPicker-Android" target="_blank" rel="noopener">BGAPhotoPicker-Android</a></td><td>Android 图片选择、预览、九宫格图片控件、拖拽排序九宫格图片控件</td></tr><tr><td><a href="https://github.com/crazycodeboy/TakePhoto" target="_blank" rel="noopener">TakePhoto</a></td><td>轻量级Android照片处理框架</td></tr><tr><td><a href="https://github.com/FinalTeam/RxGalleryFinal" target="_blank" rel="noopener">RxGalleryFinal</a></td><td>Android图片单选/多选、拍照、裁剪、压缩。视频选择和录制。</td></tr><tr><td><a href="https://github.com/Bilibili/boxing" target="_blank" rel="noopener">boxing</a></td><td>一个多媒体选择器库，B站出品。可以选择一张或者多张图片，提供预览和裁剪功能。同样支持gif图，选择视频和图像压缩功能。</td></tr></tbody></table><h2 id="4-图片转换，压缩，滤镜"><a href="#4-图片转换，压缩，滤镜" class="headerlink" title="4. 图片转换，压缩，滤镜"></a>4. 图片转换，压缩，滤镜</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/CyberAgent/android-gpuimage" target="_blank" rel="noopener">Android-gpuimage</a></td><td>一个开源的基于GPU的图像处理库，提供各种各样的图像处理滤镜，并且支持照相机和摄像机的实时滤镜，使用的App有：快手</td></tr><tr><td><a href="https://github.com/chrisbanes/PhotoView" target="_blank" rel="noopener">photoview</a></td><td>使用的App有：薄荷,网易新闻</td></tr><tr><td><a href="https://github.com/hdodenhof/CircleImageView" target="_blank" rel="noopener">circleimageview</a></td><td>圆形图片，使用的App有：薄荷</td></tr><tr><td><a href="https://github.com/vinc3m1/RoundedImageView" target="_blank" rel="noopener">RoundedImageView</a></td><td>圆形图片，使用的App有：薄荷</td></tr><tr><td><a href="https://github.com/pungrue26/SelectableRoundedImageView" target="_blank" rel="noopener">SelectableRoundedImageView</a></td><td>Android ImageView that supports different radii on each corner</td></tr><tr><td><a href="https://github.com/koral--/android-gif-drawable" target="_blank" rel="noopener">android-gif-drawable</a></td><td>gif图片，使用的App有：网易新闻，快手</td></tr><tr><td><a href="https://github.com/Curzibn/Luban" target="_blank" rel="noopener">Luban</a></td><td>可能是最接近微信朋友圈的图片压缩算法</td></tr><tr><td><a href="https://github.com/zetbaitsu/Compressor" target="_blank" rel="noopener">Compressor</a></td><td>Compressor is a lightweight and powerful android image compression library</td></tr></tbody></table><h2 id="5-高斯模糊，毛玻璃，图片模糊"><a href="#5-高斯模糊，毛玻璃，图片模糊" class="headerlink" title="5. 高斯模糊，毛玻璃，图片模糊"></a>5. 高斯模糊，毛玻璃，图片模糊</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/kikoso/android-stackblur" target="_blank" rel="noopener">android-stackblur</a></td><td>Android StackBlur is a library that can perform a blurry effect on a Bitmap based on a gradient or radius, and return the result. The library is based on the code of Mario Klingemann.</td></tr><tr><td><a href="https://github.com/wasabeef/Blurry" target="_blank" rel="noopener">Blurry</a></td><td>Blurry is an easy blur library for Android</td></tr><tr><td><a href="https://github.com/wonderkiln/blurkit-android" target="_blank" rel="noopener">blurkit-android</a></td><td>The missing Android blurring library. Fast blur-behind layout that parallels iOS.</td></tr><tr><td><a href="https://github.com/Dimezis/BlurView" target="_blank" rel="noopener">BlurView</a></td><td>Dynamic iOS-like blur of underlying Views for Android</td></tr><tr><td><a href="https://github.com/qiujuer/ImageBlurring" target="_blank" rel="noopener">ImageBlurring</a></td><td>Android blurring image(bitmap) by java and jni</td></tr></tbody></table><h2 id="6-缓存"><a href="#6-缓存" class="headerlink" title="6. 缓存"></a>6. 缓存</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td>LruCache</td><td>Android原生API，内存缓存</td></tr><tr><td><a href="https://github.com/JakeWharton/DiskLruCache" target="_blank" rel="noopener">DiskLruCache</a></td><td>Java实现基于LRU的磁盘缓存</td></tr><tr><td><a href="https://github.com/yangfuhai/ASimpleCache" target="_blank" rel="noopener">ASimpleCache</a></td><td>一个为android制定的轻量级的开源缓存框架</td></tr><tr><td><a href="https://github.com/hongyangAndroid/base-diskcache" target="_blank" rel="noopener">base-diskcache</a></td><td>Android 缓存库，融合了DiskLruCache和ASimpleCache</td></tr></tbody></table><h2 id="7-网络请求"><a href="#7-网络请求" class="headerlink" title="7. 网络请求"></a>7. 网络请求</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="http://hc.apache.org/httpclient-3.x/" target="_blank" rel="noopener">httpclient</a></td><td>apache开源的网络请求框架，<strong>已过时</strong></td></tr><tr><td><a href="https://loopj.com/android-async-http/doc/com/loopj/android/http/AsyncHttpClient.html" target="_blank" rel="noopener">AsyncHttpClient</a></td><td>基于httpclient封装，<strong>已过时</strong></td></tr><tr><td><a href="https://github.com/square/okhttp" target="_blank" rel="noopener">OkHttp</a></td><td>Square出品，一个Http与Http/2的客户端</td></tr><tr><td><a href="https://github.com/square/retrofit" target="_blank" rel="noopener">Retrofit</a></td><td>Square出品，类型安全的Http客户端</td></tr><tr><td><a href="https://android.googlesource.com/platform/frameworks/volley" target="_blank" rel="noopener">Volley</a></td><td>Google推出的Android异步网络请求框架和图片加载框架，使用的App有：网易新闻</td></tr></tbody></table><blockquote><p>从Android 6.0 开始，Google删除了apache的开源网络请求框架httpclient，所以基于httpclient的AsyncHttpClient也不推荐使用了。<br>Volley适合那些请求频繁但数据量不大的场景，不适用于大数据的请求，比如下载文件。<br>Android 6.0 后，Android开始使用OkHttp，而Retrofit是一个网络代理框架，可以更简单的使用OkHttp。</p></blockquote><h2 id="8-网络解析"><a href="#8-网络解析" class="headerlink" title="8. 网络解析"></a>8. 网络解析</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/google/gson" target="_blank" rel="noopener">Gson</a></td><td>一个Java序列化/反序列化库，可以将JSON和java对象互相转换</td></tr><tr><td><a href="https://github.com/codehaus/jackson" target="_blank" rel="noopener">Jackson</a></td><td>Jackson可以轻松地将Java对象转换成json对象和xml文档，同样也可以将json、xml转换成Java对象</td></tr><tr><td><a href="https://github.com/alibaba/fastjson" target="_blank" rel="noopener">Fastjson</a></td><td>Java上一个快速的JSON解析器/生成器</td></tr><tr><td><a href="https://sourceforge.net/projects/htmlparser/" target="_blank" rel="noopener">HtmlPaser</a></td><td>一种用来解析单个独立html或嵌套html的方式</td></tr><tr><td><a href="https://github.com/jhy/jsoup" target="_blank" rel="noopener">Jsoup</a></td><td>一个以最好的DOM，CSS和jQuery解析html的库</td></tr></tbody></table><h2 id="9-数据库"><a href="#9-数据库" class="headerlink" title="9. 数据库"></a>9. 数据库</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://sourceforge.net/projects/ormlite/files/releases/com/j256/ormlite/" target="_blank" rel="noopener">OrmLite</a></td><td>JDBC和Android的轻量级ORM java包</td></tr><tr><td><a href="https://github.com/satyan/sugar" target="_blank" rel="noopener">Sugar</a></td><td>用超级简单的方法处理Android数据库</td></tr><tr><td><a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="noopener">GreenDAO</a></td><td>一种轻快地将对象映射到SQLite数据库的ORM解决方案，使用的App有：薄荷，京东</td></tr><tr><td><a href="https://github.com/pardom/ActiveAndroid" target="_blank" rel="noopener">ActiveAndroid</a></td><td>以活动记录方式为Android SQLite提供持久化</td></tr><tr><td><a href="https://github.com/square/sqlbrite" target="_blank" rel="noopener">SQLBrite</a></td><td>SQLiteOpenHelper 和ContentResolver的轻量级包装</td></tr><tr><td><a href="https://github.com/sqlcipher/android-database-sqlcipher" target="_blank" rel="noopener">android-database-sqlcipher</a></td><td>数据库加密</td></tr><tr><td><a href="https://github.com/pushtorefresh/storio" target="_blank" rel="noopener">storio</a></td><td>Beautiful API for SQLiteDatabase and ContentResolver</td></tr><tr><td><a href="https://github.com/realm/realm-java" target="_blank" rel="noopener">realm-java</a></td><td>移动数据库，高性能数据库：一个SQLite和ORM的替换品</td></tr><tr><td><a href="https://github.com/greenrobot/ObjectBox" target="_blank" rel="noopener">ObjectBox</a></td><td>相信不少人都用过GreenDao和EventBus，这两库都是greenrobot公司出品。ObjectBox也是该公司出品。GreenDao号称是最快的与SQLite的对象关系映射（ORM）。但是自从2011年以来，公司声称发现了许多的缺陷，有很多问题影响了性能。所以开发出另外一套性能最好且易用的NoSQL数据库，优于其他数据库5-15倍的性能。</td></tr></tbody></table><h2 id="10-依赖注入"><a href="#10-依赖注入" class="headerlink" title="10. 依赖注入"></a>10. 依赖注入</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="noopener">ButterKnife</a></td><td>将Android视图和回调方法绑定到字段和方法上</td></tr><tr><td><a href="https://github.com/google/dagger" target="_blank" rel="noopener">Dagger2</a></td><td>一个Android和java快速依赖注射器</td></tr><tr><td><a href="https://github.com/androidannotations/androidannotations" target="_blank" rel="noopener">AndroidAnotations</a></td><td>快速安卓开发。易于维护</td></tr><tr><td><a href="https://github.com/roboguice/roboguice" target="_blank" rel="noopener">RoboGuice</a></td><td>Android平台的Google Guice <strong>已退役</strong></td></tr><tr><td><a href="https://github.com/google/guice" target="_blank" rel="noopener">guice</a></td><td>Google开发的依赖注入框架</td></tr></tbody></table><h2 id="11-图表Chart"><a href="#11-图表Chart" class="headerlink" title="11. 图表Chart"></a>11. 图表Chart</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/diogobernardino/WilliamChart" target="_blank" rel="noopener">WilliamChart</a></td><td>创建图表的Android库</td></tr><tr><td><a href="https://github.com/lecho/hellocharts-android" target="_blank" rel="noopener">HelloCharts</a></td><td>兼容到API8的Android图表库，使用的App有：薄荷</td></tr><tr><td><a href="https://github.com/PhilJay/MPAndroidChart" target="_blank" rel="noopener">MPAndroidChart</a></td><td>一个强大的Android图表视图/图形库，使用的App有：春雨医生</td></tr></tbody></table><h2 id="12-后台处理"><a href="#12-后台处理" class="headerlink" title="12. 后台处理"></a>12. 后台处理</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/square/tape" target="_blank" rel="noopener">Tape</a></td><td>一个轻快的，事务性的，基于文件的FIFO的库</td></tr><tr><td><a href="https://github.com/yigit/android-priority-jobqueue" target="_blank" rel="noopener">Android Priority Job Queue</a></td><td>一个专门为Android轻松调度任务的工作队列</td></tr></tbody></table><h2 id="13-事件总线"><a href="#13-事件总线" class="headerlink" title="13. 事件总线"></a>13. 事件总线</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="noopener">EventBus</a></td><td>安卓优化的事件总线，简化了活动、片段、线程、服务等的通信，使用的App有：薄荷</td></tr><tr><td><a href="https://github.com/square/otto" target="_blank" rel="noopener">Otto</a></td><td>一个基于Guava的增强的事件总线</td></tr><tr><td><a href="https://github.com/eleme/HermesEventBus" target="_blank" rel="noopener">HermesEventBus</a></td><td>一个基于EventBus的、能在进程间发送和接收event的库，在IPC或者插件开发中非常有用</td></tr></tbody></table><h2 id="14-响应式编程"><a href="#14-响应式编程" class="headerlink" title="14. 响应式编程"></a>14. 响应式编程</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener">RxJava</a></td><td>JVM上的响应式扩展</td></tr><tr><td><a href="https://github.com/ReactiveX/RxJavaJoins" target="_blank" rel="noopener">RxJavaJoins</a></td><td>为RxJava提供Joins操作</td></tr><tr><td><a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="noopener">RxAndroid</a></td><td>Android上的响应式扩展，在RxJava基础上添加了Android线程调度</td></tr><tr><td><a href="https://github.com/JakeWharton/RxBinding" target="_blank" rel="noopener">RxBinding</a></td><td>提供用RxJava绑定Android UI的API</td></tr><tr><td><a href="https://github.com/google/agera" target="_blank" rel="noopener">Agera</a></td><td>Android上的响应式编程</td></tr><tr><td><a href="https://github.com/trello/RxLifecycle" target="_blank" rel="noopener">RxLifecycle</a></td><td>Lifecycle handling APIs for Android apps using RxJava</td></tr></tbody></table><h2 id="15-Log框架"><a href="#15-Log框架" class="headerlink" title="15. Log框架"></a>15. Log框架</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/orhanobut/logger" target="_blank" rel="noopener">Logger</a></td><td>简单，漂亮，强大的Android日志工具</td></tr><tr><td><a href="https://github.com/JakeWharton/hugo" target="_blank" rel="noopener">Hugo</a></td><td>在调试版本上注解的触发方法进行日志记录</td></tr><tr><td><a href="https://github.com/JakeWharton/timber" target="_blank" rel="noopener">Timber</a></td><td>一个小的，可扩展的日志工具</td></tr></tbody></table><h2 id="16-测试框架"><a href="#16-测试框架" class="headerlink" title="16. 测试框架"></a>16. 测试框架</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/mockito/mockito" target="_blank" rel="noopener">Mockito</a></td><td>Java编写的Mocking单元测试框架</td></tr><tr><td><a href="https://github.com/RobotiumTech/robotium" target="_blank" rel="noopener">Robotium</a></td><td>Android UI 测试</td></tr><tr><td><a href="https://github.com/robolectric/robolectric" target="_blank" rel="noopener">Robolectric</a></td><td>Android单元测试框架</td></tr></tbody></table><blockquote><p>Android自带很多测试工具：JUnit，Monkeyrunner，UiAutomator，Espresso等。</p></blockquote><h2 id="17-调试框架"><a href="#17-调试框架" class="headerlink" title="17. 调试框架"></a>17. 调试框架</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/facebook/stetho" target="_blank" rel="noopener">Stetho</a></td><td>调试Android应用的桥梁，使得可以利用Chrome开发者工具进行调试</td></tr></tbody></table><h2 id="18-性能优化"><a href="#18-性能优化" class="headerlink" title="18. 性能优化"></a>18. 性能优化</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/square/leakcanary" target="_blank" rel="noopener">LeakCanary</a></td><td>内存泄漏检测工具</td></tr><tr><td><a href="http://blog.zhaiyifan.cn/2016/01/16/BlockCanaryTransparentPerformanceMonitor/?utm_source=tuicool&utm_medium=referral" target="_blank" rel="noopener">BlockCanary</a></td><td>轻松找出Android App界面卡顿元凶</td></tr><tr><td><a href="https://github.com/ACRA/acra" target="_blank" rel="noopener">ACRA</a></td><td>Android应用程序崩溃报告</td></tr><tr><td><a href="https://github.com/google/guava" target="_blank" rel="noopener">Google Guava</a></td><td>Guava工程包含了若干被Google的 Java项目广泛依赖 的核心库，例如：集合 [collections] 、缓存 [caching] 、原生类型支持 [primitives support] 、并发库 [concurrency libraries] 、通用注解 [common annotations] 、字符串处理 [string processing] 、I/O 等等。 所有这些工具每天都在被Google的工程师应用在产品服务中。</td></tr><tr><td><a href="https://developers.google.cn/protocol-buffers/" target="_blank" rel="noopener">google protobuf</a></td><td>由google开发，并且在google内部使用。Protobuf的作用和xml、json是一回事，但他是二进制格式，性能好、效率高。</td></tr></tbody></table><h2 id="19-热修复"><a href="#19-热修复" class="headerlink" title="19. 热修复"></a>19. 热修复</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/Tencent/tinker" target="_blank" rel="noopener">tinker</a></td><td>腾讯开源的一个热修复框架</td></tr><tr><td><a href="https://github.com/alibaba/AndFix" target="_blank" rel="noopener">AndFix</a></td><td>alibaba热修复框架</td></tr><tr><td><a href="https://github.com/alibaba/dexposed" target="_blank" rel="noopener">dexposed</a></td><td>alibaba热修复框架</td></tr></tbody></table><h2 id="20-二维码"><a href="#20-二维码" class="headerlink" title="20. 二维码"></a>20. 二维码</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/zxing/zxing" target="_blank" rel="noopener">Zxing</a></td><td>一个二维码开源框架</td></tr><tr><td><a href="https://github.com/dm77/barcodescanner" target="_blank" rel="noopener">barcodescanner</a></td><td>使用的App有：薄荷</td></tr><tr><td><a href="https://github.com/bingoogolapple/BGAQRCode-Android" target="_blank" rel="noopener">BGAQRCode-Android</a></td><td>扫描二维码、扫描条形码、相册获取图片后识别、生成带 Logo 二维码、支持微博微信 QQ 二维码扫描样式</td></tr><tr><td><a href="https://github.com/journeyapps/zxing-android-embedded/tree/master/zxing-android-embedded/src/com/journeyapps/barcodescanner" target="_blank" rel="noopener">zxing-android-embedded</a></td><td>使用的App有：春雨医生，芒果TV</td></tr></tbody></table><h2 id="21-多媒体"><a href="#21-多媒体" class="headerlink" title="21. 多媒体"></a>21. 多媒体</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/Bilibili/ijkplayer" target="_blank" rel="noopener">ijkplayer</a></td><td>Bilibili开源的视频播放器</td></tr><tr><td><a href="https://github.com/Bilibili/DanmakuFlameMaster" target="_blank" rel="noopener">DanmakuFlameMaster</a></td><td>Android开源弹幕引擎·烈焰弹幕使，使用的App有：网易新闻</td></tr><tr><td><a href="https://github.com/yixia/VitamioBundle" target="_blank" rel="noopener">Vitamio</a></td><td>一款全能多媒体开发框架，全面支持硬件解码与 GPU 渲染</td></tr><tr><td><a href="https://github.com/FFmpeg/FFmpeg" target="_blank" rel="noopener">FFmpeg</a></td><td>一个基于C语言的多媒体开源框架</td></tr><tr><td><a href="https://cloud.baidu.com/doc/MCT/s/Ajwvz4yzr/" target="_blank" rel="noopener">百度智能云播放器</a></td><td>百度智能云推出的 Android 平台视频播放器</td></tr><tr><td><a href="https://github.com/google/ExoPlayer" target="_blank" rel="noopener">ExoPlayer</a></td><td>Google开源的视频播放器</td></tr></tbody></table><h2 id="22-汉语转拼音"><a href="#22-汉语转拼音" class="headerlink" title="22. 汉语转拼音"></a>22. 汉语转拼音</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/belerweb/pinyin4j" target="_blank" rel="noopener">pinyin4j</a></td><td>A copy of <a href="http://sourceforge.net/projects/pinyin4j" target="_blank" rel="noopener">http://sourceforge.net/projects/pinyin4j</a>, then deploy it to maven central repository.</td></tr><tr><td><a href="http://pinyin4j.sourceforge.net/" target="_blank" rel="noopener">TinyPinyin</a></td><td>适用于Java和Android的快速、低内存占用的汉字转拼音库。</td></tr><tr><td><a href="https://github.com/handsomezhou/PinyinSearchLibrary" target="_blank" rel="noopener">PinyinSearchLibrary</a></td><td>The library of PinyinSearch,a Java Library which provide data parsing methods, data matching method and so on for T9 search and Qwerty search.PinyinSearch = T9Search + QwertySearch</td></tr><tr><td><a href="https://code.google.com/archive/p/pinyin4android/" target="_blank" rel="noopener">pinyin4android</a></td><td>唯品会使用，2011年出了1.0版本后没更新了</td></tr></tbody></table><h2 id="23-下载"><a href="#23-下载" class="headerlink" title="23. 下载"></a>23. 下载</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/Aspsine/MultiThreadDownload" target="_blank" rel="noopener">MultiThreadDownload</a></td><td>使用的App有：薄荷</td></tr><tr><td><a href="https://github.com/lingochamp/FileDownloader" target="_blank" rel="noopener">FileDownloader</a></td><td>Android 文件下载引擎，稳定、高效、灵活、简单易用</td></tr><tr><td><a href="https://github.com/ssseasonnn/RxDownload" target="_blank" rel="noopener">RxDownload</a></td><td>基于RxJava和Retrofit打造的下载工具, 支持多线程下载和断点续传, 智能判断是否支持断点续传等功能</td></tr><tr><td><a href="https://github.com/wlfcolin/file-downloader" target="_blank" rel="noopener">file-downloader</a></td><td>安卓上轻量级Http/Https文件下载框架，我的目标是让安卓文件下载越简单越好，尽可能以最简洁明了的方式完成复杂需求。</td></tr></tbody></table><h2 id="24-动画"><a href="#24-动画" class="headerlink" title="24. 动画"></a>24. 动画</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/facebook/rebound" target="_blank" rel="noopener">facebook:rebound</a></td><td>A Java library that models spring dynamics and adds real world physics to your app</td></tr><tr><td><a href="https://github.com/florent37/ViewAnimator" target="_blank" rel="noopener">ViewAnimator</a></td><td>A fluent Android animation library</td></tr><tr><td><a href="https://github.com/lgvalle/Material-Animations" target="_blank" rel="noopener">Material-Animations</a></td><td>Android Transition animations explanation with examples</td></tr><tr><td><a href="https://github.com/daimajia/AndroidViewAnimations" target="_blank" rel="noopener">AndroidViewAnimations</a></td><td>Cute view animation collection.</td></tr><tr><td><a href="https://github.com/nhaarman/ListViewAnimations" target="_blank" rel="noopener">ListViewAnimations</a></td><td>An Android library which allows developers to easily add animations to ListView items</td></tr><tr><td><a href="https://github.com/wasabeef/recyclerview-animators" target="_blank" rel="noopener">recyclerview-animators</a></td><td>An Android Animation library which easily add itemanimator to RecyclerView items.</td></tr><tr><td><a href="https://github.com/gabrielemariotti/RecyclerViewItemAnimators" target="_blank" rel="noopener">RecyclerViewItemAnimators</a></td><td>An Android library which provides simple Item animations to RecyclerView items</td></tr><tr><td><a href="https://github.com/daimajia/AnimationEasingFunctions" target="_blank" rel="noopener">AnimationEasingFunctions</a></td><td>Android Animation Easing Functions. Let’s make animation more real!</td></tr><tr><td><a href="https://github.com/z56402344/BaseAnimation" target="_blank" rel="noopener">BaseAnimation</a></td><td>BaseAnimation收集网络Android相关动画集合，自定义控件等，近200多种源码</td></tr><tr><td><a href="https://github.com/kakajika/FragmentAnimations" target="_blank" rel="noopener">FragmentAnimations</a></td><td>3D animations for support-v4 Fragment transition.</td></tr><tr><td><a href="https://github.com/alphamu/AnimatedEditText" target="_blank" rel="noopener">AnimatedEditText</a></td><td>Androids EditText that animates the typed text. EditText is extended to create AnimatedEditText and a PinEntryEditText.</td></tr><tr><td><a href="https://github.com/ToxicBakery/ViewPagerTransforms" target="_blank" rel="noopener">ViewPagerTransforms</a></td><td>Library containing common animations needed for transforming ViewPager scrolling for Android v13+</td></tr><tr><td><a href="https://github.com/airbnb/lottie-android" target="_blank" rel="noopener">lottie-android</a></td><td>Render After Effects animations natively on Android and iOS</td></tr></tbody></table><h2 id="25-Android选择器类库"><a href="#25-Android选择器类库" class="headerlink" title="25. Android选择器类库"></a>25. Android选择器类库</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/prolificinteractive/material-calendarview" target="_blank" rel="noopener">material-calendarview</a></td><td>material design 风格的日历控件使用的App有：薄荷</td></tr><tr><td><a href="https://github.com/wdullaer/MaterialDateTimePicker" target="_blank" rel="noopener">MaterialDateTimePicker</a></td><td>Pick a date or time on Android in style，使用的App有：薄荷</td></tr><tr><td><a href="https://github.com/square/android-times-square" target="_blank" rel="noopener">android-times-square</a></td><td>Standalone Android widget for picking a single date from a calendar view.</td></tr><tr><td><a href="https://github.com/jdsjlzx/AndroidPicker" target="_blank" rel="noopener">AndroidPicker</a></td><td>安卓选择器类库，包括日期时间选择器、单项选择器、地址选择器、颜色选择器、文件目录选择器、数字选择器、星座选择器等。</td></tr><tr><td><a href="https://github.com/saiwu-bigkoo/Android-PickerView" target="_blank" rel="noopener">Android-PickerView</a></td><td>仿iOS的PickerView控件，有时间选择和选项选择并支持一二三级联动效果</td></tr><tr><td><a href="https://github.com/AigeStudio/WheelPicker" target="_blank" rel="noopener">WheelPicker</a></td><td>Simple and fantastic wheel view in realistic effect for android.</td></tr><tr><td><a href="https://github.com/DroidNinja/Android-FilePicker" target="_blank" rel="noopener">Android-FilePicker</a></td><td>Photopicker and document picker for android</td></tr><tr><td><a href="https://github.com/Carbs0126/NumberPickerView" target="_blank" rel="noopener">NumberPickerView</a></td><td>another NumberPicker with more flexible attributes on Android platform</td></tr><tr><td><a href="https://github.com/Airsaid/Android-PickerView-Library" target="_blank" rel="noopener">Android-PickerView-Library</a></td><td>Simple PickerView for Android</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;工欲善其事，必先利其器！开源框架奉上，支持开源，不造轮子，巨人带飞！持续更新，让开发更顺利。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="开发资源" scheme="http://hwb0011.github.io/categories/%E5%BC%80%E5%8F%91%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="Android" scheme="http://hwb0011.github.io/tags/Android/"/>
    
      <category term="框架" scheme="http://hwb0011.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="资源" scheme="http://hwb0011.github.io/tags/%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin征途（一）：简单APP的制作</title>
    <link href="http://hwb0011.github.io/2019/07/01/Kotlin%E5%BE%81%E9%80%94%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%AE%80%E5%8D%95APP%E7%9A%84%E5%88%B6%E4%BD%9C/"/>
    <id>http://hwb0011.github.io/2019/07/01/Kotlin征途（一）：简单APP的制作/</id>
    <published>2019-07-01T08:11:45.000Z</published>
    <updated>2020-02-21T03:01:07.392Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Kotlin语言在谷歌的大力推动下，将来必然需要应用在工作中，虽然现在依然是Java主导，但在GitHub上已经有很多库采用了Kotlin来编写，也有很多新开发的APP用的是Kotlin，大厂也开始试水了，是时候让Kotlin成为我们成功的基石了。</p></blockquote><a id="more"></a><h1 id="1-学习Koltin的必要性"><a href="#1-学习Koltin的必要性" class="headerlink" title="1. 学习Koltin的必要性"></a>1. 学习Koltin的必要性</h1><p><strong>在进入开发之前，我想先将学习Kotlin的必要性梳理一下。</strong></p><p>目前在网络上对Kotlin的批判很多，常常能看到 <em>《抛弃Java 改用 Kotlin 的六个月后,我后悔了》</em>、<em>《从Java到Kotlin,然后又回到Java!》</em>、<em>《Kotlin 并没有想的那么好》</em> 等等，根据2018年调查显示1/4的Java开发者在迁移后表示后悔，详细调查报告名为<a href="https://pusher.com/state-of-kotlin#adoption" target="_blank" rel="noopener">The State of Kotlin 2018</a>，该报告阐述了Koltin在2018年的情况。</p><p>但我本人认为，不论Kotlin目前的稳定性与健壮性如何，将来在Android开发中必然是有它的一席之地。甲骨文与谷歌的官司必然让谷歌不愿意看到自家的系统被他人握有把柄，openJdk不会是一个长久之计。作为一只不断学习进取的程序猿，学习Kotlin语言也是一条不错的路。</p><p>就目前来说，Kotlin还有许多不足，建议熟悉Kotlin语法教程后可以去看看 <em>《Kotlin 的陷阱以及如何避免》</em> 之类的文章。当然，一门语言的发展必然要踩许许多多的坑，Kotlin还很年轻，我们应该给它更多的宽容。而且Kotlin相较于Java还是有很多优点的，用Kotlin取缔Java的优缺点并存。</p><p>在我看来，学习并尝试使用Kotlin开发Android项目是很有必要的，但贸然使用Kotlin直接在老旧项目中取缔Java也许会导致比较严重的后果。我建议在老旧的项目中使用Kotlin还是需要多斟酌，而在新的项目中完全可以直接使用Kotlin，多观望Kotlin的更新情况，适时更新项目中使用的Kotlin版本，让你的项目和你一起成长。</p><h1 id="2-用Kotlin制作一个简单的APP"><a href="#2-用Kotlin制作一个简单的APP" class="headerlink" title="2. 用Kotlin制作一个简单的APP"></a>2. 用Kotlin制作一个简单的APP</h1><p>目前我只在AS中开发APP，本文中所用也是AS，建议使用Eclipse开发的童鞋尽早加入AS的大军。</p><h2 id="2-1-用AS建立一个Kotlin-Android项目"><a href="#2-1-用AS建立一个Kotlin-Android项目" class="headerlink" title="2.1 用AS建立一个Kotlin Android项目"></a>2.1 用AS建立一个Kotlin Android项目</h2><p>首先是需要建立一个新的项目，打开AS软件，并选择<code>Start a new Android Studio project</code>，如图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/img0616_01.png" alt="新建项目" title="">                </div>                <div class="image-caption">新建项目</div>            </figure><p>随后将APP name、domain、location根据所需配置好，在底部将<code>Include Kotlin Support</code>勾选上，如图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/img0616_02.png" alt="勾选Kotlin支持" title="">                </div>                <div class="image-caption">勾选Kotlin支持</div>            </figure><p>右下角点Next后，进入Target Android Device选择界面，这里根据所需配置好直接Next就好，如图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/img0616_03.png" alt="Target Android Device选择" title="">                </div>                <div class="image-caption">Target Android Device选择</div>            </figure><p>接下来选择<code>Add No Activity</code>，不然AS直接就建立了一个可以直接运行的Hello World APP，我们还是体会一下建立Kotlin Activity的过程，如图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/img0616_04.png" alt="选择Add No Activity" title="">                </div>                <div class="image-caption">选择Add No Activity</div>            </figure><p>Finish以后，等待AS建立一个新的项目并初始编译完成，我们就可以开始我们的第一个Kotlin APP的制作啦。</p><p>在Kotlin项目中，相对于Java的Android项目主要有两个区别：    </p><ol><li>项目目录下的<code>build.gradle</code>文件的<code>buildscript</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ext.kotlin_version &#x3D; &#39;1.3.41&#39;</span><br><span class="line">    ...</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        ...</span><br><span class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>app目录下的<code>build.gradle</code>文件的<code>plugin</code>和<code>dependencies</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">apply plugin: &#39;kotlin-android&#39;</span><br><span class="line">apply plugin: &#39;kotlin-android-extensions&#39;</span><br><span class="line">...</span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    implementation &quot;org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version&quot;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，在已有的Java Android项目中做出上述改动后，该项目也就可以用上Kotlin做开发啦，Kotlin和Java也可以很好的协同工作，当然，如果要这么做，请仔细斟酌并进行足够的测试。</p><h2 id="2-2-添加一个Activity"><a href="#2-2-添加一个Activity" class="headerlink" title="2.2 添加一个Activity"></a>2.2 添加一个Activity</h2><p>在项目目录中，选中<code>app/src/main/包名文件夹</code>单击鼠标右键，在弹出菜单中选中<code>New</code>菜单，接着在弹出菜单中选中<code>Activity</code>菜单，最后在弹出菜单中选中<code>Empty Activity</code>单击鼠标左键，如图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/img0616_05.png" alt="选择Empty Activity" title="">                </div>                <div class="image-caption">选择Empty Activity</div>            </figure><p>AS将弹出一个Activity的配置对话框，将各个属性配置好，注意由于项目中没有启动的第一个Activity，所以要勾选<code>Launcher Activity</code>，同时注意<code>Source Language</code>的选项要是<code>Kotlin</code>，如图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/img0616_06.png" alt="配置Activity" title="">                </div>                <div class="image-caption">配置Activity</div>            </figure><p>点击Finish后，AS会建立相应的layout和kt文件，kt文件就相当于java文件。现在这个新的Activity还是一个空白的页面，我们可以给它加一个TextView，给它设置内容，看看Kotlin与Java的不同之处。</p><p>layout与之前还是一样的，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/text_view"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Kotlin的不同还是比较多的，代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import android.support.v7.app.AppCompatActivity</span><br><span class="line">import android.os.Bundle</span><br><span class="line">import kotlinx.android.synthetic.main.activity_main.*</span><br><span class="line"></span><br><span class="line">class MainActivity : AppCompatActivity() &#123;</span><br><span class="line"></span><br><span class="line">    override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        text_view.text &#x3D; &quot;Hello World !&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一个Hello World的TextView就可以显示在界面中了，run一遍看看效果和Java的没什么区别。简单看一下kt文件我们可以看到一些和Java的区别：</p><ol><li><p>导入了一个<code>kotlinx.android.synthetic.main.activity_main.*</code>，这个import可以让layout中的控件可以直接用id来调用，省略了<code>findViewById()</code>这一个步骤。</p></li><li><p>Kotlin去掉了语句末尾的<code>;</code>，让少写了’;’而导致编译失败的问题从此消失。</p></li><li><p>继承关系直接用<code>:</code>表示，接口的实现也是用的<code>:</code>表示，似乎在精简代码的同时让人有点迷糊。</p></li><li><p>override变成了一个修饰语，不再是注解的形式。</p></li><li><p>变量的表示使用了<code>变量名: 类名</code>的形式，<code>?</code>代表了此变量可以为空，空安全也是Kotlin的主打特点。</p></li><li><p>对象的属性看上去可以直接操作，实际是来自<code>get()/set()</code>，似乎在精简代码的同时让人感觉增加了耦合性。</p></li></ol><p>当然区别不止这几点，只是在一个最简单的APP中都存在的上述几点区别，可以看出一些Kotlin的设计理念，应该旨在解决一些Java过于冗杂和不太安全的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Kotlin语言在谷歌的大力推动下，将来必然需要应用在工作中，虽然现在依然是Java主导，但在GitHub上已经有很多库采用了Kotlin来编写，也有很多新开发的APP用的是Kotlin，大厂也开始试水了，是时候让Kotlin成为我们成功的基石了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Kotlin征途" scheme="http://hwb0011.github.io/categories/Kotlin%E5%BE%81%E9%80%94/"/>
    
    
      <category term="Android" scheme="http://hwb0011.github.io/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://hwb0011.github.io/tags/Kotlin/"/>
    
      <category term="编程" scheme="http://hwb0011.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown使用教程(In Atom)</title>
    <link href="http://hwb0011.github.io/2019/06/15/MarkDown%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B(In%20Atom)/"/>
    <id>http://hwb0011.github.io/2019/06/15/MarkDown使用教程(In Atom)/</id>
    <published>2019-06-15T08:11:45.000Z</published>
    <updated>2020-02-21T03:00:45.723Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>程序猿都爱写博客，在写博客的过程中，大量运用的就是MarkDown语法了。MarkDown不只是用来写博客，日常生活中的感悟、工作中的心得体会、项目任务安排等等大篇幅的文章都可以用MarkDown来迅速的完成具有一定显示效果的文本。</p></blockquote><a id="more"></a><h1 id="1-MarkDown的编写工具"><a href="#1-MarkDown的编写工具" class="headerlink" title="1. MarkDown的编写工具"></a>1. <code>MarkDown</code>的编写工具</h1><blockquote><p>工欲善其事，必先利其器，要学习MarkDown，编写工具是必不可少的。</p></blockquote><p>其实严格来说，<code>MarkDown</code>没有专门的编写工具，通过简单的文本编辑器即可编写<code>MarkDown</code>文本，比如<code>Windows</code>的记事本。但简单的文本编辑器功能欠缺，没有高亮的文字表现，更没有文本效果可言，就像没有人用记事本写代码一样，最起码也得用个<code>Edit Plus</code>。</p><p>笔者菜鸟一枚，最近开始接触<code>MarkDown</code>，挑选的编辑器是<a href="https://atom.io/" target="_blank" rel="noopener">Atom</a>，<code>GitHub</code>出品的简洁强大的编辑器，插件众多，支持的语言也比较多，也是一个不错的前端开发编辑器。</p><h2 id="1-1-simplified-chinese-menu中文插件"><a href="#1-1-simplified-chinese-menu中文插件" class="headerlink" title="1.1 simplified-chinese-menu中文插件"></a>1.1 <code>simplified-chinese-menu</code>中文插件</h2><p>使用<code>Atom</code>时，首先对满屏的英文就有点抗拒，虽然写程序都用的英文，但对一些菜单、提示语还是更喜欢中文。</p><p><code>simplified-chinese-menu</code>这个插件基本将<code>Atom</code>里的各个菜单及提示语做到了汉化，瑕疵比较少，<code>Atom</code>装上这个插件，新手用起来方便多了。</p><h2 id="1-2-markdown-scroll-sync同步滚动插件"><a href="#1-2-markdown-scroll-sync同步滚动插件" class="headerlink" title="1.2 markdown-scroll-sync同步滚动插件"></a>1.2 <code>markdown-scroll-sync</code>同步滚动插件</h2><p><code>markdown-scroll-sync</code>同步滚动插件可以让预览与文本保持同步，减少查看预览的时间，确实是更方便了一些。</p><h2 id="1-3-markdown-table-editor表格编辑插件"><a href="#1-3-markdown-table-editor表格编辑插件" class="headerlink" title="1.3 markdown-table-editor表格编辑插件"></a>1.3 <code>markdown-table-editor</code>表格编辑插件</h2><p><code>MarkDown</code>在编写表格时稍微有些吃力，空格、对齐什么的，手敲太慢了有木有！！！<code>markdown-table-editor</code>表格编辑插件，让表格的编写更简单，你值得拥有。</p><h1 id="2-MarkDown的基础语法"><a href="#2-MarkDown的基础语法" class="headerlink" title="2. MarkDown的基础语法"></a>2. <code>MarkDown</code>的基础语法</h1><p>如果不算扩展，Markdown的语法绝对简单到让你爱不释手！Markdown语法分为如下几大部分：</p><p><code>标题</code> <code>段落</code> <code>引用</code> <code>代码块</code> <code>强调</code> <code>列表</code> <code>分割线</code> <code>链接</code> <code>图片</code> <code>表格</code> <code>流程图</code></p><h2 id="2-1-标题"><a href="#2-1-标题" class="headerlink" title="2.1 标题"></a>2.1 标题</h2><p>利用<code>#</code>标识标题，最对可以标识六级标题，<code>#</code>是一级标题，字体最大，<code>######</code>是六级标题，字体最小，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><p>效果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/标题示例图片.png" alt="示例图片" title="">                </div>                <div class="image-caption">示例图片</div>            </figure><h2 id="2-2-段落"><a href="#2-2-段落" class="headerlink" title="2.2 段落"></a>2.2 段落</h2><p>段落，在word中以回车换行来标识，而在md中需要一行空行进行分割两个段落，同一个段落中的多个空格、tab、回车符将被删减为一个空格（部分展示md的浏览器中，回车符可以表现为段内换行），在段落中允许存在换行，使用方式为两个以上空格加回车符，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这是段落一，下面是一行空行。</span><br><span class="line"></span><br><span class="line">这是段落二，这是一个空格 ，这是五个空格     ，这是两个tab   ，这是一个回车符</span><br><span class="line">，下面将用两个空格加回车进行段落内换行  </span><br><span class="line">换行完成，还是段落二。</span><br><span class="line"></span><br><span class="line">这是段落三。</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>这是段落一，下面是一行空行。</p><p>这是段落二，这是一个空格 ，这是五个空格     ，这是两个tab   ，这是一个回车符<br>，下面将用两个空格加回车进行段落内换行<br>换行完成，还是段落二。</p><p>这是段落三。</p><h2 id="2-3-引用"><a href="#2-3-引用" class="headerlink" title="2.3 引用"></a>2.3 引用</h2><p>md中使用<code>&gt;</code>来标识一个段落的引用，引用可以使用多个<code>&gt;</code>进行嵌套，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;这里是引用的段落</span><br><span class="line">&gt;&gt;这里是一层嵌套的引用</span><br><span class="line">&gt;&gt;&gt;这里是两层嵌套的引用</span><br></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>这里是引用的段落</p><blockquote><p>这里是一层嵌套的引用</p><blockquote><p>这里是两层嵌套的引用</p></blockquote></blockquote></blockquote><h2 id="2-4-代码块"><a href="#2-4-代码块" class="headerlink" title="2.4 代码块"></a>2.4 代码块</h2><p>作为程序猿，代码在博客中必不可少，md中对代码块是有三种标识方式的。第一中是行内代码标识，用一对反引号来包裹几个字符，效果有些类似软件中常见的标签。第二种是在行前添加四个空格来标识一行代码，但此行前一行只能为空行或者代码块。第三种是使用一对三个反引号包裹一大段文字，可以标识一段代码，在三个反引号后可以加语言名称来达到关键字高亮效果。（PS：反引号在键盘左上角<code>Esc</code>按钮下方，第一次用时笔者还以为是单引号）示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">这里有一个行内代码&#96;code&#96;，下面有两行代码：</span><br><span class="line"></span><br><span class="line">    a line codes</span><br><span class="line">    a line codes</span><br><span class="line"></span><br><span class="line">下面有一段代码：</span><br><span class="line">（&#96;&#96;&#96;）</span><br><span class="line">code and code and code</span><br><span class="line">code and code and code</span><br><span class="line">（&#96;&#96;&#96;）</span><br><span class="line"></span><br><span class="line">下面有一段Java代码：</span><br><span class="line">（&#96;&#96;&#96;java）</span><br><span class="line">public class Hello&#123;</span><br><span class="line">  public static void main (String[] args) &#123;</span><br><span class="line">    System.out.println(&quot;Hello world !&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">（&#96;&#96;&#96;）</span><br></pre></td></tr></table></figure><blockquote><p>注：为了防止代码块标识符被转译，笔者在三个反引号前后加了括号，使用时应去除括号。</p></blockquote><p>效果如下：</p><p>这里有一个行内代码<code>code</code>，下面有两行代码：</p><pre><code>a line codesa line codes</code></pre><p>下面有一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code and code and code</span><br><span class="line">code and code and code</span><br></pre></td></tr></table></figure><p>下面有一段Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello world !"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-强调"><a href="#2-5-强调" class="headerlink" title="2.5 强调"></a>2.5 强调</h2><p>强调效果有粗体和斜体两种，一对<code>*</code>符号包裹的字符会显示为斜体，而一对<code>**</code>包裹的字符会显示为粗体，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是*斜体*，这是**粗体**</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>这是<em>斜体</em>，这是<strong>粗体</strong></p><h2 id="2-6-列表"><a href="#2-6-列表" class="headerlink" title="2.6 列表"></a>2.6 列表</h2><p>列表的编写相当方便，无序列表只需在行前加<code>+</code>/<code>-</code>/<code>*</code>符号加空格即可，有序列表则在行前加<code>1.</code>等序号加空格即可，列表内容加入<code>[ ]</code>或<code>[x]</code>可用来标识待办事项，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+ 无序列表</span><br><span class="line">- 无序列表</span><br><span class="line">* 无序列表</span><br><span class="line"></span><br><span class="line">1. 有序列表</span><br><span class="line">2. 有序列表</span><br><span class="line">3. 有序列表</span><br><span class="line"></span><br><span class="line">* [ ] 待办1</span><br><span class="line">* [x] 待办2</span><br><span class="line">1. [ ] 待办3</span><br><span class="line">2. [x] 待办4</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li>无序列表</li></ul><ul><li>无序列表</li></ul><ul><li>无序列表</li></ul><ol><li>有序列表</li><li>有序列表</li><li>有序列表</li></ol><ul><li><input disabled="" type="checkbox"> 待办1</li><li><input checked="" disabled="" type="checkbox"> 待办2</li></ul><ol><li><input disabled="" type="checkbox"> 待办3</li><li><input checked="" disabled="" type="checkbox"> 待办4</li></ol><h2 id="2-7-分割线"><a href="#2-7-分割线" class="headerlink" title="2.7 分割线"></a>2.7 分割线</h2><p>分割线在各个浏览器的显示形式都有所不同，使用三个<code>*</code>/<code>-</code>/<code>_</code>均可以实现一根分割线，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br><span class="line">___</span><br></pre></td></tr></table></figure><p>效果如下：</p><hr><hr><hr><h2 id="2-8-链接"><a href="#2-8-链接" class="headerlink" title="2.8 链接"></a>2.8 链接</h2><p>在md中想要跳转到某个外链，可以使用两种方式完成，第一种是md语法<code>[超链接名](超链接地址 &quot;超链接title&quot;)</code>title可加可不加，这种方式可能无法在当前标签页中打开网址，第二种是使用html中的<code>&lt;a&gt;</code>标签，可以指定target来控制网址打开方式。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[百度](http:&#x2F;&#x2F;www.baidu.com&#x2F; &quot;百度一下&quot;)</span><br><span class="line"></span><br><span class="line">&lt;a href&#x3D;&quot;http:&#x2F;&#x2F;www.baidu.com&#x2F;&quot; target&#x3D;&quot;_blank&quot;&gt;百度&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><a href="http://www.baidu.com/" target="_blank" rel="noopener" title="百度一下">百度</a></p><p><a href="http://www.baidu.com/" target="_blank_">百度</a></p><h2 id="2-9-图片"><a href="#2-9-图片" class="headerlink" title="2.9 图片"></a>2.9 图片</h2><p>图片的使用方式有些类似链接，在链接的格式前方加<code>!</code>即可，即<code>![图片名](图片地址)</code>，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![github头像](https:&#x2F;&#x2F;github.com&#x2F;fluidicon.png)</span><br></pre></td></tr></table></figure><p>效果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/fluidicon.png" alt="github头像" title="">                </div>                <div class="image-caption">github头像</div>            </figure><h2 id="2-10-表格"><a href="#2-10-表格" class="headerlink" title="2.10 表格"></a>2.10 表格</h2><p>常常在文章中需要使用表格来罗列事项、比对事物，md支持了表格的简单形式，使用方式即使用<code>|</code>和<code>-</code>符号进行组合，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|   表头一   |   表头二   |</span><br><span class="line">| --------- | --------- |</span><br><span class="line">| 表格内容一 | 表格内容二 |</span><br><span class="line">| 表格内容三 | 表格内容四 |</span><br></pre></td></tr></table></figure><blockquote><p>注：对齐居中等不需要太注意</p></blockquote><p>效果如下：</p><table><thead><tr><th>表头一</th><th>表头二</th></tr></thead><tbody><tr><td>表格内容一</td><td>表格内容二</td></tr><tr><td>表格内容三</td><td>表格内容四</td></tr></tbody></table><h2 id="2-11-流程图"><a href="#2-11-流程图" class="headerlink" title="2.11 流程图"></a>2.11 流程图</h2><p>markdown本身并不能直接转换流程图，但可以通过插件来完成，感兴趣的童鞋可以了解一下。不过笔者看来在markdown里写流程图还是比较麻烦的，简单的还好，复杂一点的就有点烧脑了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;程序猿都爱写博客，在写博客的过程中，大量运用的就是MarkDown语法了。MarkDown不只是用来写博客，日常生活中的感悟、工作中的心得体会、项目任务安排等等大篇幅的文章都可以用MarkDown来迅速的完成具有一定显示效果的文本。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工作之余" scheme="http://hwb0011.github.io/categories/%E5%B7%A5%E4%BD%9C%E4%B9%8B%E4%BD%99/"/>
    
    
      <category term="MarkDown" scheme="http://hwb0011.github.io/tags/MarkDown/"/>
    
      <category term="博客" scheme="http://hwb0011.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>利用GitHub和Hexo打造免费的个人博客</title>
    <link href="http://hwb0011.github.io/2019/06/01/%E5%88%A9%E7%94%A8GitHub%E5%92%8CHexo%E6%89%93%E9%80%A0%E5%85%8D%E8%B4%B9%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://hwb0011.github.io/2019/06/01/利用GitHub和Hexo打造免费的个人博客/</id>
    <published>2019-06-01T03:30:30.000Z</published>
    <updated>2019-06-12T08:12:52.061Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每个程序猿都需要一个个人博客，目前广泛出现在大家视野里的有CSDN、博客园、简书，但是他们却没有给用户一个专属的站点、一个好记的域名。你需要一个<code>http://xxx.xxx.xxx/</code>格式的网址，一个自由书写代码的站点，一个真正的个人博客。</p></blockquote><a id="more"></a><h1 id="1-GitHub提供的免费网站"><a href="#1-GitHub提供的免费网站" class="headerlink" title="1. GitHub提供的免费网站"></a>1. GitHub提供的免费网站</h1><h2 id="1-1-GitHub——面向开源及私有软件项目的托管平台"><a href="#1-1-GitHub——面向开源及私有软件项目的托管平台" class="headerlink" title="1.1 GitHub——面向开源及私有软件项目的托管平台"></a>1.1 GitHub——面向开源及私有软件项目的托管平台</h2><p><a href="https://github.com/" target="_blank" rel="noopener">GitHub官网</a></p><blockquote><p>作为开源代码库以及版本控制系统，Github拥有超过900万开发者用户。随着越来越多的应用程序转移到了云上，Github已经成为了管理软件开发以及发现已有代码的首选方法。<br><em>——来源：百度百科</em></p></blockquote><p>GitHub是目前最大的代码仓库，如果你还没有GitHub账号的话，就赶紧去官网注册一个吧。</p><h2 id="1-2-GitHub-Pages——免费提供最基础的静态网站"><a href="#1-2-GitHub-Pages——免费提供最基础的静态网站" class="headerlink" title="1.2 GitHub Pages——免费提供最基础的静态网站"></a>1.2 GitHub Pages——免费提供最基础的静态网站</h2><p><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages官网</a></p><p>每个GitHub账户都可以免费开一个自己的静态网站（域名为 username.github.io），该网站由GitHub Pages提供，省去了域名、服务器、备案等一系列建站需要考虑的问题，只需要一份静态网站的代码即可。</p><p>首先你需要创建一个GitHub Pages repository。GitHub Pages repository跟普通的repository是一样的，唯一的区别就是他的名字必须叫做<code>username.gihub.io</code>。这个官方教程 GitHub Pages 写的十分好懂，按这个做完之后你就有了一个你的网址<code>username.github.io</code>！<strong>比如你的GitHub用户名是<code>abc</code>，那么你的repository名称和网址就是<code>abc.gihub.io</code></strong></p><p>现在离一个好网站只差一步了，就是把某个好网站的所有文件拷贝到你的库里面。<br>GitHub官方建议你使用博客生成工具<code>Jekyll</code> 。GitHub在库的设置里面还提供Jekyll主题选择。</p><p>本文将介绍的是<code>Hexo</code>生成工具。</p><h1 id="2-Hexo搭建的静态博客网站"><a href="#2-Hexo搭建的静态博客网站" class="headerlink" title="2. Hexo搭建的静态博客网站"></a>2. Hexo搭建的静态博客网站</h1><h2 id="2-1-Hexo——快速、简洁且高效的博客框架"><a href="#2-1-Hexo——快速、简洁且高效的博客框架" class="headerlink" title="2.1 Hexo——快速、简洁且高效的博客框架"></a>2.1 Hexo——快速、简洁且高效的博客框架</h2><p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo官网</a></p><blockquote><p><strong>超快速度</strong><br>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。<br><strong>支持 Markdown</strong><br>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。<br><strong>一键部署</strong><br>只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。<br><strong>丰富的插件</strong><br>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p></blockquote><h3 id="2-1-1-安装前提"><a href="#2-1-1-安装前提" class="headerlink" title="2.1.1 安装前提"></a>2.1.1 安装前提</h3><p>安装<code>Hexo</code>相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p><ul><li>Node.js (Should be at least nodejs 6.9)</li><li>Git</li></ul><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用<code>npm</code>即可完成<code>Hexo</code>的安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p><blockquote><p><strong>Mac 用户</strong><br>您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。</p></blockquote><h3 id="2-1-2-安装-Git"><a href="#2-1-2-安装-Git" class="headerlink" title="2.1.2 安装 Git"></a>2.1.2 安装 Git</h3><p>Windows：下载并安装 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a>.   Mac：使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">Homebrew</a>, <a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> ：<code>brew install git</code>;或下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a> 安装。<br>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code>。   Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code>。</p><blockquote><p><strong>Windows 用户</strong><br>由于众所周知的原因，从上面的链接下载git for windows最好挂上一个代理，否则下载速度十分缓慢。也可以参考<a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">这个页面</a>，收录了存储于百度云的下载地址。</p></blockquote><h3 id="2-1-3-安装-Node-js"><a href="#2-1-3-安装-Node-js" class="headerlink" title="2.1.3 安装 Node.js"></a>2.1.3 安装 Node.js</h3><p>安装 Node.js 的最佳方式是使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>。</p><p>cURL:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl https:&#x2F;&#x2F;raw.github.com&#x2F;creationix&#x2F;nvm&#x2F;v0.33.11&#x2F;install.sh | sh</span><br></pre></td></tr></table></figure><p>Wget:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -qO- https:&#x2F;&#x2F;raw.github.com&#x2F;creationix&#x2F;nvm&#x2F;v0.33.11&#x2F;install.sh | sh</span><br></pre></td></tr></table></figure><p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvm install stable</span><br></pre></td></tr></table></figure><p>或者您也可以下载 <a href="http://nodejs.org/" target="_blank" rel="noopener">安装程序</a> 来安装。</p><blockquote><p><strong>Windows 用户</strong><br>对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。<br>另外，您也可以使用Git Bash，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。</p></blockquote><h3 id="2-1-4-安装-Hexo"><a href="#2-1-4-安装-Hexo" class="headerlink" title="2.1.4 安装 Hexo"></a>2.1.4 安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="2-1-5-建站"><a href="#2-1-5-建站" class="headerlink" title="2.1.5 建站"></a>2.1.5 建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h2 id="2-2-Hexo的自定义配置及博客主题"><a href="#2-2-Hexo的自定义配置及博客主题" class="headerlink" title="2.2 Hexo的自定义配置及博客主题"></a>2.2 Hexo的自定义配置及博客主题</h2><h3 id="2-2-1-config-yml"><a href="#2-2-1-config-yml" class="headerlink" title="2.2.1 _config.yml"></a>2.2.1 _config.yml</h3><p>网站的配置信息，您可以在此配置大部分的参数。文件内各个配置参数均有详细备注，按规则填入所需即可。</p><h3 id="2-2-2-package-json"><a href="#2-2-2-package-json" class="headerlink" title="2.2.2 package.json"></a>2.2.2 package.json</h3><p>应用程序的信息，EJS、 Stylus 和 Markdown renderer 已默认安装，您可以自由移除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;hexo&quot;: &quot;^3.8.0&quot;,</span><br><span class="line">    &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;,</span><br><span class="line">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</span><br><span class="line">    &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;,</span><br><span class="line">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;,</span><br><span class="line">    &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^0.3.3&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-scaffolds"><a href="#2-2-3-scaffolds" class="headerlink" title="2.2.3 scaffolds"></a>2.2.3 scaffolds</h3><p>模版文件夹，当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h3 id="2-2-4-source"><a href="#2-2-4-source" class="headerlink" title="2.2.4 source"></a>2.2.4 source</h3><p>资源文件夹是存放用户资源的地方，除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p><h3 id="2-2-5-themes"><a href="#2-2-5-themes" class="headerlink" title="2.2.5 themes"></a>2.2.5 themes</h3><p>主题文件夹，Hexo 会根据主题来生成静态页面。GitHub上存在许多第三方主题，根据主题的文档介绍引入Hexo项目中，会在主题文件夹下生成一个相应的文件夹，再修改_config.xml文件夹的theme属性即可。</p><p>本文将要介绍的是<code>Indigo</code>主题。</p><h1 id="3-Indigo主题——Material-Design-风格的Hexo主题"><a href="#3-Indigo主题——Material-Design-风格的Hexo主题" class="headerlink" title="3. Indigo主题——Material Design 风格的Hexo主题"></a>3. Indigo主题——Material Design 风格的Hexo主题</h1><p><a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">Indigo in GitHub</a></p><blockquote><p>仅支持 IE10+ 等现代浏览器。<br>去 jQuery，更轻。相信现代浏览器的原生兼容性。<br>使用 Less 作为 css 预处理器，需要安装 hexo-renderer-less。<br>添加了英文字体支持 Roboto。<br>添加了一些波纹效果。<br>无前端依赖的分享实现。<br>基于静态数据的站内搜索，无第三方侵入。<br>支持文章打赏。</p></blockquote><p>现有两个主题分支，我的博客中使用的是<code>card</code>分支卡片风格主题，<code>master</code>分支是旧版平铺式风格主题。</p><h2 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h2><p>安装需确认你的 Hexo 版本在 3.0 以上，以及 Node 版本为 6.x 以上，在 Hexo 根目录，执行以下命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:yscoder&#x2F;hexo-theme-indigo.git themes&#x2F;indigo</span><br></pre></td></tr></table></figure><h3 id="3-1-1-切换主题"><a href="#3-1-1-切换主题" class="headerlink" title="3.1.1 切换主题"></a>3.1.1 切换主题</h3><p>执行<code>git branch</code>显示所有本地分支，如果只存在一个分支，可以执行下面的命令获取另一分支的主题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 获取远程 card 分支，并切换</span><br><span class="line">$ git checkout -b card origin&#x2F;card</span><br><span class="line"></span><br><span class="line"># 获取远程 master 分支，并切换</span><br><span class="line">$ git checkout -b master origin&#x2F;master</span><br></pre></td></tr></table></figure><p>此命令只需执行一次，之后使用<code>git checkout [branch]</code>命令在两个主题之间切换。</p><h3 id="3-1-2-依赖安装"><a href="#3-1-2-依赖安装" class="headerlink" title="3.1.2 依赖安装"></a>3.1.2 依赖安装</h3><p>还是在 Hexo 根目录，如果以下插件已安装过，无需再次安装。</p><p><strong>Less</strong></p><p>主题默认使用 less 作为 css 预处理工具。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-renderer-less --save</span><br></pre></td></tr></table></figure><p><strong>Feed</strong></p><p>用于生成 rss。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p><strong>Json-content</strong></p><p>用于生成静态站点数据，用作站内搜索的数据源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-json-content --save</span><br></pre></td></tr></table></figure><p><strong>QRCode</strong></p><p>用于生成微信分享二维码。</p><p>可选，不安装时会请求<code>jiathis Api</code>生成二维码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-helper-qrcode --save</span><br></pre></td></tr></table></figure><h3 id="3-1-3-开启标签页"><a href="#3-1-3-开启标签页" class="headerlink" title="3.1.3 开启标签页"></a>3.1.3 开启标签页</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>修改 hexo/source/tags/index.md 的元数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: tags</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="3-1-4-开启分类页"><a href="#3-1-4-开启分类页" class="headerlink" title="3.1.4 开启分类页"></a>3.1.4 开启分类页</h3><p>仅 card theme 支持。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>修改 hexo/source/categories/index.md 的元数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: categories</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="3-2-常见问题"><a href="#3-2-常见问题" class="headerlink" title="3.2 常见问题"></a>3.2 常见问题</h2><h3 id="3-2-1-如何设置文章摘要"><a href="#3-2-1-如何设置文章摘要" class="headerlink" title="3.2.1 如何设置文章摘要"></a>3.2.1 如何设置文章摘要</h3><p>在 Markdown 中加<code>&lt;!-- more --&gt;</code></p><h3 id="3-2-2-文章如何添加多个标签"><a href="#3-2-2-文章如何添加多个标签" class="headerlink" title="3.2.2 文章如何添加多个标签"></a>3.2.2 文章如何添加多个标签</h3><p>有两种多标签格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tags: [a, b, c]</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line">  - a</span><br><span class="line">  - b</span><br><span class="line">  - c</span><br></pre></td></tr></table></figure><h3 id="3-2-3-修改-brand-图片（菜单上方背景图）"><a href="#3-2-3-修改-brand-图片（菜单上方背景图）" class="headerlink" title="3.2.3 修改 brand 图片（菜单上方背景图）"></a>3.2.3 修改 brand 图片（菜单上方背景图）</h3><p>替换 themes\indigo\source\img\brand.jpg，保持原文件名不变。</p><h3 id="3-2-4-如何在文章中使用图标"><a href="#3-2-4-如何在文章中使用图标" class="headerlink" title="3.2.4 如何在文章中使用图标"></a>3.2.4 如何在文章中使用图标</h3><p>先到 <a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">fontawesome</a> 找到你需要的图标名，比如：book，按以下格式使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class&#x3D;&quot;icon icon-book&quot;&gt;&lt;&#x2F;i&gt;</span><br></pre></td></tr></table></figure><p>图标样式前缀均为 icon，此外还有 5 个图标大小调节类和 1 个间距类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 1.3倍大小 --&gt;</span><br><span class="line">&lt;i class&#x3D;&quot;icon icon-book icon-lg&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">&lt;!-- 2倍大小 --&gt;</span><br><span class="line">&lt;i class&#x3D;&quot;icon icon-book icon-2x&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">&lt;!-- 3倍大小 --&gt;</span><br><span class="line">&lt;i class&#x3D;&quot;icon icon-book icon-3x&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">&lt;!-- 4倍大小 --&gt;</span><br><span class="line">&lt;i class&#x3D;&quot;icon icon-book icon-4x&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">&lt;!-- 5倍大小 --&gt;</span><br><span class="line">&lt;i class&#x3D;&quot;icon icon-book icon-5x&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">&lt;!-- 5px右边距 --&gt;</span><br><span class="line">&lt;i class&#x3D;&quot;icon icon-book icon-pr&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">&lt;!-- 5px左边距 --&gt;</span><br><span class="line">&lt;i class&#x3D;&quot;icon icon-book icon-pl&quot;&gt;&lt;&#x2F;i&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-5-个别图标无法显示"><a href="#3-2-5-个别图标无法显示" class="headerlink" title="3.2.5 个别图标无法显示"></a>3.2.5 个别图标无法显示</h3><p>如果你的浏览器安装了 <code>ADBlock</code>，它会屏蔽 <code>SNS</code> 相关的内容，比如：Github。</p><p>解决办法：可配置 ADBlock 不在你的站点运行。</p><h3 id="3-2-6-生成站点后没有样式"><a href="#3-2-6-生成站点后没有样式" class="headerlink" title="3.2.6 生成站点后没有样式"></a>3.2.6 生成站点后没有样式</h3><p>安装less</p><h3 id="3-2-7-自行修改样式线上不生效"><a href="#3-2-7-自行修改样式线上不生效" class="headerlink" title="3.2.7 自行修改样式线上不生效"></a>3.2.7 自行修改样式线上不生效</h3><p>因为主题默认引用 <code>cdn</code> 样式，只有主题更新时，<code>cdn</code> 中的样式才会变化。 如果想使用自己修改的样式，需要把修改配置中的<code>cdn: false</code>。这样就不在引用<code>cdn</code>资源，使用本地资源了。</p><h3 id="3-2-8-更改样式后网站没有生效"><a href="#3-2-8-更改样式后网站没有生效" class="headerlink" title="3.2.8 更改样式后网站没有生效"></a>3.2.8 更改样式后网站没有生效</h3><p>确认非缓存问题后，执行 <code>hexo clean</code> 再进行生成上传。</p><blockquote><p>建议每次提交时都执行一次<code>hexo clean</code>，可以在项目目录下创建一个shell脚本，执行命令<code>hexo clean &amp;&amp; hexo generate --deploy</code>，运行后即可保证每次修改都能生效。</p></blockquote><h3 id="3-2-9-更改站点配色"><a href="#3-2-9-更改站点配色" class="headerlink" title="3.2.9 更改站点配色"></a>3.2.9 更改站点配色</h3><p>编辑 themes\indigo\source\css_partial\variable.less，更改对应的颜色变量。</p><p>配色参考：<a href="http://www.materialpalette.com/" target="_blank" rel="noopener">Material Design Color Palette Generator</a></p><blockquote><p>注意：使用自定义配色时需把主题配置中的 cdn 关闭，cdn: false。</p></blockquote><h3 id="3-2-10-添加404页面"><a href="#3-2-10-添加404页面" class="headerlink" title="3.2.10 添加404页面"></a>3.2.10 添加404页面</h3><p>在 hexo/source 目录内新建 404.html。</p><p>设置元数据信息，如果不想套用主题布局可设置 layout 为 false。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: false    </span><br><span class="line">title: &quot;My Blog Name | 404&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="3-2-11-在博客中使用-Emoji"><a href="#3-2-11-在博客中使用-Emoji" class="headerlink" title="3.2.11 在博客中使用 Emoji"></a>3.2.11 在博客中使用 Emoji</h3><p>参考 <a href="https://github.com/yscoder/hexo-theme-indigo/issues/90" target="_blank" rel="noopener">Can i use emoji in mypage?</a></p><h2 id="3-3-自定义页面"><a href="#3-3-自定义页面" class="headerlink" title="3.3 自定义页面"></a>3.3 自定义页面</h2><p>主题 Card 分支为自定义页面提供了定制化模块支持，特此简单介绍。</p><h3 id="3-3-1-创建自定义页面"><a href="#3-3-1-创建自定义页面" class="headerlink" title="3.3.1 创建自定义页面"></a>3.3.1 创建自定义页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page pageName</span><br></pre></td></tr></table></figure><p>执行命令后会在你的 Hexo 根目录 <code>source/</code> 目录下生成一个与你刚才输入的 <code>pageName</code> 一样的文件夹，里面只有一个 <code>index.md</code>。</p><h3 id="3-3-2-页面配置"><a href="#3-3-2-页面配置" class="headerlink" title="3.3.2 页面配置"></a>3.3.2 页面配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">layout: page      # 必须</span><br><span class="line">title: pageTitle  # 必须，页面名称</span><br><span class="line">description: 用户自定义页面功能演示       # 页面二级标题，描述性文字</span><br><span class="line">comments: false     # 禁用评论，可选，默认开启</span><br><span class="line">reward: false       # 禁用打赏，可选，默认开启</span><br><span class="line">----</span><br></pre></td></tr></table></figure><h3 id="3-3-3-模块和内容输入"><a href="#3-3-3-模块和内容输入" class="headerlink" title="3.3.3 模块和内容输入"></a>3.3.3 模块和内容输入</h3><p>自定义页面中，<code>image</code>、<code>blockquote</code>、<code>pre</code> 等将被赋予特殊的样式。此外，提供了<code>@moduleName{ ... }</code>格式的标记用于包裹内容，赋予样式。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;每个程序猿都需要一个个人博客，目前广泛出现在大家视野里的有CSDN、博客园、简书，但是他们却没有给用户一个专属的站点、一个好记的域名。你需要一个&lt;code&gt;http://xxx.xxx.xxx/&lt;/code&gt;格式的网址，一个自由书写代码的站点，一个真正的个人博客。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工作之余" scheme="http://hwb0011.github.io/categories/%E5%B7%A5%E4%BD%9C%E4%B9%8B%E4%BD%99/"/>
    
    
      <category term="博客" scheme="http://hwb0011.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="前端" scheme="http://hwb0011.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hexo" scheme="http://hwb0011.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
