<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>黄文镔的博客</title>
  
  <subtitle>完美运用所学的一切</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hwb0011.github.io/"/>
  <updated>2019-08-27T09:27:18.266Z</updated>
  <id>http://hwb0011.github.io/</id>
  
  <author>
    <name>黄文镔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UDP局域网通信的Java实现及Android平台尝试</title>
    <link href="http://hwb0011.github.io/2019/07/14/UDP%E5%B1%80%E5%9F%9F%E7%BD%91%E9%80%9A%E4%BF%A1%E7%9A%84Java%E5%AE%9E%E7%8E%B0%E5%8F%8AAndroid%E5%B9%B3%E5%8F%B0%E5%B0%9D%E8%AF%95/"/>
    <id>http://hwb0011.github.io/2019/07/14/UDP局域网通信的Java实现及Android平台尝试/</id>
    <published>2019-07-14T07:17:19.000Z</published>
    <updated>2019-08-27T09:27:18.266Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>局域网通信已经很少被他人所提及了，我曾经还尝试过通过蓝牙构建通信网络，这次有机会尝试UDP局域网通信，在这里把一些基本过程和在Android平台上的问题记录一下。  </p></blockquote><a id="more"></a><h1 id="1-UDP基础知识"><a href="#1-UDP基础知识" class="headerlink" title="1. UDP基础知识"></a>1. UDP基础知识</h1><h2 id="1-1-什么是UDP"><a href="#1-1-什么是UDP" class="headerlink" title="1.1 什么是UDP"></a>1.1 什么是UDP</h2><blockquote><p>Internet 协议集支持一个无连接的传输协议，该协议称为用户数据报协议（UDP，User Datagram Protocol）。UDP 为应用程序提供了一种无需建立连接就可以发送封装的 IP 数据报的方法。RFC 768 描述了 UDP。<br>Internet 的传输层有两个主要协议，互为补充。无连接的是 UDP，它除了给应用程序发送数据包功能并允许它们在所需的层次上架构自己的协议之外，几乎没有做什么特别的的事情。面向连接的是 TCP，该协议几乎做了所有的事情。<br>——《百度百科》</p></blockquote><p>根据百度百科的解释，UDP是一个数据传输协议，面向无连接的数据传输方式，说明此协议丢包概率较高，不适合复杂的网络环境。UDP报文没有可靠性保证、顺序保证和流量控制字段等，可靠性较差。但是正因为UDP协议的控制选项较少，在数据传输过程中延迟小、数据传输效率高，适合对可靠性要求不高的应用程序，或者可以保障可靠性的应用程序。在局域网中，数据的到达率几乎是可以保证的，因此UDP在局域网通信中拥有比TCP更重要的地位。</p><h2 id="1-2-UDP通信基本流程"><a href="#1-2-UDP通信基本流程" class="headerlink" title="1.2 UDP通信基本流程"></a>1.2 UDP通信基本流程</h2><ol><li><p>设定好统一的端口号；</p></li><li><p>初始化绑定指定端口号的数据接收器；</p></li><li><p>指定接收方的IP地址；</p></li><li><p>准备好轻量数据；</p></li><li><p>发送数据至指定的IP地址；</p></li><li><p>数据接收器触发后续逻辑。</p></li></ol><h1 id="2-UDP局域网通信的Java实现"><a href="#2-UDP局域网通信的Java实现" class="headerlink" title="2. UDP局域网通信的Java实现"></a>2. UDP局域网通信的Java实现</h1><h2 id="2-1-UDP广播"><a href="#2-1-UDP广播" class="headerlink" title="2.1 UDP广播"></a>2.1 UDP广播</h2><p>UDP广播的实现较为简单，其接收方的IP地址固定为<code>255.255.255.255</code>，端口号任选，保证发送方与接收方端口号一致且不与其他程序冲突即可，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BUFFER_SIZE = <span class="number">2048</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> DatagramSocket socket;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//先创建一个绑定了端口号为9527的DatagramSocket</span></span><br><span class="line">      socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9527</span>);</span><br><span class="line">      <span class="comment">//开启数据接收器</span></span><br><span class="line">      openReceiver();</span><br><span class="line">      <span class="comment">//发送广播消息</span></span><br><span class="line">      sendBroadcast(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openReceiver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//在子线程中循环接收数据</span></span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">      <span class="meta">@override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER_SIZE];</span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buffer, BUFFER_SIZE);</span><br><span class="line">        <span class="keyword">while</span>(socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            socket.receive(dp);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(buffer));</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendBroadcast</span><span class="params">(String dataStr)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//发送广播消息，消息内容为dataStr</span></span><br><span class="line">    <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">byte</span>[] buffer = dataStr.getBytes();</span><br><span class="line">      DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, buffer.length, InetAddress.getByName(<span class="string">"255.255.255.255"</span>), <span class="number">9527</span>);</span><br><span class="line">      socket.send(packet);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-UDP单播"><a href="#2-2-UDP单播" class="headerlink" title="2.2 UDP单播"></a>2.2 UDP单播</h2><p>UDP单播的实现与广播类似，其接收方的IP地址需发送消息时传入，端口号任选，保证发送方与接收方端口号一致且不与其他程序冲突即可，在2.1中展示的UDPManager类中增加单播发送方法即可，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPManager</span> </span>&#123;</span><br><span class="line">  <span class="comment">//···</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSingle</span><span class="params">(String dataStr, String targetIP)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//发送单播消息，消息内容为dataStr，接收方IP地址为targetIP</span></span><br><span class="line">    <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">byte</span>[] buffer = dataStr.getBytes();</span><br><span class="line">      DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, buffer.length, InetAddress.getByName(targetIP), <span class="number">9527</span>);</span><br><span class="line">      socket.send(packet);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-UDP多播"><a href="#2-3-UDP多播" class="headerlink" title="2.3 UDP多播"></a>2.3 UDP多播</h2><p>UDP多播的实现类似群聊，需要先加入一个指定IP的群组，之后消息往该IP发送即可，，端口号任选，单播与多播端口号不可相同，保证发送方与接收方端口号一致且不与其他程序冲突即可，并且需要在2.1中展示的UDPManager类中增加MulticastSocket类型的成员变量、修改init方法和openReceiver方法、增加对应的多播方法，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPManager</span> </span>&#123;</span><br><span class="line">  <span class="comment">//···</span></span><br><span class="line">  <span class="comment">//多播地址自选，在224.0.1.0～238.255.255.255之间即可</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MULICAST_ADDRESS = <span class="string">"224.255.0.1"</span></span><br><span class="line">  <span class="keyword">public</span> MulticastSocket multiSocket;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//先创建一个绑定了端口号为9527的DatagramSocket</span></span><br><span class="line">      socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9527</span>);</span><br><span class="line">      <span class="comment">//创建一个绑定端口号为9528的MulticastSocket</span></span><br><span class="line">      multiSocket = <span class="keyword">new</span> MulticastSocket(<span class="number">9528</span>);</span><br><span class="line">      <span class="comment">//开启数据接收器</span></span><br><span class="line">      openReceiver();</span><br><span class="line">      <span class="comment">//加入多播群组</span></span><br><span class="line">      multiSocket.joinGroup(InetAddress.getByName(MULICAST_ADDRESS))</span><br><span class="line">      <span class="comment">//发送广播消息</span></span><br><span class="line">      sendBroadcast(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openReceiver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//···</span></span><br><span class="line">    <span class="comment">//新建子线程接收多播数据</span></span><br><span class="line">    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">      <span class="meta">@override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[BUFFER_SIZE];</span><br><span class="line">        DatagramPacket dp = <span class="keyword">new</span> DatagramPacket(buffer, BUFFER_SIZE);</span><br><span class="line">        <span class="keyword">while</span>(multiSocket != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            multiSocket.receive(dp);</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(buffer));</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//···</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMultiple</span><span class="params">(String dataStr)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//发送多播消息，消息内容为dataStr</span></span><br><span class="line">    <span class="keyword">if</span> (multiSocket != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">byte</span>[] buffer = dataStr.getBytes();</span><br><span class="line">      DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, buffer.length, InetAddress.getByName(MULICAST_ADDRESS), <span class="number">9528</span>);</span><br><span class="line">      multiSocket.send(packet);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-局域网通信基础构想"><a href="#2-4-局域网通信基础构想" class="headerlink" title="2.4 局域网通信基础构想"></a>2.4 局域网通信基础构想</h2><p>在上述三种UDP通信方式的实现过程中，发现广播方式并不能送达局域网中所有接收者，非同一网段下的接收者将无法收到广播消息，而单播及多播是可以做到跨网段的。</p><p>初步设想，仅使用多播方式，局域网通信流程大致如下：</p><ol><li><p>用户程序启动，UDP初始化完成；</p></li><li><p>加入组播，发送用户上线消息，暴露本机信息（IP地址等）；</p></li><li><p>接收到用户上线消息的接收方将该用户加入在线用户列表，并再发送一次本机的用户上线消息；</p></li><li><p>用户触发消息发送，消息中附带本机信息（IP地址等）与指定接收方IP地址或是用户名等（可以是数组，指定多个接收方）；</p></li><li><p>接收方收到消息，判断此消息指定接收方中是否有本机，若有则处理该消息，否则丢弃；</p></li><li><p>用户关闭程序，发送用户下线消息；</p></li><li><p>接收到用户下线消息的接收方将该用户移除在线用户列表。</p></li></ol><h1 id="3-Android平台同一wifi环境下的尝试"><a href="#3-Android平台同一wifi环境下的尝试" class="headerlink" title="3. Android平台同一wifi环境下的尝试"></a>3. Android平台同一wifi环境下的尝试</h1><h2 id="3-1-UDP通信方式上的问题"><a href="#3-1-UDP通信方式上的问题" class="headerlink" title="3.1 UDP通信方式上的问题"></a>3.1 UDP通信方式上的问题</h2><p>在Android平台上初步尝试了UDP的各个通信方式，发现多播方式受到了极大的影响，经多方查证并多次尝试多播的使用，最后放弃了在Android平台上使用多播方式，如读者有兴趣可以尝试解决一下。</p><h2 id="3-2-安卓wifi局域网通信基础构想"><a href="#3-2-安卓wifi局域网通信基础构想" class="headerlink" title="3.2 安卓wifi局域网通信基础构想"></a>3.2 安卓wifi局域网通信基础构想</h2><p>参考之前的构想，多播方式无法使用的情况下，广播结合单播的方式成为我的备用方案，大致流程如下：</p><ol><li><p>用户程序启动，UDP初始化完成；</p></li><li><p>发送广播，传输用户上线消息，暴露本机信息（IP地址等）；</p></li><li><p>接收到广播的接收方将该用户加入在线用户列表，并向该用户发送一次本机的用户上线消息；</p></li><li><p>用户触发消息发送，以单播的方式发送给指定接收方的IP地址，消息中附带本机信息（IP地址等）；</p></li><li><p>接收方收到消息，处理该消息。</p></li><li><p>用户关闭程序，发送用户下线消息；</p></li><li><p>接收到用户下线消息的接收方将该用户移除在线用户列表。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;局域网通信已经很少被他人所提及了，我曾经还尝试过通过蓝牙构建通信网络，这次有机会尝试UDP局域网通信，在这里把一些基本过程和在Android平台上的问题记录一下。  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工作之余" scheme="http://hwb0011.github.io/categories/%E5%B7%A5%E4%BD%9C%E4%B9%8B%E4%BD%99/"/>
    
    
      <category term="Android" scheme="http://hwb0011.github.io/tags/Android/"/>
    
      <category term="Java" scheme="http://hwb0011.github.io/tags/Java/"/>
    
      <category term="UDP" scheme="http://hwb0011.github.io/tags/UDP/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin征途（二）：Kotlin基本语法</title>
    <link href="http://hwb0011.github.io/2019/07/07/Kotlin%E5%BE%81%E9%80%94%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9AKotlin%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>http://hwb0011.github.io/2019/07/07/Kotlin征途（二）：Kotlin基本语法/</id>
    <published>2019-07-07T06:20:28.000Z</published>
    <updated>2019-08-26T12:00:38.644Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文将伴随大家进入Kotlin语言的正式学习生涯中，希望大家不要半途而废哦！笔者将Kotlin用于Android开发中，因此将从Android开发的视角叙述相关内容，同时将与Java语言有所联系。  </p></blockquote><a id="more"></a><h1 id="1-正式进入开发的准备知识"><a href="#1-正式进入开发的准备知识" class="headerlink" title="1. 正式进入开发的准备知识"></a>1. 正式进入开发的准备知识</h1><h2 id="1-1-声明包名及导入包"><a href="#1-1-声明包名及导入包" class="headerlink" title="1.1 声明包名及导入包"></a>1.1 声明包名及导入包</h2><p>包，含义、关键字、使用方式与Java一致，如在包com.my.demo下，导入包android.os.Bundle，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源文件顶部</span></span><br><span class="line"><span class="comment">//package关键字声明包名</span></span><br><span class="line"><span class="keyword">package</span> com.my.demo</span><br><span class="line"></span><br><span class="line"><span class="comment">//import关键字导入所需包</span></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br></pre></td></tr></table></figure><h2 id="1-2-程序入口"><a href="#1-2-程序入口" class="headerlink" title="1.2 程序入口"></a>1.2 程序入口</h2><p>每个程序都需要一个入口，一个main函数是必不可少的。当然，在Android开发中不需要main函数，而是由系统调用Application和Activity来触发程序的入口。Kotlin的main函数较为简单，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fun关键字声明一个函数/方法</span></span><br><span class="line"><span class="function">fun <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//函数体/方法体，如打印Hello World!文字</span></span><br><span class="line">  println(<span class="string">"Hello World!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-行注释及块注释"><a href="#1-3-行注释及块注释" class="headerlink" title="1.3 行注释及块注释"></a>1.3 行注释及块注释</h2><p>在前面的代码中，我用到了许多注释，用来解释说明我写的代码。日常开发中，注释是很有必要的，代码将被你逐渐遗忘，原本的含义也许不易通过代码去理解，良好的注释不仅方便了自己也帮助了别人。在我们的代码中，注释有两种，行注释与块注释，Kotlin中的注释与Java类似，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是一条行注释</span></span><br><span class="line">println(<span class="string">"Hello World!"</span>) <span class="comment">//行末也可以使用行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*这是块注释</span></span><br><span class="line"><span class="comment">块注释可以包含多行*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*块注释也可在一行中使用*/</span></span><br><span class="line"></span><br><span class="line">println(<span class="comment">/*块注释也可以插入代码中使用*/</span><span class="string">"Hello World!"</span>)</span><br></pre></td></tr></table></figure><h2 id="1-4-代码风格"><a href="#1-4-代码风格" class="headerlink" title="1.4 代码风格"></a>1.4 代码风格</h2><p>Kotlin的代码风格类似多种语言的结合体，可以看到很多Java、C#、C++等语言的影子，官方有提供代码风格指南：</p><blockquote><p><strong>应用风格指南</strong><br>如需根据本风格指南配置 IntelliJ 格式化程序，请安装 Kotlin 插件 1.2.20 或更高版本，转到 Settings | Editor | Code Style | Kotlin，点击右上角的 Set from… 链接，并从菜单中选择 Predefined style | Kotlin style guide。<br>如需验证代码已按风格指南格式化，请转到探查设置（Inspections）并启用 Kotlin | Style issues | File is not formatted according to project settings 探查项。 验证风格指南中描述的其他问题（如命名约定）的附加探查项默认已启用。</p></blockquote><p>包名采用全小写字母（例：<code>package com.my.demopackage</code>），类名采用首字母大写的驼峰式命名（例：<code>class SplahActivity{}</code>），函数名及变量名采用首字母小写的驼峰式命名（例：<code>fun doSomething(){}</code>），常量名采用大写字母与下划线结合的方式（例：<code>const val MAX_COUNT = 8</code>）。</p><p>Kotlin语句末尾无需<code>;</code>标识，因此换行是代表语句结束还是未完待续就需要我们仔细观察了。其他一些不影响代码运行的风格就不一一例举了，可以参考<a href="https://www.kotlincn.net/docs/reference/coding-conventions.html#%E5%BA%94%E7%94%A8%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97" target="_blank" rel="noopener">官方文档</a>，希望大家好好写代码，不只是关注于功能、性能，还要注意代码的可读性，写出漂亮的代码！</p><h2 id="1-5-是否需要取代findViewById-方法"><a href="#1-5-是否需要取代findViewById-方法" class="headerlink" title="1.5 是否需要取代findViewById()方法"></a>1.5 是否需要取代findViewById()方法</h2><p>Kotlin在Android开发中有一个自动绑定View控件的特性，很多人都推崇取代findViewById()方法，但在使用中发现，这个特性的适用性不高。</p><p>Kotlin可以直接在代码中通过id来使用View控件，如：在SplashActivity的布局activity_splash_layout.xml中，存在一个id为tv_hello_world的TextView，那么在SplashActivity的onCreate()方法中可以使用语句<code>tv_hello_world.setText(&quot;Hello World!&quot;)</code>，无需提前声明一个TextView变量，再经过findViewById()来绑定控件。</p><p>但如果是需要同一个类配合多个布局，且布局中存在相同id的控件时，此特性将无法使用；或是ListView、RecyclerView中存在多个Item类型对应不同布局，且布局中存在相同id控件的情况，此特性也无法使用。</p><p>此特性还存在可读性问题，布局中id均使用小写字母与下划线结合的方式命名，在类文件中直接当作变量使用，违背了变量采用驼峰式命名的代码风格，并且找不到该变量的声明，使得代码逻辑不易于理解。</p><p>综述，个人意见为尽量还是使用findViewById()方法，毕竟我们的代码不能只想着省事。</p><h1 id="2-基本语法结构"><a href="#2-基本语法结构" class="headerlink" title="2. 基本语法结构"></a>2. 基本语法结构</h1><h2 id="2-1-函数"><a href="#2-1-函数" class="headerlink" title="2.1 函数"></a>2.1 函数</h2><p>函数的声明关键字是<code>fun</code>，结束语句是<code>return some</code>，空返回值类型是<code>Unit</code>，返回值类型为<code>Unit</code>时结束语句是<code>return</code>且返回值声明及结束语句都可以省略。基本结构是<code>fun 方法名(入参1名: 入参1类型, 入参2名: 入参2类型): 返回值类型{ 方法体 }</code>，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//带有两个 Int 参数、返回 Int 的函数</span></span><br><span class="line"><span class="function">fun <span class="title">sum</span><span class="params">(a: Int, b: Int)</span>: Int </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将表达式作为函数体、返回值类型自动推断的函数</span></span><br><span class="line"><span class="function">fun <span class="title">sum</span><span class="params">(a: Int, b: Int)</span> </span>= a + b</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数返回无意义的值</span></span><br><span class="line"><span class="function">fun <span class="title">printSum</span><span class="params">(a: Int, b: Int)</span>: Unit </span>&#123;</span><br><span class="line">    println(<span class="string">"sum of $a and $b is $&#123;a + b&#125;"</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Unit 返回类型可以省略</span></span><br><span class="line"><span class="function">fun <span class="title">printSum</span><span class="params">(a: Int, b: Int)</span> </span>&#123;</span><br><span class="line">    println(<span class="string">"sum of $a and $b is $&#123;a + b&#125;"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-变量"><a href="#2-2-变量" class="headerlink" title="2.2 变量"></a>2.2 变量</h2><p>变量的声明关键字有两个，<code>var</code>和<code>val</code>，其中<code>val</code>修饰的变量只能被赋值一次，类似Java中被<code>final</code>修饰的变量。一个变量的声明基本结构是<code>var/val 变量名: 变量类型</code>，声明语句后可直接跟<code>= 值</code>进行初始赋值并且此时能够自动推断变量类型（可省略<code>: 变量类型</code>），代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义只读局部变量使用关键字 val 定义，只能为其赋值一次</span></span><br><span class="line">val a: Int = <span class="number">1</span>  <span class="comment">// 立即赋值</span></span><br><span class="line">val b = <span class="number">2</span>   <span class="comment">// 自动推断出 `Int` 类型</span></span><br><span class="line">val c: Int  <span class="comment">// 如果没有初始值类型不能省略</span></span><br><span class="line">c = <span class="number">3</span>       <span class="comment">// 明确赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可重新赋值的变量使用 var 关键字</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">5</span> <span class="comment">// 自动推断出 `Int` 类型</span></span><br><span class="line">x += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//顶层变量（成员变量）</span></span><br><span class="line">val PI = <span class="number">3.14</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function">fun <span class="title">incrementX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-字符串模板"><a href="#2-3-字符串模板" class="headerlink" title="2.3 字符串模板"></a>2.3 字符串模板</h2><p>在Java中，字符串要拼接上变量值或是方法的返回值比较不友好，要么用<code>+</code>连接，要么就得使用<code>String.format()</code>方法。在Kotlin中可以在字符串中使用<code>$变量名</code>或是<code>${表达式}</code>的方式在字符串中插入变量或是表达式，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="comment">// 模板中的简单名称</span></span><br><span class="line">val s1 = <span class="string">"a is $a"</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="comment">// 模板中的任意表达式</span></span><br><span class="line">val s2 = <span class="string">"$&#123;s1.replace("</span>is<span class="string">", "</span>was<span class="string">")&#125;, but now is $a"</span></span><br></pre></td></tr></table></figure><h2 id="2-4-空值与Null检测"><a href="#2-4-空值与Null检测" class="headerlink" title="2.4 空值与Null检测"></a>2.4 空值与Null检测</h2><p>Kotlin著名的空安全使用起来还是很烧脑的，变量默认是不会为空的，未赋值的变量在编译中是会报错的，当某个变量的值可以为<code>null</code>的时候，必须在声明处的类型后添加<code>?</code>来标识该引用可为空，但在使用时就需要进行判空操作了。具体的空安全可以看<a href="https://www.kotlincn.net/docs/reference/null-safety.html" target="_blank" rel="noopener">官方文档</a>，这里就先简单说一下，以后可能会单独写一篇空安全的分析。代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果 str 的内容不是数字返回 null</span></span><br><span class="line"><span class="function">fun <span class="title">parseInt</span><span class="params">(str: String)</span>: Int? </span>&#123;</span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用返回可空值的函数</span></span><br><span class="line"><span class="function">fun <span class="title">printProduct</span><span class="params">(arg1: String, arg2: String)</span> </span>&#123;</span><br><span class="line">    val x = parseInt(arg1)</span><br><span class="line">    val y = parseInt(arg2)</span><br><span class="line">    <span class="comment">// 直接使用 `x * y` 会导致编译错误，因为它们可能为 null</span></span><br><span class="line">    <span class="keyword">if</span> (x != <span class="keyword">null</span> &amp;&amp; y != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 在空检测后，x 与 y 会自动转换为非空值（non-nullable）</span></span><br><span class="line">        println(x * y)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        println(<span class="string">"'$arg1' or '$arg2' is not a number"</span>)</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="function">fun <span class="title">printProduct</span><span class="params">(arg1: String, arg2: String)</span> </span>&#123;</span><br><span class="line">    val x = parseInt(arg1)</span><br><span class="line">    val y = parseInt(arg2)</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">        println(<span class="string">"Wrong number format in arg1: '$arg1'"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (y == <span class="keyword">null</span>) &#123;</span><br><span class="line">        println(<span class="string">"Wrong number format in arg2: '$arg2'"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在空检测后，x 与 y 会自动转换为非空值</span></span><br><span class="line">    println(x * y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-类型检测与自动类型转换"><a href="#2-5-类型检测与自动类型转换" class="headerlink" title="2.5 类型检测与自动类型转换"></a>2.5 类型检测与自动类型转换</h2><p>Kotlin这一特性用起来相当舒服，<code>is</code>运算符检测一个表达式是否某类型的一个实例，如果一个不可变的局部变量或属性已经判断出为某类型，那么检测后的分支中可以直接当作该类型使用，无需显式转换，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">getStringLength</span><span class="params">(obj: Any)</span>: Int? </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj is String) &#123;</span><br><span class="line">        <span class="comment">// `obj` 在该条件分支内自动转换成 `String`</span></span><br><span class="line">        <span class="keyword">return</span> obj.length</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在离开类型检测分支后，`obj` 仍然是 `Any` 类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="function">fun <span class="title">getStringLength</span><span class="params">(obj: Any)</span>: Int? </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj !is String) <span class="keyword">return</span> <span class="keyword">null</span></span><br><span class="line">    <span class="comment">// `obj` 在这一分支自动转换为 `String`</span></span><br><span class="line">    <span class="keyword">return</span> obj.length</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//甚至</span></span><br><span class="line"><span class="function">fun <span class="title">getStringLength</span><span class="params">(obj: Any)</span>: Int? </span>&#123;</span><br><span class="line">    <span class="comment">// `obj` 在 `&amp;&amp;` 右边自动转换成 `String` 类型</span></span><br><span class="line">    <span class="keyword">if</span> (obj is String &amp;&amp; obj.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> obj.length</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-条件表达式"><a href="#2-6-条件表达式" class="headerlink" title="2.6 条件表达式"></a>2.6 条件表达式</h2><p><code>if</code>语句在Kotlin中基本与Java一致，唯一的不同点在于最后一行代码若是单独的值，将作为<code>if</code>语句的返回值，这一特点用来取代了Java中的<code>a? b : c</code>三元表达式，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">maxOf</span><span class="params">(a: Int, b: Int)</span>: Int </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//if 也可以用作表达式</span></span><br><span class="line"><span class="function">fun <span class="title">maxOf</span><span class="params">(a: Int, b: Int)</span> </span>= <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</span><br></pre></td></tr></table></figure><h2 id="2-7-循环表达式"><a href="#2-7-循环表达式" class="headerlink" title="2.7 循环表达式"></a>2.7 循环表达式</h2><h3 id="2-7-1-for-循环"><a href="#2-7-1-for-循环" class="headerlink" title="2.7.1 for 循环"></a>2.7.1 for 循环</h3><p>Kotlin中的<code>for</code>循环有点像Java中的<code>foreach</code>语句，基本结构为<code>for (对象 in 列表/数组/区间) { 循环体 }</code>，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">val items = listOf(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"kiwifruit"</span>)</span><br><span class="line"><span class="keyword">for</span> (item in items) &#123;</span><br><span class="line">    println(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">val items = listOf(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"kiwifruit"</span>)</span><br><span class="line"><span class="keyword">for</span> (index in items.indices) &#123;</span><br><span class="line">    println(<span class="string">"item at $index is $&#123;items[index]&#125;"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-7-2-while-循环"><a href="#2-7-2-while-循环" class="headerlink" title="2.7.2 while 循环"></a>2.7.2 while 循环</h3><p>Kotlin中的<code>while</code>循环与Java一致，基本结构为<code>while (循环条件) { 循环体 }</code>，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">val items = listOf(<span class="string">"apple"</span>, <span class="string">"banana"</span>, <span class="string">"kiwifruit"</span>)</span><br><span class="line"><span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (index &lt; items.size) &#123;</span><br><span class="line">    println(<span class="string">"item at $index is $&#123;items[index]&#125;"</span>)</span><br><span class="line">    index++</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-8-when-表达式"><a href="#2-8-when-表达式" class="headerlink" title="2.8 when 表达式"></a>2.8 when 表达式</h2><p><code>when</code>表达式类似Java中的<code>switch</code>语句，但是比<code>switch</code>更高级，能够完全取代多个<code>elseif</code>的情况，基本结构为<code>when (变量) { 条件 -&gt; 操作 }</code>，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本使用，类似switch</span></span><br><span class="line">when (x) &#123;</span><br><span class="line">    <span class="number">1</span> -&gt; print(<span class="string">"x == 1"</span>)</span><br><span class="line">    <span class="number">2</span> -&gt; print(<span class="string">"x == 2"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; &#123; <span class="comment">// 注意这个块</span></span><br><span class="line">        print(<span class="string">"x is neither 1 nor 2"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们可以用任意表达式（而不只是常量）作为分支条件</span></span><br><span class="line">when (x) &#123;</span><br><span class="line">    parseInt(s) -&gt; print(<span class="string">"s encodes x"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; print(<span class="string">"s does not encode x"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//我们也可以检测一个值在（in）或者不在（!in）一个区间或者集合中</span></span><br><span class="line">when (x) &#123;</span><br><span class="line">    in <span class="number">1</span>..<span class="number">10</span> -&gt; print(<span class="string">"x is in the range"</span>)</span><br><span class="line">    in validNumbers -&gt; print(<span class="string">"x is valid"</span>)</span><br><span class="line">    !in <span class="number">10</span>..<span class="number">20</span> -&gt; print(<span class="string">"x is outside the range"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; print(<span class="string">"none of the above"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//另一种可能性是检测一个值是（is）或者不是（!is）一个特定类型的值。注意： 由于智能转换，你可以访问该类型的方法与属性而无需任何额外的检测。</span></span><br><span class="line"><span class="function">fun <span class="title">hasPrefix</span><span class="params">(x: Any)</span> </span>= when(x) &#123;</span><br><span class="line">    is String -&gt; x.startsWith(<span class="string">"prefix"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; <span class="keyword">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//when 也可以用来取代 if-else if链。 如果不提供参数，所有的分支条件都是简单的布尔表达式，而当一个分支的条件为真时则执行该分支：</span></span><br><span class="line">when &#123;</span><br><span class="line">    x.isOdd() -&gt; print(<span class="string">"x is odd"</span>)</span><br><span class="line">    x.isEven() -&gt; print(<span class="string">"x is even"</span>)</span><br><span class="line">    <span class="keyword">else</span> -&gt; print(<span class="string">"x is funny"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-9-区间"><a href="#2-9-区间" class="headerlink" title="2.9 区间"></a>2.9 区间</h2><p>区间这个概念类似于数学中的区间（适用于整数，假设有整数a和b，a&lt;b），形式有三种：</p><ol><li><p><code>a..b</code>，即从a到b之间的所有整数的升序排列，包括a和b，相当于数学中的<code>[a,b]</code>；</p></li><li><p><code>b downTo a</code>，即从a到b之间的所有整数的降序排列，包括a和b，可以理解成<code>[b,a]</code>；</p></li><li><p><code>a until b</code>，即从a到b之间的所有整数的升序排列，包括a但不包括b，相当于数学中的<code>[a,b)</code>。</p></li></ol><p>同时，还可以在末尾加上<code>step 整数</code>来指定步长，例如<code>1..5 step 2</code>代表数列<code>{1, 3, 5}</code>。区间一般用于<code>for</code>循环，代码示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i in <span class="number">1</span>..<span class="number">4</span>) print(i)</span><br><span class="line"><span class="comment">//输出1234</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i in <span class="number">4</span> downTo <span class="number">1</span>) print(i)</span><br><span class="line"><span class="comment">//输出4321</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i in <span class="number">1</span> until <span class="number">4</span>) print(i)</span><br><span class="line"><span class="comment">//输出123</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i in <span class="number">1</span>..<span class="number">8</span> step <span class="number">2</span>) print(i)</span><br><span class="line"><span class="comment">//输出1357</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure><h2 id="2-10-创建实例"><a href="#2-10-创建实例" class="headerlink" title="2.10 创建实例"></a>2.10 创建实例</h2><p>实例的创建，没有关键字的标识，就像函数的调用。常用操作是声明一个变量，赋值为某个对象实例，调用其构造方法，例如<code>val rectangle = Rectangle(5.0, 2.0)</code>，相对于Java来说，省略了<code>new</code>关键字，就像调用了一个返回值类型为Rectangle的方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将伴随大家进入Kotlin语言的正式学习生涯中，希望大家不要半途而废哦！笔者将Kotlin用于Android开发中，因此将从Android开发的视角叙述相关内容，同时将与Java语言有所联系。  &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Kotlin征途" scheme="http://hwb0011.github.io/categories/Kotlin%E5%BE%81%E9%80%94/"/>
    
    
      <category term="Android" scheme="http://hwb0011.github.io/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://hwb0011.github.io/tags/Kotlin/"/>
    
      <category term="编程" scheme="http://hwb0011.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>APP启动黑屏白屏原因与解决方式</title>
    <link href="http://hwb0011.github.io/2019/06/30/APP%E5%90%AF%E5%8A%A8%E9%BB%91%E5%B1%8F%E7%99%BD%E5%B1%8F%E5%8E%9F%E5%9B%A0%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F/"/>
    <id>http://hwb0011.github.io/2019/06/30/APP启动黑屏白屏原因与解决方式/</id>
    <published>2019-06-30T06:55:52.000Z</published>
    <updated>2019-07-24T08:40:51.831Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们在桌面启动自己辛苦创建的APP时，总是会看到黑屏或是白屏现象，这让人的体验感觉不是很好，看看大厂的APP为什么不会有这个现象？有问题就要解决，即便不是BUG，用户体验一样很重要。</p></blockquote><a id="more"></a><h1 id="1-APP启动黑-白屏的原因"><a href="#1-APP启动黑-白屏的原因" class="headerlink" title="1. APP启动黑/白屏的原因"></a>1. APP启动黑/白屏的原因</h1><p>首先，我们需要知道一个APP启动时，屏幕上都会有什么。在我们的APP里，显示在屏幕上的自然是各个View了，而我们的View又都是在Activity的onCreate()方法中调用了setContentView()方法，传入了我们的layout文件，也就是我们理论上应该看到的Activity内容。但是Android系统在启动一个新的Activity时，首先进行的并不是绘制Activity的内容，我们来看看一个Activity的UI结构。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/img0630_01.jpg" alt="Activity UI结构" title>                </div>                <div class="image-caption">Activity UI结构</div>            </figure><p>我们可以看到，一个Activity中在ContentView的外围还有PhoneWindow、DecorView、TitleView，当Activity进行绘制时会先绘制这三个View，这时ContentView还没加载进来，所以什么东西都看不到，系统会将屏幕填充主题默认的背景色，亮系主题填充白色，暗系主题填充黑色，就出现了Activity启动之前的黑/白屏现象。</p><h1 id="2-解决黑-白屏的方法"><a href="#2-解决黑-白屏的方法" class="headerlink" title="2. 解决黑/白屏的方法"></a>2. 解决黑/白屏的方法</h1><p>刚才说了，系统会为屏幕填充主题默认的背景色，那么要解决这个问题就应该从屏幕的背景下手了。一想到背景，第一反应就是去layout里设置ContentView的background，但是系统并不会先加载ContentView，那有什么在系统绘制之前就能调整屏幕背景呢？</p><p>注意，系统会填充主题默认的背景色，所以主题会在绘制之前加载，我们可以修改主题的背景达到目的。一般一个APP第一个启动的Activity都是Splash，作为一个Splash并不需要标题栏，而且普遍是全屏的。那么我们可以将主题进行修改一下，大概有两种方式：</p><ol><li>将主题背景变成透明的，这样在ContentView加载出来之前，我们会透过启动的Activity看到桌面，就不会有黑/白屏的现象。再把标题栏去掉，把Activity设置成全屏的，效果挺不错，缺点是如果启动的是一个有复杂耗时操作的Activity，那么会有一种延迟的感觉。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"android:Theme.Light.NoActionBar"</span>&gt;</span>  </span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsTranslucent"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:WindowFullscreen"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>将主题背景设置成一张图片，把标题栏去掉，把Activity设置成全屏的，这这样在ContentView加载出来之前，我们就能看到一张默认背景图，但是图片的屏幕适配问题就需要考虑了，主题里的背景图片会自动拉伸，可能会导致失真或者比例失调的问题。</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"android:Theme.Light.NoActionBar"</span>&gt;</span>  </span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowNoTitle"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowActionBar"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@drawable/bg_splash<span class="tag">&lt;/<span class="name">item</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:WindowFullscreen"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-背景显示优化"><a href="#3-背景显示优化" class="headerlink" title="3. 背景显示优化"></a>3. 背景显示优化</h1><p>这里再将上述解决方法进行优化，减少用户使用时不好的体验。（PS：当然你可以不做此优化，如果你想忽悠老板，把锅甩给Android系统、手机的硬件配置、UI的图给的不匹配屏幕等等）</p><h2 id="3-1-方法一优化"><a href="#3-1-方法一优化" class="headerlink" title="3.1 方法一优化"></a>3.1 方法一优化</h2><p>方法一中的问题在于延迟感严重，那么我们需要做的就是尽量加快Splash的启动速度，在Splash中不加入任何逻辑操作，并且Application中任何的数据及开源框架的初始化方法都不应调用，当Splash启动完全后，在Splash的OnResume()方法中可以启动子线程进行各初始化操作，宁可让用户在背景图中等待，不要让用户看着手机桌面认为手机死机了。</p><h2 id="3-2-方法二优化"><a href="#3-2-方法二优化" class="headerlink" title="3.2 方法二优化"></a>3.2 方法二优化</h2><p>方法二中的问题在于图片拉伸可能导致失真或者比例失调，使得界面不够美观。简单的方式就是建立各个drawable文件夹，覆盖所有的屏幕尺寸类型，每个文件夹下塞一张让UI做的合理的背景图。这种方法超级令人无语，UI的工作量较大，而且你也不可能覆盖所有的屏幕尺寸，比如这样：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/img0630_02.jpg" alt="超长的手机屏幕" title>                </div>                <div class="image-caption">超长的手机屏幕</div>            </figure><p>那么怎样可以拥有更好的用户体验呢？这时候我们需要的是drawable。</p><h3 id="3-2-1-drawable的类型"><a href="#3-2-1-drawable的类型" class="headerlink" title="3.2.1 drawable的类型"></a>3.2.1 drawable的类型</h3><p>在Android中，我们可以使用xml自定义一个drawable，用的最多的场景就是背景图了，Android系统的一些默认图标也都是用xml实现的，当然那涉及到了一些矢量图的知识。</p><p>首先我们先了解一下drawable的类型，常见的几种有：<code>BitmapDrawable</code>、<code>ShapeDrawable</code>、<code>StateListDrawable</code>、<code>LevelListDrawable</code>、<code>LayerDrawable</code>、<code>TransitionDrawable</code>、<code>ScaleDrawable</code>、<code>AnimationDrawable</code>、<code>InsetDrawable</code>、<code>NinePatchDrawable</code>、<code>ClipDrawable</code>、<code>VectorDrawable</code>。</p><p>这里我采用了LayerDrawable来解决图片拉伸的问题，其他的drawable以后再写一篇文章专门分析各个drawable。</p><h3 id="3-2-2-LayerDrawable解决图片拉伸"><a href="#3-2-2-LayerDrawable解决图片拉伸" class="headerlink" title="3.2.2 LayerDrawable解决图片拉伸"></a>3.2.2 LayerDrawable解决图片拉伸</h3><p>LayerDrawable为什么能解决图片拉伸问题呢？这要从LayerDrawble的性质说起了：</p><ol><li><p>XML标签为layer-list</p></li><li><p>层次化的Drawable合集</p></li><li><p>可以包含多个item，每个item表示一个Drawable</p></li><li><p>item中可以通过android:drawable直接引用资源</p></li><li><p>item中可以通过android:top等指定相对于父节点的位置</p></li></ol><p>多个Drawable的层次化叠加，并且可以指定每个Drawable的位置，是不是和layout很像？一些简单的布局显示可以用LayerDrawble来完成，不过只能塞Drawable进去，文字什么的就不行了。</p><p>那么我们来看一下一个可以很好适配屏幕的背景图改如何完成。首先在drawable文件夹下建立一个layer-list类型的drawable文件bg_splash.xml，随后写入如下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layer-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/bg"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:top</span>=<span class="string">"175dp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bitmap</span> <span class="attr">android:gravity</span>=<span class="string">"top"</span> <span class="attr">android:src</span>=<span class="string">"@drawable/logo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们在layer-list中放入了两个item：第一个是一整个页面的背景，可以是图片，但是笔者建议用纯色的ShapeDrawable，一定程度上减少内存开销并且无需考虑图片失真之类的问题；第二个是一个Bitmap，<code>&lt;bitmap&gt;</code>这个标签是按照图片大小插入一张图片，这样避免了图片在屏幕上的拉伸，通过<code>android:top</code>来指定这个item顶部的偏移距离，同样还可以指定<code>android:bottom</code>、<code>android:left</code>、<code>android:right</code>来定位item的位置，随后对<code>&lt;bitmap&gt;</code>的<code>android:gravity</code>设置为<code>top</code>，让logo可以显示在顶部。这样一个能随着屏幕进行适配并且不会失真的背景就做好了，按照方法二设置为<code>android:windowBackground</code>即可。</p><h3 id="3-2-3-style主题优化"><a href="#3-2-3-style主题优化" class="headerlink" title="3.2.3 style主题优化"></a>3.2.3 style主题优化</h3><p>按照方法二的设定，整个App将使用我们制作的bg_splash作为背景，这时候如果不给每个Activity设置背景或者在使用虚拟键盘时，进入App之后屏幕上也会看到bg_splash出现在没有控件的位置，造成用户的疑惑或者反感。</p><p>我们知道Activity也是可以设置主题的，那么我们可以给Application设置一个默认的主题AppTheme，然后给SplashActivity设置我们的全屏带背景的主题SplashTheme，这样在我们的SplashActivity中就可以迅速显示启动背景图，进入App中，在其他Activity中也不会出现启动背景图，最终的styles和AndroidManifest文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">styles.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@color/colorDefaultBg<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"SplashTheme"</span> <span class="attr">parent</span>=<span class="string">"AppTheme"</span>&gt;</span>  </span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowFullscreen"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@drawable/bg_splash<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">AndroidManifest.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">android:name</span>=<span class="string">".MyApplication"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:allowBackup</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".SplashActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:theme</span>=<span class="string">"@style/SplashTheme"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:screenOrientation</span>=<span class="string">"portrait"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:configChanges</span>=<span class="string">"orientation|screenSize|keyboardHidden"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我们在桌面启动自己辛苦创建的APP时，总是会看到黑屏或是白屏现象，这让人的体验感觉不是很好，看看大厂的APP为什么不会有这个现象？有问题就要解决，即便不是BUG，用户体验一样很重要。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="避坑指南" scheme="http://hwb0011.github.io/categories/%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97/"/>
    
    
      <category term="Android" scheme="http://hwb0011.github.io/tags/Android/"/>
    
      <category term="优化" scheme="http://hwb0011.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>25类Android常用开源框架</title>
    <link href="http://hwb0011.github.io/2019/06/23/25%E7%B1%BBAndroid%E5%B8%B8%E7%94%A8%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    <id>http://hwb0011.github.io/2019/06/23/25类Android常用开源框架/</id>
    <published>2019-06-23T03:41:22.000Z</published>
    <updated>2019-07-19T06:54:37.837Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>工欲善其事，必先利其器！开源框架奉上，支持开源，不造轮子，巨人带飞！持续更新，让开发更顺利。</p></blockquote><a id="more"></a><h2 id="1-图片加载，缓存，处理"><a href="#1-图片加载，缓存，处理" class="headerlink" title="1. 图片加载，缓存，处理"></a>1. 图片加载，缓存，处理</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="noopener">Android Universal Image Loader</a></td><td>一个强大的加载，缓存，展示图片的库，<strong>已过时</strong></td></tr><tr><td><a href="https://github.com/square/picasso" target="_blank" rel="noopener">Picasso</a></td><td>一个强大的图片下载与缓存的库</td></tr><tr><td><a href="https://github.com/facebook/fresco" target="_blank" rel="noopener">Fresco</a></td><td>一个用于管理图像和他们使用的内存的库</td></tr><tr><td><a href="https://github.com/bumptech/glide" target="_blank" rel="noopener">Glide</a></td><td>一个图片加载和缓存的库，使用的App有：网易新闻</td></tr><tr><td><a href="https://github.com/florent37/GlidePalette" target="_blank" rel="noopener">GlidePalette</a></td><td>Android Lollipop Palette is now easy to use with Glide</td></tr><tr><td><a href="https://github.com/florent37/PicassoPalette" target="_blank" rel="noopener">PicassoPalette</a></td><td>Android Lollipop Palette is now easy to use with Picasso</td></tr><tr><td><a href="https://github.com/wasabeef/picasso-transformations" target="_blank" rel="noopener">Picasso-transformations</a></td><td>一个为Picasso提供多种图片变换的库</td></tr><tr><td><a href="https://github.com/wasabeef/glide-transformations" target="_blank" rel="noopener">Glide-transformations</a></td><td>一个为Glide提供多种图片变换的库</td></tr></tbody></table><h2 id="2-图片裁剪"><a href="#2-图片裁剪" class="headerlink" title="2. 图片裁剪"></a>2. 图片裁剪</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/Yalantis/uCrop" target="_blank" rel="noopener">uCrop</a></td><td>Image Cropping Library for Android，使用的App有：薄荷，哔哩哔哩</td></tr><tr><td><a href="https://github.com/jdamcd/android-crop" target="_blank" rel="noopener">android-crop</a></td><td>图片裁剪，使用的App有：网易新闻，芒果TV</td></tr><tr><td><a href="https://github.com/edmodo/cropper" target="_blank" rel="noopener">cropper</a></td><td>图片裁剪开源框架</td></tr><tr><td><a href="https://github.com/ArthurHub/Android-Image-Cropper" target="_blank" rel="noopener">Android-Image-Cropper</a></td><td>Image Cropping Library for Android, optimized for Camera / Gallery</td></tr><tr><td><a href="https://github.com/ryanhoo/PhotoCropper" target="_blank" rel="noopener">PhotoCropper</a></td><td>Android 大图片裁剪终极解决方案</td></tr><tr><td><a href="https://github.com/lvillani/android-cropimage" target="_blank" rel="noopener">android-cropimage</a></td><td>CropImage Activity from Gallery.apk packaged as a reusable Android library</td></tr><tr><td><a href="https://github.com/albinmathew/PhotoCrop" target="_blank" rel="noopener">PhotoCrop</a></td><td>A Library which can be used to crop images in Android similar to Facebook and Telegram，使用的App有：快手</td></tr></tbody></table><h2 id="3-图片选择"><a href="#3-图片选择" class="headerlink" title="3. 图片选择"></a>3. 图片选择</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/lovetuzitong/MultiImageSelector" target="_blank" rel="noopener">MultiImageSelector</a></td><td>图片选择，使用的App有：薄荷</td></tr><tr><td><a href="https://github.com/bingoogolapple/BGAPhotoPicker-Android" target="_blank" rel="noopener">BGAPhotoPicker-Android</a></td><td>Android 图片选择、预览、九宫格图片控件、拖拽排序九宫格图片控件</td></tr><tr><td><a href="https://github.com/crazycodeboy/TakePhoto" target="_blank" rel="noopener">TakePhoto</a></td><td>轻量级Android照片处理框架</td></tr><tr><td><a href="https://github.com/FinalTeam/RxGalleryFinal" target="_blank" rel="noopener">RxGalleryFinal</a></td><td>Android图片单选/多选、拍照、裁剪、压缩。视频选择和录制。</td></tr><tr><td><a href="https://github.com/Bilibili/boxing" target="_blank" rel="noopener">boxing</a></td><td>一个多媒体选择器库，B站出品。可以选择一张或者多张图片，提供预览和裁剪功能。同样支持gif图，选择视频和图像压缩功能。</td></tr></tbody></table><h2 id="4-图片转换，压缩，滤镜"><a href="#4-图片转换，压缩，滤镜" class="headerlink" title="4. 图片转换，压缩，滤镜"></a>4. 图片转换，压缩，滤镜</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/CyberAgent/android-gpuimage" target="_blank" rel="noopener">Android-gpuimage</a></td><td>一个开源的基于GPU的图像处理库，提供各种各样的图像处理滤镜，并且支持照相机和摄像机的实时滤镜，使用的App有：快手</td></tr><tr><td><a href="https://github.com/chrisbanes/PhotoView" target="_blank" rel="noopener">photoview</a></td><td>使用的App有：薄荷,网易新闻</td></tr><tr><td><a href="https://github.com/hdodenhof/CircleImageView" target="_blank" rel="noopener">circleimageview</a></td><td>圆形图片，使用的App有：薄荷</td></tr><tr><td><a href="https://github.com/vinc3m1/RoundedImageView" target="_blank" rel="noopener">RoundedImageView</a></td><td>圆形图片，使用的App有：薄荷</td></tr><tr><td><a href="https://github.com/pungrue26/SelectableRoundedImageView" target="_blank" rel="noopener">SelectableRoundedImageView</a></td><td>Android ImageView that supports different radii on each corner</td></tr><tr><td><a href="https://github.com/koral--/android-gif-drawable" target="_blank" rel="noopener">android-gif-drawable</a></td><td>gif图片，使用的App有：网易新闻，快手</td></tr><tr><td><a href="https://github.com/Curzibn/Luban" target="_blank" rel="noopener">Luban</a></td><td>可能是最接近微信朋友圈的图片压缩算法</td></tr><tr><td><a href="https://github.com/zetbaitsu/Compressor" target="_blank" rel="noopener">Compressor</a></td><td>Compressor is a lightweight and powerful android image compression library</td></tr></tbody></table><h2 id="5-高斯模糊，毛玻璃，图片模糊"><a href="#5-高斯模糊，毛玻璃，图片模糊" class="headerlink" title="5. 高斯模糊，毛玻璃，图片模糊"></a>5. 高斯模糊，毛玻璃，图片模糊</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/kikoso/android-stackblur" target="_blank" rel="noopener">android-stackblur</a></td><td>Android StackBlur is a library that can perform a blurry effect on a Bitmap based on a gradient or radius, and return the result. The library is based on the code of Mario Klingemann.</td></tr><tr><td><a href="https://github.com/wasabeef/Blurry" target="_blank" rel="noopener">Blurry</a></td><td>Blurry is an easy blur library for Android</td></tr><tr><td><a href="https://github.com/wonderkiln/blurkit-android" target="_blank" rel="noopener">blurkit-android</a></td><td>The missing Android blurring library. Fast blur-behind layout that parallels iOS.</td></tr><tr><td><a href="https://github.com/Dimezis/BlurView" target="_blank" rel="noopener">BlurView</a></td><td>Dynamic iOS-like blur of underlying Views for Android</td></tr><tr><td><a href="https://github.com/qiujuer/ImageBlurring" target="_blank" rel="noopener">ImageBlurring</a></td><td>Android blurring image(bitmap) by java and jni</td></tr></tbody></table><h2 id="6-缓存"><a href="#6-缓存" class="headerlink" title="6. 缓存"></a>6. 缓存</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td>LruCache</td><td>Android原生API，内存缓存</td></tr><tr><td><a href="https://github.com/JakeWharton/DiskLruCache" target="_blank" rel="noopener">DiskLruCache</a></td><td>Java实现基于LRU的磁盘缓存</td></tr><tr><td><a href="https://github.com/yangfuhai/ASimpleCache" target="_blank" rel="noopener">ASimpleCache</a></td><td>一个为android制定的轻量级的开源缓存框架</td></tr><tr><td><a href="https://github.com/hongyangAndroid/base-diskcache" target="_blank" rel="noopener">base-diskcache</a></td><td>Android 缓存库，融合了DiskLruCache和ASimpleCache</td></tr></tbody></table><h2 id="7-网络请求"><a href="#7-网络请求" class="headerlink" title="7. 网络请求"></a>7. 网络请求</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="http://hc.apache.org/httpclient-3.x/" target="_blank" rel="noopener">httpclient</a></td><td>apache开源的网络请求框架，<strong>已过时</strong></td></tr><tr><td><a href="https://loopj.com/android-async-http/doc/com/loopj/android/http/AsyncHttpClient.html" target="_blank" rel="noopener">AsyncHttpClient</a></td><td>基于httpclient封装，<strong>已过时</strong></td></tr><tr><td><a href="https://github.com/square/okhttp" target="_blank" rel="noopener">OkHttp</a></td><td>Square出品，一个Http与Http/2的客户端</td></tr><tr><td><a href="https://github.com/square/retrofit" target="_blank" rel="noopener">Retrofit</a></td><td>Square出品，类型安全的Http客户端</td></tr><tr><td><a href="https://android.googlesource.com/platform/frameworks/volley" target="_blank" rel="noopener">Volley</a></td><td>Google推出的Android异步网络请求框架和图片加载框架，使用的App有：网易新闻</td></tr></tbody></table><blockquote><p>从Android 6.0 开始，Google删除了apache的开源网络请求框架httpclient，所以基于httpclient的AsyncHttpClient也不推荐使用了。<br>Volley适合那些请求频繁但数据量不大的场景，不适用于大数据的请求，比如下载文件。<br>Android 6.0 后，Android开始使用OkHttp，而Retrofit是一个网络代理框架，可以更简单的使用OkHttp。</p></blockquote><h2 id="8-网络解析"><a href="#8-网络解析" class="headerlink" title="8. 网络解析"></a>8. 网络解析</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/google/gson" target="_blank" rel="noopener">Gson</a></td><td>一个Java序列化/反序列化库，可以将JSON和java对象互相转换</td></tr><tr><td><a href="https://github.com/codehaus/jackson" target="_blank" rel="noopener">Jackson</a></td><td>Jackson可以轻松地将Java对象转换成json对象和xml文档，同样也可以将json、xml转换成Java对象</td></tr><tr><td><a href="https://github.com/alibaba/fastjson" target="_blank" rel="noopener">Fastjson</a></td><td>Java上一个快速的JSON解析器/生成器</td></tr><tr><td><a href="https://sourceforge.net/projects/htmlparser/" target="_blank" rel="noopener">HtmlPaser</a></td><td>一种用来解析单个独立html或嵌套html的方式</td></tr><tr><td><a href="https://github.com/jhy/jsoup" target="_blank" rel="noopener">Jsoup</a></td><td>一个以最好的DOM，CSS和jQuery解析html的库</td></tr></tbody></table><h2 id="9-数据库"><a href="#9-数据库" class="headerlink" title="9. 数据库"></a>9. 数据库</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://sourceforge.net/projects/ormlite/files/releases/com/j256/ormlite/" target="_blank" rel="noopener">OrmLite</a></td><td>JDBC和Android的轻量级ORM java包</td></tr><tr><td><a href="https://github.com/satyan/sugar" target="_blank" rel="noopener">Sugar</a></td><td>用超级简单的方法处理Android数据库</td></tr><tr><td><a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="noopener">GreenDAO</a></td><td>一种轻快地将对象映射到SQLite数据库的ORM解决方案，使用的App有：薄荷，京东</td></tr><tr><td><a href="https://github.com/pardom/ActiveAndroid" target="_blank" rel="noopener">ActiveAndroid</a></td><td>以活动记录方式为Android SQLite提供持久化</td></tr><tr><td><a href="https://github.com/square/sqlbrite" target="_blank" rel="noopener">SQLBrite</a></td><td>SQLiteOpenHelper 和ContentResolver的轻量级包装</td></tr><tr><td><a href="https://github.com/sqlcipher/android-database-sqlcipher" target="_blank" rel="noopener">android-database-sqlcipher</a></td><td>数据库加密</td></tr><tr><td><a href="https://github.com/pushtorefresh/storio" target="_blank" rel="noopener">storio</a></td><td>Beautiful API for SQLiteDatabase and ContentResolver</td></tr><tr><td><a href="https://github.com/realm/realm-java" target="_blank" rel="noopener">realm-java</a></td><td>移动数据库，高性能数据库：一个SQLite和ORM的替换品</td></tr><tr><td><a href="https://github.com/greenrobot/ObjectBox" target="_blank" rel="noopener">ObjectBox</a></td><td>相信不少人都用过GreenDao和EventBus，这两库都是greenrobot公司出品。ObjectBox也是该公司出品。GreenDao号称是最快的与SQLite的对象关系映射（ORM）。但是自从2011年以来，公司声称发现了许多的缺陷，有很多问题影响了性能。所以开发出另外一套性能最好且易用的NoSQL数据库，优于其他数据库5-15倍的性能。</td></tr></tbody></table><h2 id="10-依赖注入"><a href="#10-依赖注入" class="headerlink" title="10. 依赖注入"></a>10. 依赖注入</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="noopener">ButterKnife</a></td><td>将Android视图和回调方法绑定到字段和方法上</td></tr><tr><td><a href="https://github.com/google/dagger" target="_blank" rel="noopener">Dagger2</a></td><td>一个Android和java快速依赖注射器</td></tr><tr><td><a href="https://github.com/androidannotations/androidannotations" target="_blank" rel="noopener">AndroidAnotations</a></td><td>快速安卓开发。易于维护</td></tr><tr><td><a href="https://github.com/roboguice/roboguice" target="_blank" rel="noopener">RoboGuice</a></td><td>Android平台的Google Guice <strong>已退役</strong></td></tr><tr><td><a href="https://github.com/google/guice" target="_blank" rel="noopener">guice</a></td><td>Google开发的依赖注入框架</td></tr></tbody></table><h2 id="11-图表Chart"><a href="#11-图表Chart" class="headerlink" title="11. 图表Chart"></a>11. 图表Chart</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/diogobernardino/WilliamChart" target="_blank" rel="noopener">WilliamChart</a></td><td>创建图表的Android库</td></tr><tr><td><a href="https://github.com/lecho/hellocharts-android" target="_blank" rel="noopener">HelloCharts</a></td><td>兼容到API8的Android图表库，使用的App有：薄荷</td></tr><tr><td><a href="https://github.com/PhilJay/MPAndroidChart" target="_blank" rel="noopener">MPAndroidChart</a></td><td>一个强大的Android图表视图/图形库，使用的App有：春雨医生</td></tr></tbody></table><h2 id="12-后台处理"><a href="#12-后台处理" class="headerlink" title="12. 后台处理"></a>12. 后台处理</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/square/tape" target="_blank" rel="noopener">Tape</a></td><td>一个轻快的，事务性的，基于文件的FIFO的库</td></tr><tr><td><a href="https://github.com/yigit/android-priority-jobqueue" target="_blank" rel="noopener">Android Priority Job Queue</a></td><td>一个专门为Android轻松调度任务的工作队列</td></tr></tbody></table><h2 id="13-事件总线"><a href="#13-事件总线" class="headerlink" title="13. 事件总线"></a>13. 事件总线</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/greenrobot/EventBus" target="_blank" rel="noopener">EventBus</a></td><td>安卓优化的事件总线，简化了活动、片段、线程、服务等的通信，使用的App有：薄荷</td></tr><tr><td><a href="https://github.com/square/otto" target="_blank" rel="noopener">Otto</a></td><td>一个基于Guava的增强的事件总线</td></tr><tr><td><a href="https://github.com/eleme/HermesEventBus" target="_blank" rel="noopener">HermesEventBus</a></td><td>一个基于EventBus的、能在进程间发送和接收event的库，在IPC或者插件开发中非常有用</td></tr></tbody></table><h2 id="14-响应式编程"><a href="#14-响应式编程" class="headerlink" title="14. 响应式编程"></a>14. 响应式编程</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener">RxJava</a></td><td>JVM上的响应式扩展</td></tr><tr><td><a href="https://github.com/ReactiveX/RxJavaJoins" target="_blank" rel="noopener">RxJavaJoins</a></td><td>为RxJava提供Joins操作</td></tr><tr><td><a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="noopener">RxAndroid</a></td><td>Android上的响应式扩展，在RxJava基础上添加了Android线程调度</td></tr><tr><td><a href="https://github.com/JakeWharton/RxBinding" target="_blank" rel="noopener">RxBinding</a></td><td>提供用RxJava绑定Android UI的API</td></tr><tr><td><a href="https://github.com/google/agera" target="_blank" rel="noopener">Agera</a></td><td>Android上的响应式编程</td></tr><tr><td><a href="https://github.com/trello/RxLifecycle" target="_blank" rel="noopener">RxLifecycle</a></td><td>Lifecycle handling APIs for Android apps using RxJava</td></tr></tbody></table><h2 id="15-Log框架"><a href="#15-Log框架" class="headerlink" title="15. Log框架"></a>15. Log框架</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/orhanobut/logger" target="_blank" rel="noopener">Logger</a></td><td>简单，漂亮，强大的Android日志工具</td></tr><tr><td><a href="https://github.com/JakeWharton/hugo" target="_blank" rel="noopener">Hugo</a></td><td>在调试版本上注解的触发方法进行日志记录</td></tr><tr><td><a href="https://github.com/JakeWharton/timber" target="_blank" rel="noopener">Timber</a></td><td>一个小的，可扩展的日志工具</td></tr></tbody></table><h2 id="16-测试框架"><a href="#16-测试框架" class="headerlink" title="16. 测试框架"></a>16. 测试框架</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/mockito/mockito" target="_blank" rel="noopener">Mockito</a></td><td>Java编写的Mocking单元测试框架</td></tr><tr><td><a href="https://github.com/RobotiumTech/robotium" target="_blank" rel="noopener">Robotium</a></td><td>Android UI 测试</td></tr><tr><td><a href="https://github.com/robolectric/robolectric" target="_blank" rel="noopener">Robolectric</a></td><td>Android单元测试框架</td></tr></tbody></table><blockquote><p>Android自带很多测试工具：JUnit，Monkeyrunner，UiAutomator，Espresso等。</p></blockquote><h2 id="17-调试框架"><a href="#17-调试框架" class="headerlink" title="17. 调试框架"></a>17. 调试框架</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/facebook/stetho" target="_blank" rel="noopener">Stetho</a></td><td>调试Android应用的桥梁，使得可以利用Chrome开发者工具进行调试</td></tr></tbody></table><h2 id="18-性能优化"><a href="#18-性能优化" class="headerlink" title="18. 性能优化"></a>18. 性能优化</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/square/leakcanary" target="_blank" rel="noopener">LeakCanary</a></td><td>内存泄漏检测工具</td></tr><tr><td><a href="http://blog.zhaiyifan.cn/2016/01/16/BlockCanaryTransparentPerformanceMonitor/?utm_source=tuicool&utm_medium=referral" target="_blank" rel="noopener">BlockCanary</a></td><td>轻松找出Android App界面卡顿元凶</td></tr><tr><td><a href="https://github.com/ACRA/acra" target="_blank" rel="noopener">ACRA</a></td><td>Android应用程序崩溃报告</td></tr><tr><td><a href="https://github.com/google/guava" target="_blank" rel="noopener">Google Guava</a></td><td>Guava工程包含了若干被Google的 Java项目广泛依赖 的核心库，例如：集合 [collections] 、缓存 [caching] 、原生类型支持 [primitives support] 、并发库 [concurrency libraries] 、通用注解 [common annotations] 、字符串处理 [string processing] 、I/O 等等。 所有这些工具每天都在被Google的工程师应用在产品服务中。</td></tr><tr><td><a href="https://developers.google.cn/protocol-buffers/" target="_blank" rel="noopener">google protobuf</a></td><td>由google开发，并且在google内部使用。Protobuf的作用和xml、json是一回事，但他是二进制格式，性能好、效率高。</td></tr></tbody></table><h2 id="19-热修复"><a href="#19-热修复" class="headerlink" title="19. 热修复"></a>19. 热修复</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/Tencent/tinker" target="_blank" rel="noopener">tinker</a></td><td>腾讯开源的一个热修复框架</td></tr><tr><td><a href="https://github.com/alibaba/AndFix" target="_blank" rel="noopener">AndFix</a></td><td>alibaba热修复框架</td></tr><tr><td><a href="https://github.com/alibaba/dexposed" target="_blank" rel="noopener">dexposed</a></td><td>alibaba热修复框架</td></tr></tbody></table><h2 id="20-二维码"><a href="#20-二维码" class="headerlink" title="20. 二维码"></a>20. 二维码</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/zxing/zxing" target="_blank" rel="noopener">Zxing</a></td><td>一个二维码开源框架</td></tr><tr><td><a href="https://github.com/dm77/barcodescanner" target="_blank" rel="noopener">barcodescanner</a></td><td>使用的App有：薄荷</td></tr><tr><td><a href="https://github.com/bingoogolapple/BGAQRCode-Android" target="_blank" rel="noopener">BGAQRCode-Android</a></td><td>扫描二维码、扫描条形码、相册获取图片后识别、生成带 Logo 二维码、支持微博微信 QQ 二维码扫描样式</td></tr><tr><td><a href="https://github.com/journeyapps/zxing-android-embedded/tree/master/zxing-android-embedded/src/com/journeyapps/barcodescanner" target="_blank" rel="noopener">zxing-android-embedded</a></td><td>使用的App有：春雨医生，芒果TV</td></tr></tbody></table><h2 id="21-多媒体"><a href="#21-多媒体" class="headerlink" title="21. 多媒体"></a>21. 多媒体</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/Bilibili/ijkplayer" target="_blank" rel="noopener">ijkplayer</a></td><td>Bilibili开源的视频播放器</td></tr><tr><td><a href="https://github.com/Bilibili/DanmakuFlameMaster" target="_blank" rel="noopener">DanmakuFlameMaster</a></td><td>Android开源弹幕引擎·烈焰弹幕使，使用的App有：网易新闻</td></tr><tr><td><a href="https://github.com/yixia/VitamioBundle" target="_blank" rel="noopener">Vitamio</a></td><td>一款全能多媒体开发框架，全面支持硬件解码与 GPU 渲染</td></tr><tr><td><a href="https://github.com/FFmpeg/FFmpeg" target="_blank" rel="noopener">FFmpeg</a></td><td>一个基于C语言的多媒体开源框架</td></tr><tr><td><a href="https://cloud.baidu.com/doc/MCT/s/Ajwvz4yzr/" target="_blank" rel="noopener">百度智能云播放器</a></td><td>百度智能云推出的 Android 平台视频播放器</td></tr><tr><td><a href="https://github.com/google/ExoPlayer" target="_blank" rel="noopener">ExoPlayer</a></td><td>Google开源的视频播放器</td></tr></tbody></table><h2 id="22-汉语转拼音"><a href="#22-汉语转拼音" class="headerlink" title="22. 汉语转拼音"></a>22. 汉语转拼音</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/belerweb/pinyin4j" target="_blank" rel="noopener">pinyin4j</a></td><td>A copy of <a href="http://sourceforge.net/projects/pinyin4j" target="_blank" rel="noopener">http://sourceforge.net/projects/pinyin4j</a>, then deploy it to maven central repository.</td></tr><tr><td><a href="http://pinyin4j.sourceforge.net/" target="_blank" rel="noopener">TinyPinyin</a></td><td>适用于Java和Android的快速、低内存占用的汉字转拼音库。</td></tr><tr><td><a href="https://github.com/handsomezhou/PinyinSearchLibrary" target="_blank" rel="noopener">PinyinSearchLibrary</a></td><td>The library of PinyinSearch,a Java Library which provide data parsing methods, data matching method and so on for T9 search and Qwerty search.PinyinSearch = T9Search + QwertySearch</td></tr><tr><td><a href="https://code.google.com/archive/p/pinyin4android/" target="_blank" rel="noopener">pinyin4android</a></td><td>唯品会使用，2011年出了1.0版本后没更新了</td></tr></tbody></table><h2 id="23-下载"><a href="#23-下载" class="headerlink" title="23. 下载"></a>23. 下载</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/Aspsine/MultiThreadDownload" target="_blank" rel="noopener">MultiThreadDownload</a></td><td>使用的App有：薄荷</td></tr><tr><td><a href="https://github.com/lingochamp/FileDownloader" target="_blank" rel="noopener">FileDownloader</a></td><td>Android 文件下载引擎，稳定、高效、灵活、简单易用</td></tr><tr><td><a href="https://github.com/ssseasonnn/RxDownload" target="_blank" rel="noopener">RxDownload</a></td><td>基于RxJava和Retrofit打造的下载工具, 支持多线程下载和断点续传, 智能判断是否支持断点续传等功能</td></tr><tr><td><a href="https://github.com/wlfcolin/file-downloader" target="_blank" rel="noopener">file-downloader</a></td><td>安卓上轻量级Http/Https文件下载框架，我的目标是让安卓文件下载越简单越好，尽可能以最简洁明了的方式完成复杂需求。</td></tr></tbody></table><h2 id="24-动画"><a href="#24-动画" class="headerlink" title="24. 动画"></a>24. 动画</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/facebook/rebound" target="_blank" rel="noopener">facebook:rebound</a></td><td>A Java library that models spring dynamics and adds real world physics to your app</td></tr><tr><td><a href="https://github.com/florent37/ViewAnimator" target="_blank" rel="noopener">ViewAnimator</a></td><td>A fluent Android animation library</td></tr><tr><td><a href="https://github.com/lgvalle/Material-Animations" target="_blank" rel="noopener">Material-Animations</a></td><td>Android Transition animations explanation with examples</td></tr><tr><td><a href="https://github.com/daimajia/AndroidViewAnimations" target="_blank" rel="noopener">AndroidViewAnimations</a></td><td>Cute view animation collection.</td></tr><tr><td><a href="https://github.com/nhaarman/ListViewAnimations" target="_blank" rel="noopener">ListViewAnimations</a></td><td>An Android library which allows developers to easily add animations to ListView items</td></tr><tr><td><a href="https://github.com/wasabeef/recyclerview-animators" target="_blank" rel="noopener">recyclerview-animators</a></td><td>An Android Animation library which easily add itemanimator to RecyclerView items.</td></tr><tr><td><a href="https://github.com/gabrielemariotti/RecyclerViewItemAnimators" target="_blank" rel="noopener">RecyclerViewItemAnimators</a></td><td>An Android library which provides simple Item animations to RecyclerView items</td></tr><tr><td><a href="https://github.com/daimajia/AnimationEasingFunctions" target="_blank" rel="noopener">AnimationEasingFunctions</a></td><td>Android Animation Easing Functions. Let’s make animation more real!</td></tr><tr><td><a href="https://github.com/z56402344/BaseAnimation" target="_blank" rel="noopener">BaseAnimation</a></td><td>BaseAnimation收集网络Android相关动画集合，自定义控件等，近200多种源码</td></tr><tr><td><a href="https://github.com/kakajika/FragmentAnimations" target="_blank" rel="noopener">FragmentAnimations</a></td><td>3D animations for support-v4 Fragment transition.</td></tr><tr><td><a href="https://github.com/alphamu/AnimatedEditText" target="_blank" rel="noopener">AnimatedEditText</a></td><td>Androids EditText that animates the typed text. EditText is extended to create AnimatedEditText and a PinEntryEditText.</td></tr><tr><td><a href="https://github.com/ToxicBakery/ViewPagerTransforms" target="_blank" rel="noopener">ViewPagerTransforms</a></td><td>Library containing common animations needed for transforming ViewPager scrolling for Android v13+</td></tr><tr><td><a href="https://github.com/airbnb/lottie-android" target="_blank" rel="noopener">lottie-android</a></td><td>Render After Effects animations natively on Android and iOS</td></tr></tbody></table><h2 id="25-Android选择器类库"><a href="#25-Android选择器类库" class="headerlink" title="25. Android选择器类库"></a>25. Android选择器类库</h2><table><thead><tr><th>框架名称</th><th>功能描述</th></tr></thead><tbody><tr><td><a href="https://github.com/prolificinteractive/material-calendarview" target="_blank" rel="noopener">material-calendarview</a></td><td>material design 风格的日历控件使用的App有：薄荷</td></tr><tr><td><a href="https://github.com/wdullaer/MaterialDateTimePicker" target="_blank" rel="noopener">MaterialDateTimePicker</a></td><td>Pick a date or time on Android in style，使用的App有：薄荷</td></tr><tr><td><a href="https://github.com/square/android-times-square" target="_blank" rel="noopener">android-times-square</a></td><td>Standalone Android widget for picking a single date from a calendar view.</td></tr><tr><td><a href="https://github.com/jdsjlzx/AndroidPicker" target="_blank" rel="noopener">AndroidPicker</a></td><td>安卓选择器类库，包括日期时间选择器、单项选择器、地址选择器、颜色选择器、文件目录选择器、数字选择器、星座选择器等。</td></tr><tr><td><a href="https://github.com/saiwu-bigkoo/Android-PickerView" target="_blank" rel="noopener">Android-PickerView</a></td><td>仿iOS的PickerView控件，有时间选择和选项选择并支持一二三级联动效果</td></tr><tr><td><a href="https://github.com/AigeStudio/WheelPicker" target="_blank" rel="noopener">WheelPicker</a></td><td>Simple and fantastic wheel view in realistic effect for android.</td></tr><tr><td><a href="https://github.com/DroidNinja/Android-FilePicker" target="_blank" rel="noopener">Android-FilePicker</a></td><td>Photopicker and document picker for android</td></tr><tr><td><a href="https://github.com/Carbs0126/NumberPickerView" target="_blank" rel="noopener">NumberPickerView</a></td><td>another NumberPicker with more flexible attributes on Android platform</td></tr><tr><td><a href="https://github.com/Airsaid/Android-PickerView-Library" target="_blank" rel="noopener">Android-PickerView-Library</a></td><td>Simple PickerView for Android</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;工欲善其事，必先利其器！开源框架奉上，支持开源，不造轮子，巨人带飞！持续更新，让开发更顺利。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="开发资源" scheme="http://hwb0011.github.io/categories/%E5%BC%80%E5%8F%91%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="Android" scheme="http://hwb0011.github.io/tags/Android/"/>
    
      <category term="框架" scheme="http://hwb0011.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="资源" scheme="http://hwb0011.github.io/tags/%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin征途（一）：简单APP的制作</title>
    <link href="http://hwb0011.github.io/2019/06/16/Kotlin%E5%BE%81%E9%80%94%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E7%AE%80%E5%8D%95APP%E7%9A%84%E5%88%B6%E4%BD%9C/"/>
    <id>http://hwb0011.github.io/2019/06/16/Kotlin征途（一）：简单APP的制作/</id>
    <published>2019-06-16T08:11:45.000Z</published>
    <updated>2019-07-17T06:30:15.258Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Kotlin语言在谷歌的大力推动下，将来必然需要应用在工作中，虽然现在依然是Java主导，但在GitHub上已经有很多库采用了Kotlin来编写，也有很多新开发的APP用的是Kotlin，大厂也开始试水了，是时候让Kotlin成为我们成功的基石了。</p></blockquote><a id="more"></a><h1 id="1-学习Koltin的必要性"><a href="#1-学习Koltin的必要性" class="headerlink" title="1. 学习Koltin的必要性"></a>1. 学习Koltin的必要性</h1><p><strong>在进入开发之前，我想先将学习Kotlin的必要性梳理一下。</strong></p><p>目前在网络上对Kotlin的批判很多，常常能看到 <em>《抛弃Java 改用 Kotlin 的六个月后,我后悔了》</em>、<em>《从Java到Kotlin,然后又回到Java!》</em>、<em>《Kotlin 并没有想的那么好》</em> 等等，根据2018年调查显示1/4的Java开发者在迁移后表示后悔，详细调查报告名为<a href="https://pusher.com/state-of-kotlin#adoption" target="_blank" rel="noopener">The State of Kotlin 2018</a>，该报告阐述了Koltin在2018年的情况。</p><p>但我本人认为，不论Kotlin目前的稳定性与健壮性如何，将来在Android开发中必然是有它的一席之地。甲骨文与谷歌的官司必然让谷歌不愿意看到自家的系统被他人握有把柄，openJdk不会是一个长久之计。作为一只不断学习进取的程序猿，学习Kotlin语言也是一条不错的路。</p><p>就目前来说，Kotlin还有许多不足，建议熟悉Kotlin语法教程后可以去看看 <em>《Kotlin 的陷阱以及如何避免》</em> 之类的文章。当然，一门语言的发展必然要踩许许多多的坑，Kotlin还很年轻，我们应该给它更多的宽容。而且Kotlin相较于Java还是有很多优点的，用Kotlin取缔Java的优缺点并存。</p><p>在我看来，学习并尝试使用Kotlin开发Android项目是很有必要的，但贸然使用Kotlin直接在老旧项目中取缔Java也许会导致比较严重的后果。我建议在老旧的项目中使用Kotlin还是需要多斟酌，而在新的项目中完全可以直接使用Kotlin，多观望Kotlin的更新情况，适时更新项目中使用的Kotlin版本，让你的项目和你一起成长。</p><h1 id="2-用Kotlin制作一个简单的APP"><a href="#2-用Kotlin制作一个简单的APP" class="headerlink" title="2. 用Kotlin制作一个简单的APP"></a>2. 用Kotlin制作一个简单的APP</h1><p>目前我只在AS中开发APP，本文中所用也是AS，建议使用Eclipse开发的童鞋尽早加入AS的大军。</p><h2 id="2-1-用AS建立一个Kotlin-Android项目"><a href="#2-1-用AS建立一个Kotlin-Android项目" class="headerlink" title="2.1 用AS建立一个Kotlin Android项目"></a>2.1 用AS建立一个Kotlin Android项目</h2><p>首先是需要建立一个新的项目，打开AS软件，并选择<code>Start a new Android Studio project</code>，如图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/img0616_01.png" alt="新建项目" title>                </div>                <div class="image-caption">新建项目</div>            </figure><p>随后将APP name、domain、location根据所需配置好，在底部将<code>Include Kotlin Support</code>勾选上，如图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/img0616_02.png" alt="勾选Kotlin支持" title>                </div>                <div class="image-caption">勾选Kotlin支持</div>            </figure><p>右下角点Next后，进入Target Android Device选择界面，这里根据所需配置好直接Next就好，如图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/img0616_03.png" alt="Target Android Device选择" title>                </div>                <div class="image-caption">Target Android Device选择</div>            </figure><p>接下来选择<code>Add No Activity</code>，不然AS直接就建立了一个可以直接运行的Hello World APP，我们还是体会一下建立Kotlin Activity的过程，如图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/img0616_04.png" alt="选择Add No Activity" title>                </div>                <div class="image-caption">选择Add No Activity</div>            </figure><p>Finish以后，等待AS建立一个新的项目并初始编译完成，我们就可以开始我们的第一个Kotlin APP的制作啦。</p><p>在Kotlin项目中，相对于Java的Android项目主要有两个区别：    </p><ol><li>项目目录下的<code>build.gradle</code>文件的<code>buildscript</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ext.kotlin_version = &apos;1.3.41&apos;</span><br><span class="line">    ...</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        ...</span><br><span class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>app目录下的<code>build.gradle</code>文件的<code>plugin</code>和<code>dependencies</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">apply plugin: &apos;kotlin-android&apos;</span><br><span class="line">apply plugin: &apos;kotlin-android-extensions&apos;</span><br><span class="line">...</span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    implementation &quot;org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version&quot;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，在已有的Java Android项目中做出上述改动后，该项目也就可以用上Kotlin做开发啦，Kotlin和Java也可以很好的协同工作，当然，如果要这么做，请仔细斟酌并进行足够的测试。</p><h2 id="2-2-添加一个Activity"><a href="#2-2-添加一个Activity" class="headerlink" title="2.2 添加一个Activity"></a>2.2 添加一个Activity</h2><p>在项目目录中，选中<code>app/src/main/包名文件夹</code>单击鼠标右键，在弹出菜单中选中<code>New</code>菜单，接着在弹出菜单中选中<code>Activity</code>菜单，最后在弹出菜单中选中<code>Empty Activity</code>单击鼠标左键，如图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/img0616_05.png" alt="选择Empty Activity" title>                </div>                <div class="image-caption">选择Empty Activity</div>            </figure><p>AS将弹出一个Activity的配置对话框，将各个属性配置好，注意由于项目中没有启动的第一个Activity，所以要勾选<code>Launcher Activity</code>，同时注意<code>Source Language</code>的选项要是<code>Kotlin</code>，如图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/img0616_06.png" alt="配置Activity" title>                </div>                <div class="image-caption">配置Activity</div>            </figure><p>点击Finish后，AS会建立相应的layout和kt文件，kt文件就相当于java文件。现在这个新的Activity还是一个空白的页面，我们可以给它加一个TextView，给它设置内容，看看Kotlin与Java的不同之处。</p><p>layout与之前还是一样的，代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/text_view"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Kotlin的不同还是比较多的，代码如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import android.support.v7.app.AppCompatActivity</span><br><span class="line">import android.os.Bundle</span><br><span class="line">import kotlinx.android.synthetic.main.activity_main.*</span><br><span class="line"></span><br><span class="line">class MainActivity : AppCompatActivity() &#123;</span><br><span class="line"></span><br><span class="line">    override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line">        text_view.text = &quot;Hello World !&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一个Hello World的TextView就可以显示在界面中了，run一遍看看效果和Java的没什么区别。简单看一下kt文件我们可以看到一些和Java的区别：</p><ol><li><p>导入了一个<code>kotlinx.android.synthetic.main.activity_main.*</code>，这个import可以让layout中的控件可以直接用id来调用，省略了<code>findViewById()</code>这一个步骤。</p></li><li><p>Kotlin去掉了语句末尾的<code>;</code>，让少写了’;’而导致编译失败的问题从此消失。</p></li><li><p>继承关系直接用<code>:</code>表示，接口的实现也是用的<code>:</code>表示，似乎在精简代码的同时让人有点迷糊。</p></li><li><p>override变成了一个修饰语，不再是注解的形式。</p></li><li><p>变量的表示使用了<code>变量名: 类名</code>的形式，<code>?</code>代表了此变量可以为空，空安全也是Kotlin的主打特点。</p></li><li><p>对象的属性看上去可以直接操作，实际是来自<code>get()/set()</code>，似乎在精简代码的同时让人感觉增加了耦合性。</p></li></ol><p>当然区别不止这几点，只是在一个最简单的APP中都存在的上述几点区别，可以看出一些Kotlin的设计理念，应该旨在解决一些Java过于冗杂和不太安全的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Kotlin语言在谷歌的大力推动下，将来必然需要应用在工作中，虽然现在依然是Java主导，但在GitHub上已经有很多库采用了Kotlin来编写，也有很多新开发的APP用的是Kotlin，大厂也开始试水了，是时候让Kotlin成为我们成功的基石了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Kotlin征途" scheme="http://hwb0011.github.io/categories/Kotlin%E5%BE%81%E9%80%94/"/>
    
    
      <category term="Android" scheme="http://hwb0011.github.io/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://hwb0011.github.io/tags/Kotlin/"/>
    
      <category term="编程" scheme="http://hwb0011.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown使用教程(In Atom)</title>
    <link href="http://hwb0011.github.io/2019/06/12/MarkDown%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B(In%20Atom)/"/>
    <id>http://hwb0011.github.io/2019/06/12/MarkDown使用教程(In Atom)/</id>
    <published>2019-06-12T08:11:45.000Z</published>
    <updated>2019-07-15T02:30:02.249Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>程序猿都爱写博客，在写博客的过程中，大量运用的就是MarkDown语法了。MarkDown不只是用来写博客，日常生活中的感悟、工作中的心得体会、项目任务安排等等大篇幅的文章都可以用MarkDown来迅速的完成具有一定显示效果的文本。</p></blockquote><a id="more"></a><h1 id="1-MarkDown的编写工具"><a href="#1-MarkDown的编写工具" class="headerlink" title="1. MarkDown的编写工具"></a>1. <code>MarkDown</code>的编写工具</h1><blockquote><p>工欲善其事，必先利其器，要学习MarkDown，编写工具是必不可少的。</p></blockquote><p>其实严格来说，<code>MarkDown</code>没有专门的编写工具，通过简单的文本编辑器即可编写<code>MarkDown</code>文本，比如<code>Windows</code>的记事本。但简单的文本编辑器功能欠缺，没有高亮的文字表现，更没有文本效果可言，就像没有人用记事本写代码一样，最起码也得用个<code>Edit Plus</code>。</p><p>笔者菜鸟一枚，最近开始接触<code>MarkDown</code>，挑选的编辑器是<a href="https://atom.io/" target="_blank" rel="noopener">Atom</a>，<code>GitHub</code>出品的简洁强大的编辑器，插件众多，支持的语言也比较多，也是一个不错的前端开发编辑器。</p><h2 id="1-1-simplified-chinese-menu中文插件"><a href="#1-1-simplified-chinese-menu中文插件" class="headerlink" title="1.1 simplified-chinese-menu中文插件"></a>1.1 <code>simplified-chinese-menu</code>中文插件</h2><p>使用<code>Atom</code>时，首先对满屏的英文就有点抗拒，虽然写程序都用的英文，但对一些菜单、提示语还是更喜欢中文。</p><p><code>simplified-chinese-menu</code>这个插件基本将<code>Atom</code>里的各个菜单及提示语做到了汉化，瑕疵比较少，<code>Atom</code>装上这个插件，新手用起来方便多了。</p><h2 id="1-2-markdown-scroll-sync同步滚动插件"><a href="#1-2-markdown-scroll-sync同步滚动插件" class="headerlink" title="1.2 markdown-scroll-sync同步滚动插件"></a>1.2 <code>markdown-scroll-sync</code>同步滚动插件</h2><p><code>markdown-scroll-sync</code>同步滚动插件可以让预览与文本保持同步，减少查看预览的时间，确实是更方便了一些。</p><h2 id="1-3-markdown-table-editor表格编辑插件"><a href="#1-3-markdown-table-editor表格编辑插件" class="headerlink" title="1.3 markdown-table-editor表格编辑插件"></a>1.3 <code>markdown-table-editor</code>表格编辑插件</h2><p><code>MarkDown</code>在编写表格时稍微有些吃力，空格、对齐什么的，手敲太慢了有木有！！！<code>markdown-table-editor</code>表格编辑插件，让表格的编写更简单，你值得拥有。</p><h1 id="2-MarkDown的基础语法"><a href="#2-MarkDown的基础语法" class="headerlink" title="2. MarkDown的基础语法"></a>2. <code>MarkDown</code>的基础语法</h1><p>如果不算扩展，Markdown的语法绝对简单到让你爱不释手！Markdown语法分为如下几大部分：</p><p><code>标题</code> <code>段落</code> <code>引用</code> <code>代码块</code> <code>强调</code> <code>列表</code> <code>分割线</code> <code>链接</code> <code>图片</code> <code>表格</code> <code>流程图</code></p><h2 id="2-1-标题"><a href="#2-1-标题" class="headerlink" title="2.1 标题"></a>2.1 标题</h2><p>利用<code>#</code>标识标题，最对可以标识六级标题，<code>#</code>是一级标题，字体最大，<code>######</code>是六级标题，字体最小，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><p>效果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/标题示例图片.png" alt="示例图片" title>                </div>                <div class="image-caption">示例图片</div>            </figure><h2 id="2-2-段落"><a href="#2-2-段落" class="headerlink" title="2.2 段落"></a>2.2 段落</h2><p>段落，在word中以回车换行来标识，而在md中需要一行空行进行分割两个段落，同一个段落中的多个空格、tab、回车符将被删减为一个空格（部分展示md的浏览器中，回车符可以表现为段内换行），在段落中允许存在换行，使用方式为两个以上空格加回车符，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这是段落一，下面是一行空行。</span><br><span class="line"></span><br><span class="line">这是段落二，这是一个空格 ，这是五个空格     ，这是两个tab   ，这是一个回车符</span><br><span class="line">，下面将用两个空格加回车进行段落内换行  </span><br><span class="line">换行完成，还是段落二。</span><br><span class="line"></span><br><span class="line">这是段落三。</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>这是段落一，下面是一行空行。</p><p>这是段落二，这是一个空格 ，这是五个空格     ，这是两个tab   ，这是一个回车符<br>，下面将用两个空格加回车进行段落内换行<br>换行完成，还是段落二。</p><p>这是段落三。</p><h2 id="2-3-引用"><a href="#2-3-引用" class="headerlink" title="2.3 引用"></a>2.3 引用</h2><p>md中使用<code>&gt;</code>来标识一个段落的引用，引用可以使用多个<code>&gt;</code>进行嵌套，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;这里是引用的段落</span><br><span class="line">&gt;&gt;这里是一层嵌套的引用</span><br><span class="line">&gt;&gt;&gt;这里是两层嵌套的引用</span><br></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>这里是引用的段落</p><blockquote><p>这里是一层嵌套的引用</p><blockquote><p>这里是两层嵌套的引用</p></blockquote></blockquote></blockquote><h2 id="2-4-代码块"><a href="#2-4-代码块" class="headerlink" title="2.4 代码块"></a>2.4 代码块</h2><p>作为程序猿，代码在博客中必不可少，md中对代码块是有三种标识方式的。第一中是行内代码标识，用一对反引号来包裹几个字符，效果有些类似软件中常见的标签。第二种是在行前添加四个空格来标识一行代码，但此行前一行只能为空行或者代码块。第三种是使用一对三个反引号包裹一大段文字，可以标识一段代码，在三个反引号后可以加语言名称来达到关键字高亮效果。（PS：反引号在键盘左上角<code>Esc</code>按钮下方，第一次用时笔者还以为是单引号）示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">这里有一个行内代码`code`，下面有两行代码：</span><br><span class="line"></span><br><span class="line">    a line codes</span><br><span class="line">    a line codes</span><br><span class="line"></span><br><span class="line">下面有一段代码：</span><br><span class="line">（```）</span><br><span class="line">code and code and code</span><br><span class="line">code and code and code</span><br><span class="line">（```）</span><br><span class="line"></span><br><span class="line">下面有一段Java代码：</span><br><span class="line">（```java）</span><br><span class="line">public class Hello&#123;</span><br><span class="line">  public static void main (String[] args) &#123;</span><br><span class="line">    System.out.println(&quot;Hello world !&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">（```）</span><br></pre></td></tr></table></figure><blockquote><p>注：为了防止代码块标识符被转译，笔者在三个反引号前后加了括号，使用时应去除括号。</p></blockquote><p>效果如下：</p><p>这里有一个行内代码<code>code</code>，下面有两行代码：</p><pre><code>a line codesa line codes</code></pre><p>下面有一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">code and code and code</span><br><span class="line">code and code and code</span><br></pre></td></tr></table></figure><p>下面有一段Java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello world !"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-强调"><a href="#2-5-强调" class="headerlink" title="2.5 强调"></a>2.5 强调</h2><p>强调效果有粗体和斜体两种，一对<code>*</code>符号包裹的字符会显示为斜体，而一对<code>**</code>包裹的字符会显示为粗体，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是*斜体*，这是**粗体**</span><br></pre></td></tr></table></figure><p>效果如下：</p><p>这是<em>斜体</em>，这是<strong>粗体</strong></p><h2 id="2-6-列表"><a href="#2-6-列表" class="headerlink" title="2.6 列表"></a>2.6 列表</h2><p>列表的编写相当方便，无序列表只需在行前加<code>+</code>/<code>-</code>/<code>*</code>符号加空格即可，有序列表则在行前加<code>1.</code>等序号加空格即可，列表内容加入<code>[ ]</code>或<code>[x]</code>可用来标识待办事项，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+ 无序列表</span><br><span class="line">- 无序列表</span><br><span class="line">* 无序列表</span><br><span class="line"></span><br><span class="line">1. 有序列表</span><br><span class="line">2. 有序列表</span><br><span class="line">3. 有序列表</span><br><span class="line"></span><br><span class="line">* [ ] 待办1</span><br><span class="line">* [x] 待办2</span><br><span class="line">1. [ ] 待办3</span><br><span class="line">2. [x] 待办4</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li>无序列表</li></ul><ul><li>无序列表</li></ul><ul><li>无序列表</li></ul><ol><li>有序列表</li><li>有序列表</li><li>有序列表</li></ol><ul><li><input disabled type="checkbox"> 待办1</li><li><input checked disabled type="checkbox"> 待办2</li></ul><ol><li><input disabled type="checkbox"> 待办3</li><li><input checked disabled type="checkbox"> 待办4</li></ol><h2 id="2-7-分割线"><a href="#2-7-分割线" class="headerlink" title="2.7 分割线"></a>2.7 分割线</h2><p>分割线在各个浏览器的显示形式都有所不同，使用三个<code>*</code>/<code>-</code>/<code>_</code>均可以实现一根分割线，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br><span class="line">___</span><br></pre></td></tr></table></figure><p>效果如下：</p><hr><hr><hr><h2 id="2-8-链接"><a href="#2-8-链接" class="headerlink" title="2.8 链接"></a>2.8 链接</h2><p>在md中想要跳转到某个外链，可以使用两种方式完成，第一种是md语法<code>[超链接名](超链接地址 &quot;超链接title&quot;)</code>title可加可不加，这种方式可能无法在当前标签页中打开网址，第二种是使用html中的<code>&lt;a&gt;</code>标签，可以指定target来控制网址打开方式。示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[百度](http://www.baidu.com/ &quot;百度一下&quot;)</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;http://www.baidu.com/&quot; target=&quot;_blank&quot;&gt;百度&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><a href="http://www.baidu.com/" title="百度一下" target="_blank" rel="noopener">百度</a></p><p><a href="http://www.baidu.com/" target="_blank_">百度</a></p><h2 id="2-9-图片"><a href="#2-9-图片" class="headerlink" title="2.9 图片"></a>2.9 图片</h2><p>图片的使用方式有些类似链接，在链接的格式前方加<code>!</code>即可，即<code>![图片名](图片地址)</code>，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![github头像](https://github.com/fluidicon.png)</span><br></pre></td></tr></table></figure><p>效果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://github.com/fluidicon.png" alt="github头像" title>                </div>                <div class="image-caption">github头像</div>            </figure><h2 id="2-10-表格"><a href="#2-10-表格" class="headerlink" title="2.10 表格"></a>2.10 表格</h2><p>常常在文章中需要使用表格来罗列事项、比对事物，md支持了表格的简单形式，使用方式即使用<code>|</code>和<code>-</code>符号进行组合，示例如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|   表头一   |   表头二   |</span><br><span class="line">| --------- | --------- |</span><br><span class="line">| 表格内容一 | 表格内容二 |</span><br><span class="line">| 表格内容三 | 表格内容四 |</span><br></pre></td></tr></table></figure><blockquote><p>注：对齐居中等不需要太注意</p></blockquote><p>效果如下：</p><table><thead><tr><th>表头一</th><th>表头二</th></tr></thead><tbody><tr><td>表格内容一</td><td>表格内容二</td></tr><tr><td>表格内容三</td><td>表格内容四</td></tr></tbody></table><h2 id="2-11-流程图"><a href="#2-11-流程图" class="headerlink" title="2.11 流程图"></a>2.11 流程图</h2><p>markdown本身并不能直接转换流程图，但可以通过插件来完成，感兴趣的童鞋可以了解一下。不过笔者看来在markdown里写流程图还是比较麻烦的，简单的还好，复杂一点的就有点烧脑了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;程序猿都爱写博客，在写博客的过程中，大量运用的就是MarkDown语法了。MarkDown不只是用来写博客，日常生活中的感悟、工作中的心得体会、项目任务安排等等大篇幅的文章都可以用MarkDown来迅速的完成具有一定显示效果的文本。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工作之余" scheme="http://hwb0011.github.io/categories/%E5%B7%A5%E4%BD%9C%E4%B9%8B%E4%BD%99/"/>
    
    
      <category term="MarkDown" scheme="http://hwb0011.github.io/tags/MarkDown/"/>
    
      <category term="博客" scheme="http://hwb0011.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>利用GitHub和Hexo打造免费的个人博客</title>
    <link href="http://hwb0011.github.io/2019/06/01/%E5%88%A9%E7%94%A8GitHub%E5%92%8CHexo%E6%89%93%E9%80%A0%E5%85%8D%E8%B4%B9%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://hwb0011.github.io/2019/06/01/利用GitHub和Hexo打造免费的个人博客/</id>
    <published>2019-06-01T03:30:30.000Z</published>
    <updated>2019-06-12T08:12:52.061Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每个程序猿都需要一个个人博客，目前广泛出现在大家视野里的有CSDN、博客园、简书，但是他们却没有给用户一个专属的站点、一个好记的域名。你需要一个<code>http://xxx.xxx.xxx/</code>格式的网址，一个自由书写代码的站点，一个真正的个人博客。</p></blockquote><a id="more"></a><h1 id="1-GitHub提供的免费网站"><a href="#1-GitHub提供的免费网站" class="headerlink" title="1. GitHub提供的免费网站"></a>1. GitHub提供的免费网站</h1><h2 id="1-1-GitHub——面向开源及私有软件项目的托管平台"><a href="#1-1-GitHub——面向开源及私有软件项目的托管平台" class="headerlink" title="1.1 GitHub——面向开源及私有软件项目的托管平台"></a>1.1 GitHub——面向开源及私有软件项目的托管平台</h2><p><a href="https://github.com/" target="_blank" rel="noopener">GitHub官网</a></p><blockquote><p>作为开源代码库以及版本控制系统，Github拥有超过900万开发者用户。随着越来越多的应用程序转移到了云上，Github已经成为了管理软件开发以及发现已有代码的首选方法。<br><em>——来源：百度百科</em></p></blockquote><p>GitHub是目前最大的代码仓库，如果你还没有GitHub账号的话，就赶紧去官网注册一个吧。</p><h2 id="1-2-GitHub-Pages——免费提供最基础的静态网站"><a href="#1-2-GitHub-Pages——免费提供最基础的静态网站" class="headerlink" title="1.2 GitHub Pages——免费提供最基础的静态网站"></a>1.2 GitHub Pages——免费提供最基础的静态网站</h2><p><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages官网</a></p><p>每个GitHub账户都可以免费开一个自己的静态网站（域名为 username.github.io），该网站由GitHub Pages提供，省去了域名、服务器、备案等一系列建站需要考虑的问题，只需要一份静态网站的代码即可。</p><p>首先你需要创建一个GitHub Pages repository。GitHub Pages repository跟普通的repository是一样的，唯一的区别就是他的名字必须叫做<code>username.gihub.io</code>。这个官方教程 GitHub Pages 写的十分好懂，按这个做完之后你就有了一个你的网址<code>username.github.io</code>！<strong>比如你的GitHub用户名是<code>abc</code>，那么你的repository名称和网址就是<code>abc.gihub.io</code></strong></p><p>现在离一个好网站只差一步了，就是把某个好网站的所有文件拷贝到你的库里面。<br>GitHub官方建议你使用博客生成工具<code>Jekyll</code> 。GitHub在库的设置里面还提供Jekyll主题选择。</p><p>本文将介绍的是<code>Hexo</code>生成工具。</p><h1 id="2-Hexo搭建的静态博客网站"><a href="#2-Hexo搭建的静态博客网站" class="headerlink" title="2. Hexo搭建的静态博客网站"></a>2. Hexo搭建的静态博客网站</h1><h2 id="2-1-Hexo——快速、简洁且高效的博客框架"><a href="#2-1-Hexo——快速、简洁且高效的博客框架" class="headerlink" title="2.1 Hexo——快速、简洁且高效的博客框架"></a>2.1 Hexo——快速、简洁且高效的博客框架</h2><p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo官网</a></p><blockquote><p><strong>超快速度</strong><br>Node.js 所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。<br><strong>支持 Markdown</strong><br>Hexo 支持 GitHub Flavored Markdown 的所有功能，甚至可以整合 Octopress 的大多数插件。<br><strong>一键部署</strong><br>只需一条指令即可部署到 GitHub Pages, Heroku 或其他网站。<br><strong>丰富的插件</strong><br>Hexo 拥有强大的插件系统，安装插件可以让 Hexo 支持 Jade, CoffeeScript。</p></blockquote><h3 id="2-1-1-安装前提"><a href="#2-1-1-安装前提" class="headerlink" title="2.1.1 安装前提"></a>2.1.1 安装前提</h3><p>安装<code>Hexo</code>相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p><ul><li>Node.js (Should be at least nodejs 6.9)</li><li>Git</li></ul><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用<code>npm</code>即可完成<code>Hexo</code>的安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>如果您的电脑中尚未安装所需要的程序，请根据以下安装指示完成安装。</p><blockquote><p><strong>Mac 用户</strong><br>您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安装命令行工具。</p></blockquote><h3 id="2-1-2-安装-Git"><a href="#2-1-2-安装-Git" class="headerlink" title="2.1.2 安装 Git"></a>2.1.2 安装 Git</h3><p>Windows：下载并安装 <a href="https://git-scm.com/download/win" target="_blank" rel="noopener">git</a>.   Mac：使用 <a href="http://mxcl.github.com/homebrew/" target="_blank" rel="noopener">Homebrew</a>, <a href="http://www.macports.org/" target="_blank" rel="noopener">MacPorts</a> ：<code>brew install git</code>;或下载 <a href="http://sourceforge.net/projects/git-osx-installer/" target="_blank" rel="noopener">安装程序</a> 安装。<br>Linux (Ubuntu, Debian)：<code>sudo apt-get install git-core</code>。   Linux (Fedora, Red Hat, CentOS)：<code>sudo yum install git-core</code>。</p><blockquote><p><strong>Windows 用户</strong><br>由于众所周知的原因，从上面的链接下载git for windows最好挂上一个代理，否则下载速度十分缓慢。也可以参考<a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">这个页面</a>，收录了存储于百度云的下载地址。</p></blockquote><h3 id="2-1-3-安装-Node-js"><a href="#2-1-3-安装-Node-js" class="headerlink" title="2.1.3 安装 Node.js"></a>2.1.3 安装 Node.js</h3><p>安装 Node.js 的最佳方式是使用 <a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">nvm</a>。</p><p>cURL:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</span><br></pre></td></tr></table></figure><p>Wget:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</span><br></pre></td></tr></table></figure><p>安装完成后，重启终端并执行下列命令即可安装 Node.js。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvm install stable</span><br></pre></td></tr></table></figure><p>或者您也可以下载 <a href="http://nodejs.org/" target="_blank" rel="noopener">安装程序</a> 来安装。</p><blockquote><p><strong>Windows 用户</strong><br>对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。<br>另外，您也可以使用Git Bash，这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“Git Bash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。</p></blockquote><h3 id="2-1-4-安装-Hexo"><a href="#2-1-4-安装-Hexo" class="headerlink" title="2.1.4 安装 Hexo"></a>2.1.4 安装 Hexo</h3><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="2-1-5-建站"><a href="#2-1-5-建站" class="headerlink" title="2.1.5 建站"></a>2.1.5 建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ cd &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h2 id="2-2-Hexo的自定义配置及博客主题"><a href="#2-2-Hexo的自定义配置及博客主题" class="headerlink" title="2.2 Hexo的自定义配置及博客主题"></a>2.2 Hexo的自定义配置及博客主题</h2><h3 id="2-2-1-config-yml"><a href="#2-2-1-config-yml" class="headerlink" title="2.2.1 _config.yml"></a>2.2.1 _config.yml</h3><p>网站的配置信息，您可以在此配置大部分的参数。文件内各个配置参数均有详细备注，按规则填入所需即可。</p><h3 id="2-2-2-package-json"><a href="#2-2-2-package-json" class="headerlink" title="2.2.2 package.json"></a>2.2.2 package.json</h3><p>应用程序的信息，EJS、 Stylus 和 Markdown renderer 已默认安装，您可以自由移除。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;hexo&quot;: &#123;</span><br><span class="line">    &quot;version&quot;: &quot;&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;hexo&quot;: &quot;^3.8.0&quot;,</span><br><span class="line">    &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;,</span><br><span class="line">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</span><br><span class="line">    &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;,</span><br><span class="line">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</span><br><span class="line">    &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;,</span><br><span class="line">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;,</span><br><span class="line">    &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;,</span><br><span class="line">    &quot;hexo-server&quot;: &quot;^0.3.3&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-scaffolds"><a href="#2-2-3-scaffolds" class="headerlink" title="2.2.3 scaffolds"></a>2.2.3 scaffolds</h3><p>模版文件夹，当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><h3 id="2-2-4-source"><a href="#2-2-4-source" class="headerlink" title="2.2.4 source"></a>2.2.4 source</h3><p>资源文件夹是存放用户资源的地方，除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p><h3 id="2-2-5-themes"><a href="#2-2-5-themes" class="headerlink" title="2.2.5 themes"></a>2.2.5 themes</h3><p>主题文件夹，Hexo 会根据主题来生成静态页面。GitHub上存在许多第三方主题，根据主题的文档介绍引入Hexo项目中，会在主题文件夹下生成一个相应的文件夹，再修改_config.xml文件夹的theme属性即可。</p><p>本文将要介绍的是<code>Indigo</code>主题。</p><h1 id="3-Indigo主题——Material-Design-风格的Hexo主题"><a href="#3-Indigo主题——Material-Design-风格的Hexo主题" class="headerlink" title="3. Indigo主题——Material Design 风格的Hexo主题"></a>3. Indigo主题——Material Design 风格的Hexo主题</h1><p><a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">Indigo in GitHub</a></p><blockquote><p>仅支持 IE10+ 等现代浏览器。<br>去 jQuery，更轻。相信现代浏览器的原生兼容性。<br>使用 Less 作为 css 预处理器，需要安装 hexo-renderer-less。<br>添加了英文字体支持 Roboto。<br>添加了一些波纹效果。<br>无前端依赖的分享实现。<br>基于静态数据的站内搜索，无第三方侵入。<br>支持文章打赏。</p></blockquote><p>现有两个主题分支，我的博客中使用的是<code>card</code>分支卡片风格主题，<code>master</code>分支是旧版平铺式风格主题。</p><h2 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h2><p>安装需确认你的 Hexo 版本在 3.0 以上，以及 Node 版本为 6.x 以上，在 Hexo 根目录，执行以下命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:yscoder/hexo-theme-indigo.git themes/indigo</span><br></pre></td></tr></table></figure><h3 id="3-1-1-切换主题"><a href="#3-1-1-切换主题" class="headerlink" title="3.1.1 切换主题"></a>3.1.1 切换主题</h3><p>执行<code>git branch</code>显示所有本地分支，如果只存在一个分支，可以执行下面的命令获取另一分支的主题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 获取远程 card 分支，并切换</span><br><span class="line">$ git checkout -b card origin/card</span><br><span class="line"></span><br><span class="line"># 获取远程 master 分支，并切换</span><br><span class="line">$ git checkout -b master origin/master</span><br></pre></td></tr></table></figure><p>此命令只需执行一次，之后使用<code>git checkout [branch]</code>命令在两个主题之间切换。</p><h3 id="3-1-2-依赖安装"><a href="#3-1-2-依赖安装" class="headerlink" title="3.1.2 依赖安装"></a>3.1.2 依赖安装</h3><p>还是在 Hexo 根目录，如果以下插件已安装过，无需再次安装。</p><p><strong>Less</strong></p><p>主题默认使用 less 作为 css 预处理工具。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-renderer-less --save</span><br></pre></td></tr></table></figure><p><strong>Feed</strong></p><p>用于生成 rss。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p><strong>Json-content</strong></p><p>用于生成静态站点数据，用作站内搜索的数据源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-json-content --save</span><br></pre></td></tr></table></figure><p><strong>QRCode</strong></p><p>用于生成微信分享二维码。</p><p>可选，不安装时会请求<code>jiathis Api</code>生成二维码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-helper-qrcode --save</span><br></pre></td></tr></table></figure><h3 id="3-1-3-开启标签页"><a href="#3-1-3-开启标签页" class="headerlink" title="3.1.3 开启标签页"></a>3.1.3 开启标签页</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>修改 hexo/source/tags/index.md 的元数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: tags</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="3-1-4-开启分类页"><a href="#3-1-4-开启分类页" class="headerlink" title="3.1.4 开启分类页"></a>3.1.4 开启分类页</h3><p>仅 card theme 支持。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>修改 hexo/source/categories/index.md 的元数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: categories</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="3-2-常见问题"><a href="#3-2-常见问题" class="headerlink" title="3.2 常见问题"></a>3.2 常见问题</h2><h3 id="3-2-1-如何设置文章摘要"><a href="#3-2-1-如何设置文章摘要" class="headerlink" title="3.2.1 如何设置文章摘要"></a>3.2.1 如何设置文章摘要</h3><p>在 Markdown 中加<code>&lt;!-- more --&gt;</code></p><h3 id="3-2-2-文章如何添加多个标签"><a href="#3-2-2-文章如何添加多个标签" class="headerlink" title="3.2.2 文章如何添加多个标签"></a>3.2.2 文章如何添加多个标签</h3><p>有两种多标签格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tags: [a, b, c]</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line">  - a</span><br><span class="line">  - b</span><br><span class="line">  - c</span><br></pre></td></tr></table></figure><h3 id="3-2-3-修改-brand-图片（菜单上方背景图）"><a href="#3-2-3-修改-brand-图片（菜单上方背景图）" class="headerlink" title="3.2.3 修改 brand 图片（菜单上方背景图）"></a>3.2.3 修改 brand 图片（菜单上方背景图）</h3><p>替换 themes\indigo\source\img\brand.jpg，保持原文件名不变。</p><h3 id="3-2-4-如何在文章中使用图标"><a href="#3-2-4-如何在文章中使用图标" class="headerlink" title="3.2.4 如何在文章中使用图标"></a>3.2.4 如何在文章中使用图标</h3><p>先到 <a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">fontawesome</a> 找到你需要的图标名，比如：book，按以下格式使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;i class=&quot;icon icon-book&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure><p>图标样式前缀均为 icon，此外还有 5 个图标大小调节类和 1 个间距类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 1.3倍大小 --&gt;</span><br><span class="line">&lt;i class=&quot;icon icon-book icon-lg&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;!-- 2倍大小 --&gt;</span><br><span class="line">&lt;i class=&quot;icon icon-book icon-2x&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;!-- 3倍大小 --&gt;</span><br><span class="line">&lt;i class=&quot;icon icon-book icon-3x&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;!-- 4倍大小 --&gt;</span><br><span class="line">&lt;i class=&quot;icon icon-book icon-4x&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;!-- 5倍大小 --&gt;</span><br><span class="line">&lt;i class=&quot;icon icon-book icon-5x&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;!-- 5px右边距 --&gt;</span><br><span class="line">&lt;i class=&quot;icon icon-book icon-pr&quot;&gt;&lt;/i&gt;</span><br><span class="line">&lt;!-- 5px左边距 --&gt;</span><br><span class="line">&lt;i class=&quot;icon icon-book icon-pl&quot;&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-5-个别图标无法显示"><a href="#3-2-5-个别图标无法显示" class="headerlink" title="3.2.5 个别图标无法显示"></a>3.2.5 个别图标无法显示</h3><p>如果你的浏览器安装了 <code>ADBlock</code>，它会屏蔽 <code>SNS</code> 相关的内容，比如：Github。</p><p>解决办法：可配置 ADBlock 不在你的站点运行。</p><h3 id="3-2-6-生成站点后没有样式"><a href="#3-2-6-生成站点后没有样式" class="headerlink" title="3.2.6 生成站点后没有样式"></a>3.2.6 生成站点后没有样式</h3><p>安装less</p><h3 id="3-2-7-自行修改样式线上不生效"><a href="#3-2-7-自行修改样式线上不生效" class="headerlink" title="3.2.7 自行修改样式线上不生效"></a>3.2.7 自行修改样式线上不生效</h3><p>因为主题默认引用 <code>cdn</code> 样式，只有主题更新时，<code>cdn</code> 中的样式才会变化。 如果想使用自己修改的样式，需要把修改配置中的<code>cdn: false</code>。这样就不在引用<code>cdn</code>资源，使用本地资源了。</p><h3 id="3-2-8-更改样式后网站没有生效"><a href="#3-2-8-更改样式后网站没有生效" class="headerlink" title="3.2.8 更改样式后网站没有生效"></a>3.2.8 更改样式后网站没有生效</h3><p>确认非缓存问题后，执行 <code>hexo clean</code> 再进行生成上传。</p><blockquote><p>建议每次提交时都执行一次<code>hexo clean</code>，可以在项目目录下创建一个shell脚本，执行命令<code>hexo clean &amp;&amp; hexo generate --deploy</code>，运行后即可保证每次修改都能生效。</p></blockquote><h3 id="3-2-9-更改站点配色"><a href="#3-2-9-更改站点配色" class="headerlink" title="3.2.9 更改站点配色"></a>3.2.9 更改站点配色</h3><p>编辑 themes\indigo\source\css_partial\variable.less，更改对应的颜色变量。</p><p>配色参考：<a href="http://www.materialpalette.com/" target="_blank" rel="noopener">Material Design Color Palette Generator</a></p><blockquote><p>注意：使用自定义配色时需把主题配置中的 cdn 关闭，cdn: false。</p></blockquote><h3 id="3-2-10-添加404页面"><a href="#3-2-10-添加404页面" class="headerlink" title="3.2.10 添加404页面"></a>3.2.10 添加404页面</h3><p>在 hexo/source 目录内新建 404.html。</p><p>设置元数据信息，如果不想套用主题布局可设置 layout 为 false。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">layout: false    </span><br><span class="line">title: &quot;My Blog Name | 404&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="3-2-11-在博客中使用-Emoji"><a href="#3-2-11-在博客中使用-Emoji" class="headerlink" title="3.2.11 在博客中使用 Emoji"></a>3.2.11 在博客中使用 Emoji</h3><p>参考 <a href="https://github.com/yscoder/hexo-theme-indigo/issues/90" target="_blank" rel="noopener">Can i use emoji in mypage?</a></p><h2 id="3-3-自定义页面"><a href="#3-3-自定义页面" class="headerlink" title="3.3 自定义页面"></a>3.3 自定义页面</h2><p>主题 Card 分支为自定义页面提供了定制化模块支持，特此简单介绍。</p><h3 id="3-3-1-创建自定义页面"><a href="#3-3-1-创建自定义页面" class="headerlink" title="3.3.1 创建自定义页面"></a>3.3.1 创建自定义页面</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page pageName</span><br></pre></td></tr></table></figure><p>执行命令后会在你的 Hexo 根目录 <code>source/</code> 目录下生成一个与你刚才输入的 <code>pageName</code> 一样的文件夹，里面只有一个 <code>index.md</code>。</p><h3 id="3-3-2-页面配置"><a href="#3-3-2-页面配置" class="headerlink" title="3.3.2 页面配置"></a>3.3.2 页面配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">layout: page      # 必须</span><br><span class="line">title: pageTitle  # 必须，页面名称</span><br><span class="line">description: 用户自定义页面功能演示       # 页面二级标题，描述性文字</span><br><span class="line">comments: false     # 禁用评论，可选，默认开启</span><br><span class="line">reward: false       # 禁用打赏，可选，默认开启</span><br><span class="line">----</span><br></pre></td></tr></table></figure><h3 id="3-3-3-模块和内容输入"><a href="#3-3-3-模块和内容输入" class="headerlink" title="3.3.3 模块和内容输入"></a>3.3.3 模块和内容输入</h3><p>自定义页面中，<code>image</code>、<code>blockquote</code>、<code>pre</code> 等将被赋予特殊的样式。此外，提供了<code>@moduleName{ ... }</code>格式的标记用于包裹内容，赋予样式。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;每个程序猿都需要一个个人博客，目前广泛出现在大家视野里的有CSDN、博客园、简书，但是他们却没有给用户一个专属的站点、一个好记的域名。你需要一个&lt;code&gt;http://xxx.xxx.xxx/&lt;/code&gt;格式的网址，一个自由书写代码的站点，一个真正的个人博客。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="工作之余" scheme="http://hwb0011.github.io/categories/%E5%B7%A5%E4%BD%9C%E4%B9%8B%E4%BD%99/"/>
    
    
      <category term="博客" scheme="http://hwb0011.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="前端" scheme="http://hwb0011.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hexo" scheme="http://hwb0011.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
